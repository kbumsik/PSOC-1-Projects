FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 08 58 LJMP  _DUALADC_1_CNT1_ISR(0149)     ljmp	_DUALADC_1_CNT1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 08 5E LJMP  _DUALADC_1_PWM16_ISR(0157)     ljmp	_DUALADC_1_PWM16_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 08 5B LJMP  _DUALADC_1_CNT2_ISR(0161)     ljmp	_DUALADC_1_CNT2_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     ;ljmp	_StopTimer_ISR
0034: 7D 16 70 LJMP  _StopTimer_ISR     (0170)     ljmp _StopTimer_ISR
0037: 7E       RETI                     (0171) 	reti
                                        (0172) 
                                        (0173)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0174)     ;ljmp	_MuteTimer_ISR
0038: 7D 16 78 LJMP  _MuteTimer_ISR     (0175)     ljmp _MuteTimer_ISR
003B: 7E       RETI                     (0176)     reti
                                        (0177) 
                                        (0178)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0179)     // call	void_handler
003C: 7E       RETI                     (0180)     reti
                                        (0181) 
                                        (0182)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0183)     // call	void_handler
0060: 7E       RETI                     (0184)     reti
                                        (0185) 
                                        (0186)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0187)     // call	void_handler
0064: 7E       RETI                     (0188)     reti
0068: 71 10    OR    F,0x10             
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ; Insert your custom code above this banner
                                        (0191)     ;---------------------------------------------------
                                        (0192)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0193) 
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  Start of Execution.
                                        (0196) ;-----------------------------------------------------------------------------
                                        (0197) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0198) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0199) ;
                                        (0200) 
                                        (0201) IF	(TOOLCHAIN & HITECH)
                                        (0202)  	AREA PD_startup(CODE, REL, CON)
                                        (0203) ELSE
                                        (0204)     org 68h
                                        (0205) ENDIF
                                        (0206) __Start:
                                        (0207) 
                                        (0208)     ; initialize SMP values for voltage stabilization, if required,
                                        (0209)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0210)     ; least for now. 
                                        (0211)     ;
                                        (0212)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0213)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0214)     M8C_SetBank0
                                        (0215) 
                                        (0216) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0217) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0218)     M8C_EnableWatchDog
                                        (0219) ENDIF
                                        (0220) 
                                        (0221) IF ( SELECT_32K )
                                        (0222)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0223) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0224)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0225) ENDIF
                                        (0226) 
                                        (0227) IF	(TOOLCHAIN & HITECH) 
                                        (0228)     ;---------------------------
                                        (0229)     ; Set up the Temporary stack
                                        (0230)     ;---------------------------
                                        (0231)     ; A temporary stack is set up for the SSC instructions.
                                        (0232)     ; The real stack start will be assigned later.
                                        (0233)     ;
                                        (0234) 	global		__Lstackps
                                        (0235) 	mov     a,low __Lstackps
                                        (0236) 	swap    a,sp
                                        (0237) ELSE
                                        (0238)     ;------------------
                                        (0239)     ; Set up the stack
                                        (0240)     ;------------------
0075: 50 6D    MOV   A,0x6D             (0241)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0242)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0243) ENDIF
                                        (0244) 
                                        (0245)     ;-----------------------------------------------
                                        (0246)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0247)     ;-----------------------------------------------
                                        (0248) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0249) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0250)  IF ( AGND_BYPASS )
                                        (0251)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0252)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0253)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0254)     ; value using the proper trim values.
                                        (0255)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0256)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0257)  ENDIF
                                        (0258) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0259)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0260) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0261) 
007B: 55 F8 00 MOV   [_ramareas_end+139],0x0(0262)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+140],0x0(0263)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0264) 
                                        (0265)     ;---------------------------------------
                                        (0266)     ; Initialize Crystal Oscillator and PLL
                                        (0267)     ;---------------------------------------
                                        (0268) 
                                        (0269) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0270)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0271)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0272)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0273)     ; the ECO to stabilize.
                                        (0274)     ;
                                        (0275)     M8C_SetBank1
                                        (0276)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0277)     M8C_SetBank0
                                        (0278)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0279)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0280)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0281) .WaitFor1s:
                                        (0282)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0283)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0284)                                           ;   since interrupts are not globally enabled
                                        (0285) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0286)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0287)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0288)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0289)     M8C_SetBank0
                                        (0290)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0291) 
                                        (0292) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0293) 
                                        (0294) IF ( PLL_MODE )
                                        (0295)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0296)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0297)     ;
                                        (0298)     M8C_SetBank1
                                        (0299)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0300)     M8C_SetBank0
                                        (0301)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0302)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0303) 
                                        (0304) .WaitFor16ms:
                                        (0305)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0306)     jz   .WaitFor16ms
                                        (0307)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0308)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0309)     M8C_SetBank0
                                        (0310) 
                                        (0311) IF      ( WAIT_FOR_32K )
                                        (0312) ELSE ; !( WAIT_FOR_32K )
                                        (0313)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0314)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0315) ENDIF ;(WAIT_FOR_32K)
                                        (0316) ENDIF ;(PLL_MODE)
                                        (0317) 
                                        (0318) 	;-------------------------------------------------------
                                        (0319)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0320)     ;-------------------------------------------------------
                                        (0321) 
                                        (0322)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0323) 
                                        (0324) IF (SYSCLK_SOURCE)
                                        (0325)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0326) ENDIF
                                        (0327)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0328) 
                                        (0329)     ;------------------------
                                        (0330)     ; Close CT leakage path.
                                        (0331)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0332)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0333)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0334)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0335)     mov   reg[ACB03CR0], 05h
                                        (0336) 
                                        (0337)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0338)     ;---------------------------------------------------
                                        (0339)     ; Insert your custom code below this banner
                                        (0340)     ;---------------------------------------------------
                                        (0341) 
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ; Insert your custom code above this banner
                                        (0344)     ;---------------------------------------------------
                                        (0345)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0346) 
                                        (0347)     ;-------------------------
                                        (0348)     ; Load Base Configuration
                                        (0349)     ;-------------------------
                                        (0350)     ; Load global parameter settings and load the user modules in the
                                        (0351)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0352)     ; to minimize start up time; (2) We may still need to play with the
                                        (0353)     ; Sleep Timer.
                                        (0354)     ;
0097: 7C 04 C1 LCALL 0x04C1             (0355)     lcall LoadConfigInit
                                        (0356) 
                                        (0357)     ;-----------------------------------
                                        (0358)     ; Initialize C Run-Time Environment
                                        (0359)     ;-----------------------------------
                                        (0360) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0361)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 37 43 MOV   [__r0],0x43        (0362)     mov  [__r0],<__bss_start
                                        (0363) BssLoop:
009F: 3C 37 6D CMP   [__r0],0x6D        (0364)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0365)     jz   BssDone
00A4: 3F 37    MVI   [__r0],A           (0366)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0367)     jmp  BssLoop
                                        (0368) BssDone:
00A8: 50 03    MOV   A,0x3              (0369)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 BD    MOV   X,0xBD             (0370)     mov  X,<__idata_start
00AC: 55 37 00 MOV   [__r0],0x0         (0371)     mov  [__r0],<__data_start
                                        (0372) IDataLoop:
00AF: 3C 37 31 CMP   [__r0],0x31        (0373)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0374)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0375)     push A
00B5: 28       ROMX                     (0376)     romx
00B6: 3F 37    MVI   [__r0],A           (0377)     mvi  [__r0],A
00B8: 18       POP   A                  (0378)     pop  A
00B9: 75       INC   X                  (0379)     inc  X
00BA: 09 00    ADC   A,0x0              (0380)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0381)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0382) 
                                        (0383) C_RTE_Done:
                                        (0384) 
                                        (0385) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0386) 
                                        (0387)     ;-------------------------------
                                        (0388)     ; Voltage Stabilization for SMP
                                        (0389)     ;-------------------------------
                                        (0390) 
                                        (0391) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0392) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0393)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0394)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0395)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0396)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0397)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0398)     M8C_SetBank1
                                        (0399)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0400)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0401)     M8C_SetBank0
                                        (0402)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0403)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0404) .WaitFor2ms:
                                        (0405)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0406)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0407) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0408) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0409) 
                                        (0410)     ;-------------------------------
                                        (0411)     ; Set Power-On Reset (POR) Level
                                        (0412)     ;-------------------------------
                                        (0413)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0414)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0415)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0416)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0417)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0418) 
                                        (0419)     M8C_SetBank1
                                        (0420) 
                                        (0421) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0422)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0423)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0424)  ELSE ; 24HMz                               ;
                                        (0425)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0426)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0427) ENDIF ; 5V
                                        (0428) 
                                        (0429)     M8C_SetBank0
                                        (0430) 
                                        (0431)     ;----------------------------
                                        (0432)     ; Wrap up and invoke "main"
                                        (0433)     ;----------------------------
                                        (0434) 
                                        (0435)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0436)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0437)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0438)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0439) 
                                        (0440)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0441)     ;
                                        (0442)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0443)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0444)     M8C_SetBank0
                                        (0445) 
                                        (0446)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0447)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0448)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0449)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0450)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0451)                                    ; have been set during the boot process.
                                        (0452) IF	(TOOLCHAIN & HITECH)
                                        (0453) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0454) ELSE
                                        (0455) IF ENABLE_LJMP_TO_MAIN
                                        (0456)     ljmp  _main                    ; goto main (no return)
                                        (0457) ELSE
00CF: 7C 0A E2 LCALL _main              (0458)     lcall _main                    ; call main
                                        (0459) .Exit:
00D2: 8F FF    JMP   0x00D2             (0460)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0461) ENDIF
                                        (0462) ENDIF ; TOOLCHAIN
                                        (0463) 
                                        (0464)     ;---------------------------------
                                        (0465)     ; Library Access to Global Parms
                                        (0466)     ;---------------------------------
                                        (0467)     ;
                                        (0468)  bGetPowerSetting:
                                        (0469) _bGetPowerSetting:
                                        (0470)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0471)     ; Returns value of POWER_SETTING in the A register.
                                        (0472)     ; No inputs. No Side Effects.
                                        (0473)     ;
                                        (0474) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0475)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ELSE        
                                        (0477)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0478) ENDIF
00D6: 7F       RET                      (0479)     ret
                                        (0480) 
                                        (0481) IF	(TOOLCHAIN & HITECH)
                                        (0482) ELSE
                                        (0483)     ;---------------------------------
                                        (0484)     ; Order Critical RAM & ROM AREAs
                                        (0485)     ;---------------------------------
                                        (0486)     ;  'TOP' is all that has been defined so far...
                                        (0487) 
                                        (0488)     ;  ROM AREAs for C CONST, static & global items
                                        (0489)     ;
                                        (0490)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0491)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0492) __idata_start:
                                        (0493) 
                                        (0494)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0495) __func_lit_start:
                                        (0496) 
                                        (0497)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0498)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0499) 
                                        (0500)     ; CODE segment for general use
                                        (0501)     ;
                                        (0502)     AREA text (ROM, REL, CON)
                                        (0503) __text_start:
                                        (0504) 
                                        (0505)     ; RAM area usage
                                        (0506)     ;
                                        (0507)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0508) __data_start:
                                        (0509) 
                                        (0510)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0511)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0512)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0513) __bss_start:
                                        (0514) 
                                        (0515) ENDIF ; TOOLCHAIN
                                        (0516) 
                                        (0517) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
03FC: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_project1_Bank1
                                        (0019) export LoadConfigTBL_project1_Bank0
                                        (0020) export LoadConfigTBL_project1_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_project1_Bank0:
                                        (0023) ;  Instance name DUALADC_1, User Module DUALADC
                                        (0024) ;       Instance name DUALADC_1, Block Name ADC1(ASD20)
                                        (0025) 	db		90h, 90h		;DUALADC_1_bfADC1cr0(ASD20CR0)
                                        (0026) 	db		91h, a0h		;DUALADC_1_bfADC1cr1(ASD20CR1)
                                        (0027) 	db		92h, 61h		;DUALADC_1_bfADC1cr2(ASD20CR2)
                                        (0028) 	db		93h, f0h		;DUALADC_1_bfADC1cr3(ASD20CR3)
                                        (0029) ;       Instance name DUALADC_1, Block Name ADC2(ASD22)
                                        (0030) 	db		98h, 90h		;DUALADC_1_bfADC2cr0(ASD22CR0)
                                        (0031) 	db		99h, a0h		;DUALADC_1_bfADC2cr1(ASD22CR1)
                                        (0032) 	db		9ah, 60h		;DUALADC_1_bfADC2cr2(ASD22CR2)
                                        (0033) 	db		9bh, f0h		;DUALADC_1_bfADC2cr3(ASD22CR3)
                                        (0034) ;       Instance name DUALADC_1, Block Name CNT1(DBB00)
                                        (0035) 	db		23h, 00h		;DUALADC_1_bCounter1_CR0(DBB00CR0)
                                        (0036) 	db		21h, 00h		;DUALADC_1_bPeriod1(DBB00DR1)
                                        (0037) 	db		22h, 00h		;DUALADC_1_bCompare1(DBB00DR2)
                                        (0038) ;       Instance name DUALADC_1, Block Name CNT2(DCB03)
                                        (0039) 	db		2fh, 00h		;DUALADC_1_bCounter2_CR0(DCB03CR0)
                                        (0040) 	db		2dh, 00h		;DUALADC_1_bPeriod2(DCB03DR1)
                                        (0041) 	db		2eh, 00h		;DUALADC_1_bCompare2(DCB03DR2)
                                        (0042) ;       Instance name DUALADC_1, Block Name PWM16_LSB(DBB01)
                                        (0043) 	db		27h, 00h		;DUALADC_1_fPWM_LSB_CR0(DBB01CR0)
                                        (0044) 	db		25h, 00h		;DUALADC_1_bPWM_Period_LSB(DBB01DR1)
                                        (0045) 	db		26h, 00h		;DUALADC_1_bPWM_IntTime_LSB(DBB01DR2)
                                        (0046) ;       Instance name DUALADC_1, Block Name PWM16_MSB(DCB02)
                                        (0047) 	db		2bh, 00h		;DUALADC_1_fPWM_MSB_CR0(DCB02CR0)
                                        (0048) 	db		29h, 00h		;DUALADC_1_bPWM_Period_MSB(DCB02DR1)
                                        (0049) 	db		2ah, 00h		;DUALADC_1_bPWM_IntTime_MSB(DCB02DR2)
                                        (0050) ;  Instance name LCD, User Module LCD
                                        (0051) ;  Instance name LPF2_1, User Module LPF2
                                        (0052) ;       Instance name LPF2_1, Block Name FLIN(ASC10)
                                        (0053) 	db		80h, 94h		;LPF2_1_FLIN_CR0(ASC10CR0)
                                        (0054) 	db		81h, 88h		;LPF2_1_FLIN_CR1(ASC10CR1)
                                        (0055) 	db		82h, 00h		;LPF2_1_FLIN_CR2(ASC10CR2)
                                        (0056) 	db		83h, 24h		;LPF2_1_FLIN_CR3(ASC10CR3)
                                        (0057) ;       Instance name LPF2_1, Block Name FLOUT(ASD11)
                                        (0058) 	db		84h, 92h		;LPF2_1_FLOUT_CR0(ASD11CR0)
                                        (0059) 	db		85h, 40h		;LPF2_1_FLOUT_CR1(ASD11CR1)
                                        (0060) 	db		86h, 9fh		;LPF2_1_FLOUT_CR2(ASD11CR2)
                                        (0061) 	db		87h, 20h		;LPF2_1_FLOUT_CR3(ASD11CR3)
                                        (0062) ;  Instance name LPF2_2, User Module LPF2
                                        (0063) ;       Instance name LPF2_2, Block Name FLIN(ASC12)
                                        (0064) 	db		88h, 94h		;LPF2_2_FLIN_CR0(ASC12CR0)
                                        (0065) 	db		89h, 88h		;LPF2_2_FLIN_CR1(ASC12CR1)
                                        (0066) 	db		8ah, 00h		;LPF2_2_FLIN_CR2(ASC12CR2)
                                        (0067) 	db		8bh, 24h		;LPF2_2_FLIN_CR3(ASC12CR3)
                                        (0068) ;       Instance name LPF2_2, Block Name FLOUT(ASD13)
                                        (0069) 	db		8ch, 92h		;LPF2_2_FLOUT_CR0(ASD13CR0)
                                        (0070) 	db		8dh, 40h		;LPF2_2_FLOUT_CR1(ASD13CR1)
                                        (0071) 	db		8eh, 9fh		;LPF2_2_FLOUT_CR2(ASD13CR2)
                                        (0072) 	db		8fh, 20h		;LPF2_2_FLOUT_CR3(ASD13CR3)
                                        (0073) ;  Instance name MuteTimer, User Module Counter8
                                        (0074) ;       Instance name MuteTimer, Block Name CNTR8(DCB12)
                                        (0075) 	db		3bh, 00h		;MuteTimer_CONTROL_REG(DCB12CR0)
                                        (0076) 	db		39h, a0h		;MuteTimer_PERIOD_REG(DCB12DR1)
                                        (0077) 	db		3ah, 64h		;MuteTimer_COMPARE_REG(DCB12DR2)
                                        (0078) ;  Instance name PGA_1, User Module PGA
                                        (0079) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0080) 	db		71h, fdh		;PGA_1_GAIN_CR0(ACB00CR0)
                                        (0081) 	db		72h, a3h		;PGA_1_GAIN_CR1(ACB00CR1)
                                        (0082) 	db		73h, 20h		;PGA_1_GAIN_CR2(ACB00CR2)
                                        (0083) 	db		70h, 00h		;PGA_1_GAIN_CR3(ACB00CR3)
                                        (0084) ;  Instance name PGA_2, User Module PGA
                                        (0085) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0086) 	db		75h, 1dh		;PGA_2_GAIN_CR0(ACB01CR0)
                                        (0087) 	db		76h, 21h		;PGA_2_GAIN_CR1(ACB01CR1)
                                        (0088) 	db		77h, 20h		;PGA_2_GAIN_CR2(ACB01CR2)
                                        (0089) 	db		74h, 01h		;PGA_2_GAIN_CR3(ACB01CR3)
                                        (0090) ;  Instance name PGA_3, User Module PGA
                                        (0091) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0092) 	db		79h, fdh		;PGA_3_GAIN_CR0(ACB02CR0)
                                        (0093) 	db		7ah, a3h		;PGA_3_GAIN_CR1(ACB02CR1)
                                        (0094) 	db		7bh, 20h		;PGA_3_GAIN_CR2(ACB02CR2)
                                        (0095) 	db		78h, 00h		;PGA_3_GAIN_CR3(ACB02CR3)
                                        (0096) ;  Instance name PGA_4, User Module PGA
                                        (0097) ;       Instance name PGA_4, Block Name GAIN(ACB03)
                                        (0098) 	db		7dh, 1dh		;PGA_4_GAIN_CR0(ACB03CR0)
                                        (0099) 	db		7eh, 21h		;PGA_4_GAIN_CR1(ACB03CR1)
                                        (0100) 	db		7fh, 20h		;PGA_4_GAIN_CR2(ACB03CR2)
                                        (0101) 	db		7ch, 01h		;PGA_4_GAIN_CR3(ACB03CR3)
                                        (0102) ;  Instance name StopTimer, User Module Timer16
                                        (0103) ;       Instance name StopTimer, Block Name TIMER16_LSB(DBB10)
                                        (0104) 	db		33h, 00h		;StopTimer_CONTROL_LSB_REG(DBB10CR0)
                                        (0105) 	db		31h, 00h		;StopTimer_PERIOD_LSB_REG(DBB10DR1)
                                        (0106) 	db		32h, e8h		;StopTimer_COMPARE_LSB_REG(DBB10DR2)
                                        (0107) ;       Instance name StopTimer, Block Name TIMER16_MSB(DBB11)
                                        (0108) 	db		37h, 04h		;StopTimer_CONTROL_MSB_REG(DBB11CR0)
                                        (0109) 	db		35h, 7dh		;StopTimer_PERIOD_MSB_REG(DBB11DR1)
                                        (0110) 	db		36h, 03h		;StopTimer_COMPARE_MSB_REG(DBB11DR2)
                                        (0111) ;  Global Register values Bank 0
                                        (0112) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0113) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0114) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0115) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0116) 	db		e6h, 50h		; DecimatorControl_0 register (DEC_CR0)
                                        (0117) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0118) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0119) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0120) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0121) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0122) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0123) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0124) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0125) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0126) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0127) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0128) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0129) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0130) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0131) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0132) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0133) 	db		ffh
                                        (0134) LoadConfigTBL_project1_Bank1:
                                        (0135) ;  Instance name DUALADC_1, User Module DUALADC
                                        (0136) ;       Instance name DUALADC_1, Block Name ADC1(ASD20)
                                        (0137) ;       Instance name DUALADC_1, Block Name ADC2(ASD22)
                                        (0138) ;       Instance name DUALADC_1, Block Name CNT1(DBB00)
                                        (0139) 	db		20h, 21h		;DUALADC_1_fCounter1FN(DBB00FN)
                                        (0140) 	db		21h, 45h		;DUALADC_1_fCounter1SL(DBB00IN)
                                        (0141) 	db		22h, 40h		;DUALADC_1_fCounter1OS(DBB00OU)
                                        (0142) ;       Instance name DUALADC_1, Block Name CNT2(DCB03)
                                        (0143) 	db		2ch, 21h		;DUALADC_1_fCounter2FN(DCB03FN)
                                        (0144) 	db		2dh, 65h		;DUALADC_1_fCounter2SL(DCB03IN)
                                        (0145) 	db		2eh, 40h		;DUALADC_1_fCounter2OS(DCB03OU)
                                        (0146) ;       Instance name DUALADC_1, Block Name PWM16_LSB(DBB01)
                                        (0147) 	db		24h, 01h		;DUALADC_1_bfPWM_LSB_FN(DBB01FN)
                                        (0148) 	db		25h, 15h		;DUALADC_1_(DBB01IN)
                                        (0149) 	db		26h, 40h		;DUALADC_1_(DBB01OU)
                                        (0150) ;       Instance name DUALADC_1, Block Name PWM16_MSB(DCB02)
                                        (0151) 	db		28h, 21h		;DUALADC_1_bfPWM_MSB_FN(DCB02FN)
                                        (0152) 	db		29h, 35h		;DUALADC_1_(DCB02IN)
                                        (0153) 	db		2ah, 40h		;DUALADC_1_(DCB02OU)
                                        (0154) ;  Instance name LCD, User Module LCD
                                        (0155) ;  Instance name LPF2_1, User Module LPF2
                                        (0156) ;       Instance name LPF2_1, Block Name FLIN(ASC10)
                                        (0157) ;       Instance name LPF2_1, Block Name FLOUT(ASD11)
                                        (0158) ;  Instance name LPF2_2, User Module LPF2
                                        (0159) ;       Instance name LPF2_2, Block Name FLIN(ASC12)
                                        (0160) ;       Instance name LPF2_2, Block Name FLOUT(ASD13)
                                        (0161) ;  Instance name MuteTimer, User Module Counter8
                                        (0162) ;       Instance name MuteTimer, Block Name CNTR8(DCB12)
                                        (0163) 	db		38h, 31h		;MuteTimer_FUNC_REG(DCB12FN)
                                        (0164) 	db		39h, 17h		;MuteTimer_INPUT_REG(DCB12IN)
                                        (0165) 	db		3ah, 40h		;MuteTimer_OUTPUT_REG(DCB12OU)
                                        (0166) ;  Instance name PGA_1, User Module PGA
                                        (0167) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0168) ;  Instance name PGA_2, User Module PGA
                                        (0169) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0170) ;  Instance name PGA_3, User Module PGA
                                        (0171) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0172) ;  Instance name PGA_4, User Module PGA
                                        (0173) ;       Instance name PGA_4, Block Name GAIN(ACB03)
                                        (0174) ;  Instance name StopTimer, User Module Timer16
                                        (0175) ;       Instance name StopTimer, Block Name TIMER16_LSB(DBB10)
                                        (0176) 	db		30h, 00h		;StopTimer_FUNC_LSB_REG(DBB10FN)
                                        (0177) 	db		31h, 17h		;StopTimer_INPUT_LSB_REG(DBB10IN)
                                        (0178) 	db		32h, 40h		;StopTimer_OUTPUT_LSB_REG(DBB10OU)
                                        (0179) ;       Instance name StopTimer, Block Name TIMER16_MSB(DBB11)
                                        (0180) 	db		34h, 20h		;StopTimer_FUNC_MSB_REG(DBB11FN)
                                        (0181) 	db		35h, 37h		;StopTimer_INPUT_MSB_REG(DBB11IN)
                                        (0182) 	db		36h, 40h		;StopTimer_OUTPUT_MSB_REG(DBB11OU)
                                        (0183) ;  Global Register values Bank 1
                                        (0184) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0185) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0186) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0187) 	db		62h, bch		; AnalogIOControl_0 register (ABF_CR0)
                                        (0188) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0189) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0190) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0191) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0192) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0193) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0194) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0195) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0196) 	db		e1h, 27h		; OscillatorControl_1 register (OSC_CR1)
                                        (0197) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0198) 	db		dfh, 19h		; OscillatorControl_3 register (OSC_CR3)
                                        (0199) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0200) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0201) 	db		ffh
                                        (0202) AREA psoc_config(rom, rel)
                                        (0203) LoadConfigTBL_project1_Ordered:
                                        (0204) ;  Ordered Global Register values
                                        (0205) 	M8C_SetBank0
03FE: 62 00 00 MOV   REG[0x0],0x0       (0206) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0401: 71 10    OR    F,0x10             
                                        (0207) 	M8C_SetBank1
0403: 62 00 00 MOV   REG[0x0],0x0       (0208) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0406: 62 01 FF MOV   REG[0x1],0xFF      (0209) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0409: 70 EF    AND   F,0xEF             
                                        (0210) 	M8C_SetBank0
040B: 62 03 FF MOV   REG[0x3],0xFF      (0211) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
040E: 62 02 00 MOV   REG[0x2],0x0       (0212) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0411: 71 10    OR    F,0x10             
                                        (0213) 	M8C_SetBank1
0413: 62 02 00 MOV   REG[0x2],0x0       (0214) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0416: 62 03 00 MOV   REG[0x3],0x0       (0215) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0419: 70 EF    AND   F,0xEF             
                                        (0216) 	M8C_SetBank0
041B: 62 01 00 MOV   REG[0x1],0x0       (0217) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
041E: 62 04 00 MOV   REG[0x4],0x0       (0218) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0421: 71 10    OR    F,0x10             
                                        (0219) 	M8C_SetBank1
0423: 62 04 00 MOV   REG[0x4],0x0       (0220) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0426: 62 05 FE MOV   REG[0x5],0xFE      (0221) 	mov	reg[05h], feh		; Port_1_DriveMode_1 register (PRT1DM1)
0429: 70 EF    AND   F,0xEF             
                                        (0222) 	M8C_SetBank0
042B: 62 07 FE MOV   REG[0x7],0xFE      (0223) 	mov	reg[07h], feh		; Port_1_DriveMode_2 register (PRT1DM2)
042E: 62 06 00 MOV   REG[0x6],0x0       (0224) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0431: 71 10    OR    F,0x10             
                                        (0225) 	M8C_SetBank1
0433: 62 06 00 MOV   REG[0x6],0x0       (0226) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0436: 62 07 00 MOV   REG[0x7],0x0       (0227) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0439: 70 EF    AND   F,0xEF             
                                        (0228) 	M8C_SetBank0
043B: 62 05 00 MOV   REG[0x5],0x0       (0229) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
043E: 62 08 00 MOV   REG[0x8],0x0       (0230) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0441: 71 10    OR    F,0x10             
                                        (0231) 	M8C_SetBank1
0443: 62 08 7F MOV   REG[0x8],0x7F      (0232) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0446: 62 09 80 MOV   REG[0x9],0x80      (0233) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0449: 70 EF    AND   F,0xEF             
                                        (0234) 	M8C_SetBank0
044B: 62 0B 80 MOV   REG[0xB],0x80      (0235) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
044E: 62 0A 00 MOV   REG[0xA],0x0       (0236) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0451: 71 10    OR    F,0x10             
                                        (0237) 	M8C_SetBank1
0453: 62 0A 00 MOV   REG[0xA],0x0       (0238) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0456: 62 0B 00 MOV   REG[0xB],0x0       (0239) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0459: 70 EF    AND   F,0xEF             
                                        (0240) 	M8C_SetBank0
045B: 62 09 00 MOV   REG[0x9],0x0       (0241) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
045E: 62 0C 00 MOV   REG[0xC],0x0       (0242) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0461: 71 10    OR    F,0x10             
                                        (0243) 	M8C_SetBank1
0463: 62 0C 00 MOV   REG[0xC],0x0       (0244) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0466: 62 0D 00 MOV   REG[0xD],0x0       (0245) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0469: 70 EF    AND   F,0xEF             
                                        (0246) 	M8C_SetBank0
046B: 62 0F 00 MOV   REG[0xF],0x0       (0247) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
046E: 62 0E 00 MOV   REG[0xE],0x0       (0248) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0471: 71 10    OR    F,0x10             
                                        (0249) 	M8C_SetBank1
0473: 62 0E 00 MOV   REG[0xE],0x0       (0250) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0476: 62 0F 00 MOV   REG[0xF],0x0       (0251) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0479: 70 EF    AND   F,0xEF             
                                        (0252) 	M8C_SetBank0
047B: 62 0D 00 MOV   REG[0xD],0x0       (0253) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
047E: 62 10 00 MOV   REG[0x10],0x0      (0254) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0481: 71 10    OR    F,0x10             
                                        (0255) 	M8C_SetBank1
0483: 62 10 00 MOV   REG[0x10],0x0      (0256) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0486: 62 11 00 MOV   REG[0x11],0x0      (0257) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0489: 70 EF    AND   F,0xEF             
                                        (0258) 	M8C_SetBank0
048B: 62 13 00 MOV   REG[0x13],0x0      (0259) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
048E: 62 12 00 MOV   REG[0x12],0x0      (0260) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0491: 71 10    OR    F,0x10             
                                        (0261) 	M8C_SetBank1
0493: 62 12 00 MOV   REG[0x12],0x0      (0262) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0496: 62 13 00 MOV   REG[0x13],0x0      (0263) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0499: 70 EF    AND   F,0xEF             
                                        (0264) 	M8C_SetBank0
049B: 62 11 00 MOV   REG[0x11],0x0      (0265) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
049E: 62 14 00 MOV   REG[0x14],0x0      (0266) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
04A1: 71 10    OR    F,0x10             
                                        (0267) 	M8C_SetBank1
04A3: 62 14 00 MOV   REG[0x14],0x0      (0268) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
04A6: 62 15 00 MOV   REG[0x15],0x0      (0269) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
04A9: 70 EF    AND   F,0xEF             
                                        (0270) 	M8C_SetBank0
04AB: 62 17 00 MOV   REG[0x17],0x0      (0271) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
04AE: 62 16 00 MOV   REG[0x16],0x0      (0272) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
04B1: 71 10    OR    F,0x10             
                                        (0273) 	M8C_SetBank1
04B3: 62 16 00 MOV   REG[0x16],0x0      (0274) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
04B6: 62 17 00 MOV   REG[0x17],0x0      (0275) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
04B9: 70 EF    AND   F,0xEF             
                                        (0276) 	M8C_SetBank0
04BB: 62 15 00 MOV   REG[0x15],0x0      (0277) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
04BE: 70 EF    AND   F,0xEF             
                                        (0278) 	M8C_SetBank0
04C0: 7F       RET                      (0279) 	ret
                                        (0280) 
                                        (0281) 
                                        (0282) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_project1
                                        (0026) export _LoadConfig_project1
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
04C1: 55 38 00 MOV   [accuracy_transitions],0x0(0065) 	mov		[Port_2_Data_SHADE], 0h
04C4: 55 39 7F MOV   [accuracy_transitions+1],0x7F(0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
04C7: 55 3A 80 MOV   [accuracy_transitions+2],0x80(0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
04CA: 7C 04 D1 LCALL 0x04D1             (0069) 	lcall	LoadConfig_project1
04CD: 7C 03 FC LCALL 0x03FC             (0070) 	lcall	LoadConfigTBL_project1_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
04D0: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration project1
                                        (0078) ;
                                        (0079) ;    Load configuration registers for project1.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_project1:
                                        (0096)  LoadConfig_project1:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
04D1: 10       PUSH  X                  (0099) 	push	x
04D2: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
04D4: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
04D6: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
04D7: 50 02    MOV   A,0x2              (0104)     mov     A, >LoadConfigTBL_project1_Bank0
04D9: 57 CB    MOV   X,0xCB             (0105)     mov     X, <LoadConfigTBL_project1_Bank0
04DB: 7C 04 EC LCALL 0x04EC             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
04DE: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
04E0: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
04E1: 50 03    MOV   A,0x3              (0111)     mov     A, >LoadConfigTBL_project1_Bank1
04E3: 57 70    MOV   X,0x70             (0112)     mov     X, <LoadConfigTBL_project1_Bank1
04E5: 7C 04 EC LCALL 0x04EC             (0113)     lcall   LoadConfig              ; Load the bank 1 values
04E8: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
04EA: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
04EB: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
04EC: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
04EE: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
04EF: 08       PUSH  A                  (0143)     push    A
04F0: 4F       MOV   X,SP               (0144)     mov     X, SP
04F1: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
04F4: D0 04    JNC   0x04F9             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
04F6: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
04F9: 18       POP   A                  (0149)     pop     A
04FA: 20       POP   X                  (0150)     pop     X
04FB: 70 EF    AND   F,0xEF             
04FD: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0500: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0501: 08       PUSH  A                  (0156)     push    A
0502: 28       ROMX                     (0157)     romx                            ; Load register address from table
0503: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0505: A0 1F    JZ    0x0525             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0507: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
0508: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
050B: A0 03    JZ    0x050F             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
050D: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
050F: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0511: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0512: 20       POP   X                  (0167)     pop     X
0513: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0514: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0516: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0517: 08       PUSH  A                  (0171)     push    A
0518: 28       ROMX                     (0172)     romx                            ; load config data from the table
0519: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
051A: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
051C: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
051E: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
051F: 20       POP   X                  (0177)     pop     X
0520: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0521: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0523: 8F D7    JMP   0x04FB             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0525: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
0527: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\stoptimer.asm                 (0001) ;;*****************************************************************************
0528: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: StopTimer.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "StopTimer.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  StopTimer_EnableInt
                                        (0030) export _StopTimer_EnableInt
                                        (0031) export  StopTimer_DisableInt
                                        (0032) export _StopTimer_DisableInt
                                        (0033) export  StopTimer_Start
                                        (0034) export _StopTimer_Start
                                        (0035) export  StopTimer_Stop
                                        (0036) export _StopTimer_Stop
                                        (0037) export  StopTimer_WritePeriod
                                        (0038) export _StopTimer_WritePeriod
                                        (0039) export  StopTimer_WriteCompareValue
                                        (0040) export _StopTimer_WriteCompareValue
                                        (0041) export  StopTimer_wReadCompareValue
                                        (0042) export _StopTimer_wReadCompareValue
                                        (0043) export  StopTimer_wReadTimer
                                        (0044) export _StopTimer_wReadTimer
                                        (0045) export  StopTimer_wReadTimerSaveCV
                                        (0046) export _StopTimer_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wStopTimer_ReadCompareValue  ; deprecated
                                        (0051) export _wStopTimer_ReadCompareValue  ; deprecated
                                        (0052) export  wStopTimer_ReadTimer         ; deprecated
                                        (0053) export _wStopTimer_ReadTimer         ; deprecated
                                        (0054) export  wStopTimer_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wStopTimer_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wStopTimer_ReadCounter       ; obsolete
                                        (0058) export _wStopTimer_ReadCounter       ; obsolete
                                        (0059) export  wStopTimer_CaptureCounter    ; obsolete
                                        (0060) export _wStopTimer_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA project1_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: StopTimer_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  StopTimer_EnableInt:
                                        (0098) _StopTimer_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    StopTimer_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
052B: 7F       RET                      (0102)    ret
052C: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: StopTimer_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  StopTimer_DisableInt:
                                        (0126) _StopTimer_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    StopTimer_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
052F: 7F       RET                      (0130)    ret
0530: 43 33 01 OR    REG[0x33],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: StopTimer_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  StopTimer_Start:
                                        (0154) _StopTimer_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    StopTimer_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0533: 7F       RET                      (0158)    ret
0534: 41 33 FE AND   REG[0x33],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: StopTimer_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  StopTimer_Stop:
                                        (0182) _StopTimer_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    StopTimer_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0537: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: StopTimer_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  StopTimer_WritePeriod:
                                        (0211) _StopTimer_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0538: 60 31    MOV   REG[0x31],A        (0213)    mov   reg[StopTimer_PERIOD_LSB_REG], A
053A: 5B       MOV   A,X                (0214)    mov   A, X
053B: 60 35    MOV   REG[0x35],A        (0215)    mov   reg[StopTimer_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
053D: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: StopTimer_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call StopTimer_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  StopTimer_WriteCompareValue:
                                        (0243) _StopTimer_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
053E: 60 32    MOV   REG[0x32],A        (0245)    mov   reg[StopTimer_COMPARE_LSB_REG], A
0540: 5B       MOV   A,X                (0246)    mov   A, X
0541: 60 36    MOV   REG[0x36],A        (0247)    mov   reg[StopTimer_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0543: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: StopTimer_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  StopTimer_wReadCompareValue:
                                        (0272) _StopTimer_wReadCompareValue:
                                        (0273)  wStopTimer_ReadCompareValue:                    ; this name deprecated
                                        (0274) _wStopTimer_ReadCompareValue:                    ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0544: 5D 36    MOV   A,REG[0x36]        (0276)    mov   A, reg[StopTimer_COMPARE_MSB_REG]
0546: 5C       MOV   X,A                (0277)    mov   X, A
0547: 5D 32    MOV   A,REG[0x32]        (0278)    mov   A, reg[StopTimer_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
0549: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: StopTimer_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  StopTimer_wReadTimerSaveCV:
                                        (0321) _StopTimer_wReadTimerSaveCV:
                                        (0322)  wStopTimer_ReadTimerSaveCV:                     ; this name deprecated
                                        (0323) _wStopTimer_ReadTimerSaveCV:                     ; this name deprecated
                                        (0324)  wStopTimer_ReadCounter:                         ; this name deprecated
                                        (0325) _wStopTimer_ReadCounter:                         ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
054A: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
054B: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
054D: 5D 33    MOV   A,REG[0x33]        (0334)    mov   A, reg[StopTimer_CONTROL_LSB_REG]       ; save the Control register
054F: 08       PUSH  A                  (0335)    push  A
0550: 5D 32    MOV   A,REG[0x32]        (0336)    mov   A, reg[StopTimer_COMPARE_LSB_REG]       ; save the Compare register
0552: 08       PUSH  A                  (0337)    push  A
0553: 5D 36    MOV   A,REG[0x36]        (0338)    mov   A, reg[StopTimer_COMPARE_MSB_REG]
0555: 08       PUSH  A                  (0339)    push  A
0556: 5D 30    MOV   A,REG[0x30]        (0340)    mov   A, reg[StopTimer_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
0558: 5D 36    MOV   A,REG[0x36]        (0342)    mov   A, reg[StopTimer_COMPARE_MSB_REG]       ; Now grab DR2 (DR0) and save
055A: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
055C: 5D 32    MOV   A,REG[0x32]        (0344)    mov   A, reg[StopTimer_COMPARE_LSB_REG]
055E: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0560: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0562: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0565: A0 03    JZ    0x0569             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0567: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
0569: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
056B: 70 FE    AND   F,0xFE             
056D: 41 33 FE AND   REG[0x33],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    StopTimer_Stop_M                              ; Disable (stop) the timer
0570: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0571: 60 36    MOV   REG[0x36],A        (0355)    mov   reg[StopTimer_COMPARE_MSB_REG], A
0573: 18       POP   A                  (0356)    pop   A
0574: 60 32    MOV   REG[0x32],A        (0357)    mov   reg[StopTimer_COMPARE_LSB_REG], A
0576: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
0577: 60 33    MOV   REG[0x33],A        (0359)    mov   reg[StopTimer_CONTROL_LSB_REG], A
0579: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
057A: 20       POP   X                  (0361)    pop   X
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
057B: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: StopTimer_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  StopTimer_wReadTimer:
                                        (0397) _StopTimer_wReadTimer:
                                        (0398)  wStopTimer_ReadTimer:                           ; this name deprecated
                                        (0399) _wStopTimer_ReadTimer:                           ; this name deprecated
                                        (0400)  wStopTimer_CaptureCounter:                      ; this name deprecated
                                        (0401) _wStopTimer_CaptureCounter:                      ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
057C: 5D 30    MOV   A,REG[0x30]        (0404)    mov   A, reg[StopTimer_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
057E: 5D 36    MOV   A,REG[0x36]        (0407)    mov   A, reg[StopTimer_COMPARE_MSB_REG]       ; Return DR2 (actually DR0)
0580: 5C       MOV   X,A                (0408)    mov   X, A
0581: 5D 32    MOV   A,REG[0x32]        (0409)    mov   A, reg[StopTimer_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0583: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File StopTimer.asm
FILE: lib\pga_2.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_2.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_2.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_2_Start
                                        (0060) export _PGA_2_Start
                                        (0061) export  PGA_2_SetPower
                                        (0062) export _PGA_2_SetPower
                                        (0063) 
                                        (0064) export  PGA_2_SetGain
                                        (0065) export _PGA_2_SetGain
                                        (0066) 
                                        (0067) export  PGA_2_Stop
                                        (0068) export _PGA_2_Stop
                                        (0069) 
                                        (0070) IF (PGA_2_AGNDBUFAPI)
                                        (0071) export  PGA_2_EnableAGNDBuffer
                                        (0072) export _PGA_2_EnableAGNDBuffer
                                        (0073) export  PGA_2_DisableAGNDBuffer
                                        (0074) export _PGA_2_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_2_Start
                                        (0092) ;  FUNCTION NAME: PGA_2_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_2_Start:
                                        (0111) _PGA_2_Start:
                                        (0112)  PGA_2_SetPower:
                                        (0113) _PGA_2_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0584: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0586: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0587: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0588: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_2_GAIN_CR2]                             ; read power value
058A: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
058C: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
058E: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_2_GAIN_CR2], A                        ; move complete value back to register
0590: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0591: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_2_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_2_SetGain:
                                        (0154) _PGA_2_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0592: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0594: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0595: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0596: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_2_GAIN_CR0]                             ; read mux settings
0598: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
059A: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
059D: B0 0A    JNZ   0x05A8             (0164)    jnz  .SETHIGHGAIN
059F: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_2_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
05A2: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
05A4: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
05A6: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
05A7: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
05A8: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
05AB: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
05AD: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
05AF: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_2_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
05B2: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
05B3: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_2_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_2_Stop:
                                        (0203) _PGA_2_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
05B4: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_2_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
05B7: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_2_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_2_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_2_EnableAGNDBuffer:
                                        (0233) _PGA_2_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_2_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_2_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_2_DisableAGNDBuffer:
                                        (0261) _PGA_2_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_2_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_2.asm
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
05B8: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
05BA: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
05BB: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
05BC: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
05BE: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
05C0: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
05C2: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
05C4: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
05C5: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
05C6: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
05C8: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
05C9: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
05CA: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
05CC: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
05CE: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
05D1: B0 0A    JNZ   0x05DC             (0164)    jnz  .SETHIGHGAIN
05D3: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
05D6: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
05D8: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
05DA: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
05DB: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
05DC: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
05DF: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
05E1: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
05E3: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
05E6: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
05E7: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
05E8: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
05EB: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: lib\mutetimer.asm                 (0001) ;;*****************************************************************************
05EC: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: MuteTimer.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:23:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "MuteTimer.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  MuteTimer_EnableInt
                                        (0030) export _MuteTimer_EnableInt
                                        (0031) export  MuteTimer_DisableInt
                                        (0032) export _MuteTimer_DisableInt
                                        (0033) export  MuteTimer_Start
                                        (0034) export _MuteTimer_Start
                                        (0035) export  MuteTimer_Stop
                                        (0036) export _MuteTimer_Stop
                                        (0037) export  MuteTimer_WritePeriod
                                        (0038) export _MuteTimer_WritePeriod
                                        (0039) export  MuteTimer_WriteCompareValue
                                        (0040) export _MuteTimer_WriteCompareValue
                                        (0041) export  MuteTimer_bReadCompareValue
                                        (0042) export _MuteTimer_bReadCompareValue
                                        (0043) export  MuteTimer_bReadCounter
                                        (0044) export _MuteTimer_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bMuteTimer_ReadCompareValue  ; deprecated
                                        (0049) export _bMuteTimer_ReadCompareValue  ; deprecated
                                        (0050) export  bMuteTimer_ReadCounter       ; deprecated
                                        (0051) export _bMuteTimer_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: MuteTimer_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  MuteTimer_EnableInt:
                                        (0082) _MuteTimer_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    MuteTimer_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
05EF: 7F       RET                      (0086)    ret
05F0: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: MuteTimer_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  MuteTimer_DisableInt:
                                        (0109) _MuteTimer_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    MuteTimer_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
05F3: 7F       RET                      (0113)    ret
05F4: 43 3B 01 OR    REG[0x3B],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: MuteTimer_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  MuteTimer_Start:
                                        (0138) _MuteTimer_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    MuteTimer_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
05F7: 7F       RET                      (0142)    ret
05F8: 41 3B FE AND   REG[0x3B],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: MuteTimer_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  MuteTimer_Stop:
                                        (0166) _MuteTimer_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    MuteTimer_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
05FB: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: MuteTimer_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count register (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  MuteTimer_WritePeriod:
                                        (0196) _MuteTimer_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
05FC: 60 39    MOV   REG[0x39],A        (0198)    mov   reg[MuteTimer_PERIOD_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
05FE: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: MuteTimer_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222)  MuteTimer_WriteCompareValue:
                                        (0223) _MuteTimer_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_1
05FF: 60 3A    MOV   REG[0x3A],A        (0225)    mov   reg[MuteTimer_COMPARE_REG], A
                                        (0226)    RAM_EPILOGUE RAM_USE_CLASS_1
0601: 7F       RET                      (0227)    ret
                                        (0228) 
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: MuteTimer_bReadCompareValue
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the Compare register.
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:    None
                                        (0241) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0242) ;  SIDE EFFECTS: 
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  MuteTimer_bReadCompareValue:
                                        (0250) _MuteTimer_bReadCompareValue:
                                        (0251)  bMuteTimer_ReadCompareValue:                    ; this name deprecated
                                        (0252) _bMuteTimer_ReadCompareValue:                    ; this name deprecated
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_1
0602: 5D 3A    MOV   A,REG[0x3A]        (0254)    mov   A, reg[MuteTimer_COMPARE_REG]
                                        (0255)    RAM_EPILOGUE RAM_USE_CLASS_1
0604: 7F       RET                      (0256)    ret
                                        (0257) 
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) .SECTION
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;  FUNCTION NAME: MuteTimer_bReadCounter
                                        (0264) ;
                                        (0265) ;  DESCRIPTION:
                                        (0266) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0267) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0268) ;     from the Count to the Compare registers by holding the clock low in
                                        (0269) ;     the PSoC block.
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;
                                        (0272) ;  ARGUMENTS: None
                                        (0273) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0274) ;  SIDE EFFECTS:
                                        (0275) ;     1) If running, the user module is stopped momentarily and one or more
                                        (0276) ;        counts may be missed.
                                        (0277) ;     2) The A and X registers may be modified by this or future implementations
                                        (0278) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0279) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0280) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0281) ;        functions.
                                        (0282) ;
                                        (0283)  MuteTimer_bReadCounter:
                                        (0284) _MuteTimer_bReadCounter:
                                        (0285)  bMuteTimer_ReadCounter:                         ; this name deprecated
                                        (0286) _bMuteTimer_ReadCounter:                         ; this name deprecated
                                        (0287) 
                                        (0288)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0289)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                        (0290)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                        (0291)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                        (0292)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                        (0293) 
                                        (0294)    RAM_PROLOGUE RAM_USE_CLASS_2
0605: 4F       MOV   X,SP               (0295)    mov   X, SP                                   ; X <- stack frame pointer
0606: 5D 3A    MOV   A,REG[0x3A]        (0296)    mov   A, reg[MuteTimer_COMPARE_REG]           ; Save the Compare register on the stack
0608: 08       PUSH  A                  (0297)    push  A                                       ;
0609: 5D 3B    MOV   A,REG[0x3B]        (0298)    mov   A, reg[MuteTimer_CONTROL_REG]           ; Save CR0 (running or stopped state)
060B: 08       PUSH  A                  (0299)    push  A                                       ;
060C: 41 3B FE AND   REG[0x3B],0xFE     
060F: 71 10    OR    F,0x10             
                                        (0300)    MuteTimer_Stop_M                              ; Disable (stop) the Counter if running
                                        (0301)    M8C_SetBank1                                  ;
0611: 5D 39    MOV   A,REG[0x39]        (0302)    mov   A, reg[MuteTimer_INPUT_REG]             ; save the clock input setting
0613: 08       PUSH  A                  (0303)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0304)                                                  ;   hold the clock low:
0614: 62 39 00 MOV   REG[0x39],0x0      (0305)    mov   reg[MuteTimer_INPUT_REG], INPUT_REG_NULL
0617: 70 EF    AND   F,0xEF             
                                        (0306)    M8C_SetBank0
                                        (0307)                                                  ; Extract the Count via DR2 register
0619: 5D 38    MOV   A,REG[0x38]        (0308)    mov   A, reg[MuteTimer_COUNTER_REG]           ; DR2 <- DR0
061B: 5D 3A    MOV   A,REG[0x3A]        (0309)    mov   A, reg[MuteTimer_COMPARE_REG]           ; Stash the Count on the stack
061D: 08       PUSH  A                  (0310)    push  A                                       ;  -stack frame is now 3 bytes
061E: 52 00    MOV   A,[X+0]            (0311)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0620: 60 3A    MOV   REG[0x3A],A        (0312)    mov   reg[MuteTimer_COMPARE_REG], A
0622: 71 10    OR    F,0x10             
                                        (0313)    M8C_SetBank1                                  ; Restore the counter operation:
0624: 52 02    MOV   A,[X+2]            (0314)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0626: 60 39    MOV   REG[0x39],A        (0315)    mov   reg[MuteTimer_INPUT_REG], A             ;
0628: 70 EF    AND   F,0xEF             
                                        (0316)    M8C_SetBank0                                  ;   then re-enable (start) the counter
062A: 52 01    MOV   A,[X+1]            (0317)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
062C: 60 3B    MOV   REG[0x3B],A        (0318)    mov   reg[MuteTimer_CONTROL_REG], A           ;     this function was first called
062E: 18       POP   A                  (0319)    pop   A                                       ; Setup the return value
062F: 38 FD    ADD   SP,0xFD            (0320)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_2
0631: 7F       RET                      (0322)    ret
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) ; End of File MuteTimer.asm
FILE: lib\lpf2_1.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: LPF2_1.asm
                                        (0004) ;;   Version: 4.10, Updated on 2015/3/4 at 22:26:40
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Asm source for 2 Pole Switched Capacitor Low Pass Filter
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "LPF2_1.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  LPF2_1_Start
                                        (0031) export _LPF2_1_Start
                                        (0032) export  LPF2_1_SetPower
                                        (0033) export _LPF2_1_SetPower
                                        (0034) 
                                        (0035) export  LPF2_1_SetC1
                                        (0036) export _LPF2_1_SetC1
                                        (0037) export  LPF2_1_SetC2
                                        (0038) export _LPF2_1_SetC2
                                        (0039) export  LPF2_1_SetC3
                                        (0040) export _LPF2_1_SetC3
                                        (0041) export  LPF2_1_SetC4
                                        (0042) export _LPF2_1_SetC4
                                        (0043) export  LPF2_1_SetCA
                                        (0044) export _LPF2_1_SetCA
                                        (0045) export  LPF2_1_SetCB
                                        (0046) export _LPF2_1_SetCB
                                        (0047) export  LPF2_1_SetPolarity
                                        (0048) export _LPF2_1_SetPolarity
                                        (0049) 
                                        (0050) export  LPF2_1_Stop
                                        (0051) export _LPF2_1_Stop
                                        (0052) 
                                        (0053) 
                                        (0054) ;-----------------------------------------------
                                        (0055) ; Variable Allocation
                                        (0056) ;-----------------------------------------------
                                        (0057) AREA bss (RAM,REL)
                                        (0058) 
                                        (0059) 
                                        (0060) 
                                        (0061) ;-----------------------------------------------
                                        (0062) ;  EQUATES
                                        (0063) ;-----------------------------------------------
                                        (0064) bPOWERMASK:          equ   03h         ; Power field mask for CR3
                                        (0065) LPF_CNUMMASK:        equ   1fh         ; Mask for A, B & C Caps
                                        (0066) LPF_CFBMASK:         equ   80h         ; Mask for Feedback Caps
                                        (0067) LPF_POLARITYMASK:    equ   20h         ; Mask of Asign field for CR0
                                        (0068) 
                                        (0069) LPF2_1_IfCond:          equ LPF2_1_AMD_MSK & 0x01
                                        (0070) 
                                        (0071) IF (LPF2_1_AMD_VAL)
                                        (0072)  IF (LPF2_1_IfCond)
                                        (0073)   LPF2_1_AMD:           equ LPF2_1_AMD_VAL
                                        (0074)  ELSE
                                        (0075)   LPF2_1_AMD:           equ LPF2_1_AMD_VAL << 4
                                        (0076)  ENDIF
                                        (0077) ENDIF
                                        (0078) 
                                        (0079) AREA UserModules (ROM,REL)
                                        (0080) ;-----------------------------------------------------------------------------
                                        (0081) ;  FUNCTION NAME: LPF2_1_Start
                                        (0082) ;
                                        (0083) ;  DESCRIPTION: Applies power setting to the module's PSoC blocks
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) ;  ARGUMENTS:    A register contains the power setting (constant)
                                        (0088) ;  RETURNS:      Nothing
                                        (0089) ;  SIDE EFFECTS: 
                                        (0090) ;    The A and X registers may be modified by this or future implementations
                                        (0091) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0092) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0093) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0094) ;    functions.
                                        (0095) ;
                                        (0096) 
                                        (0097)  LPF2_1_Start:
                                        (0098) _LPF2_1_Start:
                                        (0099)  LPF2_1_SetPower:
                                        (0100) _LPF2_1_SetPower:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_2
0632: 21 03    AND   A,0x3              (0102)     and A, bPOWERMASK                        ; mask A to protect unchanged bits
0634: 4F       MOV   X,SP               (0103)     mov X, SP                                ; define temp store location
                                        (0104) 
0635: 08       PUSH  A                  (0105)     push A                                   ; put power value in temp store
                                        (0106) 
                                        (0107) IF (LPF2_1_AMD_VAL)
                                        (0108)    M8C_SetBank1
                                        (0109)    mov   A, reg[LPF2_1_AMD_REG]                  ; read modulator register
                                        (0110)    and   A, ~LPF2_1_AMD_MSK                      ; clear modulator bittfield in A
                                        (0111)    or    A, LPF2_1_AMD                           ; combine modulator value with balance of register
                                        (0112)    mov   reg[LPF2_1_AMD_REG], A                  ; move complete value back to register
                                        (0113)    M8C_SetBank0
                                        (0114) ENDIF
                                        (0115) 
0636: 5D 83    MOV   A,REG[0x83]        (0116)     mov A, reg[LPF2_1_FLIN_CR3]    ; read power value
0638: 21 FC    AND   A,0xFC             (0117)     and A, ~bPOWERMASK                       ; clear power bits in A
063A: 2B 00    OR    A,[X+0]            (0118)     or  A, [X]                               ; combine power value with balance of reg.
063C: 60 83    MOV   REG[0x83],A        (0119)     mov reg[LPF2_1_FLIN_CR3], A    ; move complete value back to register
                                        (0120) 
063E: 5D 87    MOV   A,REG[0x87]        (0121)     mov A, reg[LPF2_1_FLOUT_CR3]   ; read power value
0640: 21 FC    AND   A,0xFC             (0122)     and A, ~bPOWERMASK                       ; clear power bits in A
0642: 2B 00    OR    A,[X+0]            (0123)     or  A, [X]                               ; combine power value with balance of reg.
0644: 60 87    MOV   REG[0x87],A        (0124)     mov reg[LPF2_1_FLOUT_CR3], A   ; move complete value back to register
0646: 18       POP   A                  (0125)     pop A
                                        (0126)     RAM_EPILOGUE RAM_USE_CLASS_2
0647: 7F       RET                      (0127)     ret
                                        (0128) 
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: LPF2_1_SetCn, n=1..4
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0133) ;                 of the capacitors (defined in LPF2_1.inc)
                                        (0134) ;
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0138) ;  RETURNS:
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) ;
                                        (0146) 
                                        (0147)  LPF2_1_SetC1:
                                        (0148) _LPF2_1_SetC1:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
0648: 21 1F    AND   A,0x1F             (0150)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
064A: 4F       MOV   X,SP               (0151)     mov X, SP                                ; define temp store location
064B: 08       PUSH  A                  (0152)     push A                                   ; put C1 value in temp store
064C: 5D 80    MOV   A,REG[0x80]        (0153)     mov A, reg[LPF2_1_FILT_C1_REG] ; read current C1
064E: 21 E0    AND   A,0xE0             (0154)     and A, ~LPF_CNUMMASK                     ; clear C1 bits in A
0650: 2B 00    OR    A,[X+0]            (0155)     or  A, [X]                               ; combine C1 value with balance of reg.
0652: 60 80    MOV   REG[0x80],A        (0156)     mov reg[LPF2_1_FILT_C1_REG], A ; move complete value back to register
0654: 18       POP   A                  (0157)     pop  A
                                        (0158)     RAM_EPILOGUE RAM_USE_CLASS_2
0655: 7F       RET                      (0159)     ret
                                        (0160) 
                                        (0161)  LPF2_1_SetC2:
                                        (0162) _LPF2_1_SetC2:
                                        (0163)     RAM_PROLOGUE RAM_USE_CLASS_2
0656: 21 1F    AND   A,0x1F             (0164)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0658: 4F       MOV   X,SP               (0165)     mov X, SP                                ; define temp store location
0659: 08       PUSH  A                  (0166)     push A                                   ; put C2 value in temp store
065A: 5D 81    MOV   A,REG[0x81]        (0167)     mov A, reg[LPF2_1_FILT_C2_REG] ; read current C2
065C: 21 E0    AND   A,0xE0             (0168)     and A, ~LPF_CNUMMASK                     ; clear C2 bits in A
065E: 2B 00    OR    A,[X+0]            (0169)     or  A, [X]                               ; combine C2 value with balance of reg.
0660: 60 81    MOV   REG[0x81],A        (0170)     mov reg[LPF2_1_FILT_C2_REG], A ; move complete value back to register
0662: 18       POP   A                  (0171)     pop A
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0663: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175)  LPF2_1_SetC3:
                                        (0176) _LPF2_1_SetC3:
                                        (0177)     RAM_PROLOGUE RAM_USE_CLASS_2
0664: 21 1F    AND   A,0x1F             (0178)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0666: 4F       MOV   X,SP               (0179)     mov X, SP                                ; define temp store location
0667: 08       PUSH  A                  (0180)     push A                                   ; put C3 value in temp store
0668: 5D 84    MOV   A,REG[0x84]        (0181)     mov A, reg[LPF2_1_FILT_C3_REG] ; read current C3
066A: 21 E0    AND   A,0xE0             (0182)     and A, ~LPF_CNUMMASK                     ; clear C3 bits in A
066C: 2B 00    OR    A,[X+0]            (0183)     or  A, [X]                               ; combine C3 value with balance of reg.
066E: 60 84    MOV   REG[0x84],A        (0184)     mov reg[LPF2_1_FILT_C3_REG], A ; move complete value back to register
0670: 18       POP   A                  (0185)     pop A
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
0671: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189)  LPF2_1_SetC4:
                                        (0190) _LPF2_1_SetC4:
                                        (0191)     RAM_PROLOGUE RAM_USE_CLASS_2
0672: 21 1F    AND   A,0x1F             (0192)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0674: 4F       MOV   X,SP               (0193)     mov X, SP                                ; define temp store location
0675: 08       PUSH  A                  (0194)     push A                                   ; put C4 value in temp store
0676: 5D 86    MOV   A,REG[0x86]        (0195)     mov A, reg[LPF2_1_FILT_C4_REG] ; read current C4
0678: 21 E0    AND   A,0xE0             (0196)     and A, ~LPF_CNUMMASK                     ; clear C4 bits in A
067A: 2B 00    OR    A,[X+0]            (0197)     or  A, [X]                               ; combine C4 value with balance of reg.
067C: 60 86    MOV   REG[0x86],A        (0198)     mov reg[LPF2_1_FILT_C4_REG], A ; move complete value back to register
067E: 18       POP   A                  (0199)     pop A
                                        (0200)     RAM_EPILOGUE RAM_USE_CLASS_2
067F: 7F       RET                      (0201)     ret
                                        (0202) 
                                        (0203) 
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: LPF2_1_SetCA
                                        (0206) ;            and  LPF2_1_SetCB
                                        (0207) ;
                                        (0208) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0209) ;                 of the op-amp feedback capacitors (see LPF2_1.inc)
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:    The A register contains one of the LPF2_1_FEEDBACK
                                        (0213) ;                  constants defined in LPF2_1.inc
                                        (0214) ;  RETURNS:      Nothing.
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222) 
                                        (0223)  LPF2_1_SetCA:
                                        (0224) _LPF2_1_SetCA:
                                        (0225)     RAM_PROLOGUE RAM_USE_CLASS_1
0680: 39 01    CMP   A,0x1              (0226)     cmp   A, LPF2_1_FEEDBACK_32    ; Change Feedback to 32 units?
0682: A0 05    JZ    0x0688             (0227)     jz    .SetCAto32                         ;    Yes, go make it so
                                        (0228)                                              ;     No, clear it to 16 units...
0684: 41 80 7F AND   REG[0x80],0x7F     (0229)     and   reg[LPF2_1_FILT_CA_REG], ~LPF_CFBMASK
                                        (0230)     RAM_EPILOGUE RAM_USE_CLASS_1 
0687: 7F       RET                      (0231)     ret
                                        (0232) .SetCAto32:
0688: 43 80 80 OR    REG[0x80],0x80     (0233)     or    reg[LPF2_1_FILT_CA_REG],  LPF_CFBMASK
                                        (0234)     RAM_EPILOGUE RAM_USE_CLASS_1
068B: 7F       RET                      (0235)     ret
                                        (0236) 
                                        (0237) 
                                        (0238)  LPF2_1_SetCB:
                                        (0239) _LPF2_1_SetCB:
                                        (0240)     RAM_PROLOGUE RAM_USE_CLASS_1
068C: 39 01    CMP   A,0x1              (0241)     cmp   A, LPF2_1_FEEDBACK_32    ; Change Feedback to 32 units?
068E: A0 05    JZ    0x0694             (0242)     jz    .SetCAto32                         ;    Yes, go make it so
                                        (0243)                                              ;     No, clear it to 16 units...
0690: 41 84 7F AND   REG[0x84],0x7F     (0244)     and   reg[LPF2_1_FILT_CB_REG], ~LPF_CFBMASK
                                        (0245)     RAM_EPILOGUE RAM_USE_CLASS_1
0693: 7F       RET                      (0246)     ret
                                        (0247) .SetCAto32:
0694: 43 84 80 OR    REG[0x84],0x80     (0248)     or    reg[LPF2_1_FILT_CB_REG],  LPF_CFBMASK
                                        (0249)     RAM_EPILOGUE RAM_USE_CLASS_1
0697: 7F       RET                      (0250)     ret
                                        (0251) 
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;  FUNCTION NAME: LPF2_1_SetPolarity
                                        (0254) ;
                                        (0255) ;  DESCRIPTION:   Alters the output polarity of the data by altering the
                                        (0256) ;                 input polarity at FLIN
                                        (0257) ;-----------------------------------------------------------------------------
                                        (0258) ;
                                        (0259) ;  ARGUMENTS:    The A register contains one of the LPF2_1_POLARITY
                                        (0260) ;                  constants defined in LPF2_1.inc
                                        (0261) ;  RETURNS:      Nothing.
                                        (0262) ;  SIDE EFFECTS: 
                                        (0263) ;    The A and X registers may be modified by this or future implementations
                                        (0264) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0265) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0266) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0267) ;    functions.
                                        (0268) ;
                                        (0269) 
                                        (0270)  LPF2_1_SetPolarity:
                                        (0271) _LPF2_1_SetPolarity:
                                        (0272)     RAM_PROLOGUE RAM_USE_CLASS_1
0698: 39 01    CMP   A,0x1              (0273)     cmp   A, LPF2_1_POLARITY_NON_INVERTING ; Should the output be non-inverting?
069A: A0 05    JZ    0x06A0             (0274)     jz    .SetPoltoNonInv                         ;    Yes, go make it so
                                        (0275)                                                   ;    No, then set it to Inverting...
069C: 43 80 20 OR    REG[0x80],0x20     (0276)     or    reg[LPF2_1_FLIN_CR0], LPF_POLARITYMASK
                                        (0277)     RAM_EPILOGUE RAM_USE_CLASS_1
069F: 7F       RET                      (0278)     ret
                                        (0279) .SetPoltoNonInv:
06A0: 41 80 DF AND   REG[0x80],0xDF     (0280)     and   reg[LPF2_1_FLIN_CR0], ~LPF_POLARITYMASK
                                        (0281)     RAM_EPILOGUE RAM_USE_CLASS_1
06A3: 7F       RET                      (0282)     ret
                                        (0283) 
                                        (0284) ;-----------------------------------------------------------------------------
                                        (0285) ;  FUNCTION NAME: LPF2_1_Stop
                                        (0286) ;
                                        (0287) ;  DESCRIPTION: Cuts power to the user module.
                                        (0288) ;
                                        (0289) ;-----------------------------------------------------------------------------
                                        (0290) ;
                                        (0291) ;  ARGUMENTS:     None
                                        (0292) ;  RETURNS:       Nothing
                                        (0293) ;  SIDE EFFECTS: 
                                        (0294) ;    The A and X registers may be modified by this or future implementations
                                        (0295) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0296) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0297) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0298) ;    functions.
                                        (0299) ;
                                        (0300)  LPF2_1_Stop:
                                        (0301) _LPF2_1_Stop:
                                        (0302) 
                                        (0303)     RAM_PROLOGUE RAM_USE_CLASS_1
06A4: 41 83 FC AND   REG[0x83],0xFC     (0304)     and reg[LPF2_1_FLIN_CR3],  ~bPOWERMASK
06A7: 41 87 FC AND   REG[0x87],0xFC     (0305)     and reg[LPF2_1_FLOUT_CR3], ~bPOWERMASK
                                        (0306)     RAM_EPILOGUE RAM_USE_CLASS_1
06AA: 7F       RET                      (0307)     ret
                                        (0308) 
                                        (0309) 
                                        (0310) ; End of File LPF2_1.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
06AB: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
06AC: 10       PUSH  X                  (0209)     push  X
06AD: 28       ROMX                     (0210)     romx                               ; Get character from ROM
06AE: B0 04    JNZ   0x06B3             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
06B0: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
06B1: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
06B2: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
06B3: 90 3C    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
06B5: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
06B6: 18       POP   A                  (0220)     pop   A
06B7: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
06B8: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
06BA: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
06BB: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
06CD: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
06CE: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
06CF: 67       ASR   A                  (0262)     asr   A
06D0: 67       ASR   A                  (0263)     asr   A
06D1: 67       ASR   A                  (0264)     asr   A
06D2: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
06D4: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
06D6: 90 19    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
06D8: 18       POP   A                  (0268)     pop   A                            ; Restore value
06D9: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
06DB: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
06DD: 90 12    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
06DF: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
06E0: 4B       SWAP  A,X                (0305)     swap  A,X
06E1: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
06E3: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
06E4: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
06E6: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
06E7: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
06E9: A0 06    JZ    0x06F0             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
06EB: 90 04    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
06ED: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
06EE: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
06F0: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
06F1: 90 5F    CALL  0x0752             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
06F3: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
06F4: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
06F5: 67       ASR   A                  (0390)     asr   A
06F6: 67       ASR   A                  (0391)     asr   A
06F7: 67       ASR   A                  (0392)     asr   A
06F8: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
06FA: 90 38    CALL  0x0734             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
06FC: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
06FD: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
06FF: 40       NOP                      (0397)     nop
0700: 40       NOP                      (0398)     nop
0701: 40       NOP                      (0399)     nop
0702: 90 30    CALL  0x0734             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0704: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0705: 90 4B    CALL  0x0752             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0707: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0708: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0709: 67       ASR   A                  (0436)     asr   A
070A: 67       ASR   A                  (0437)     asr   A
070B: 67       ASR   A                  (0438)     asr   A
070C: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
070E: 90 09    CALL  0x0719             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0710: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0711: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0713: 40       NOP                      (0443)     nop
0714: 40       NOP                      (0444)     nop
0715: 40       NOP                      (0445)     nop
0716: 90 01    CALL  0x0719             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0718: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0719: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
071A: 26 38 80 AND   [accuracy_transitions],0x80(0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
071D: 51 38    MOV   A,[accuracy_transitions](0480)     mov   A,[Port_2_Data_SHADE]
071F: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0721: 18       POP   A                  (0483)     pop   A
0722: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0724: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0726: 2A 38    OR    A,[accuracy_transitions](0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0728: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
072A: 53 38    MOV   [accuracy_transitions],A(0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
072C: 40       NOP                      (0489)     nop
072D: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
072F: 53 38    MOV   [accuracy_transitions],A(0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0731: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0733: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0734: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0735: 26 38 80 AND   [accuracy_transitions],0x80(0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0738: 2E 38 20 OR    [accuracy_transitions],0x20(0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
073B: 51 38    MOV   A,[accuracy_transitions](0527)     mov   A,[Port_2_Data_SHADE]
073D: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
073F: 18       POP   A                  (0530)     pop   A
0740: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0742: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0744: 2A 38    OR    A,[accuracy_transitions](0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0746: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0748: 53 38    MOV   [accuracy_transitions],A(0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
074A: 40       NOP                      (0536)     NOP
074B: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
074D: 53 38    MOV   [accuracy_transitions],A(0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
074F: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0751: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0752: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0753: 26 38 80 AND   [accuracy_transitions],0x80(0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0756: 51 38    MOV   A,[accuracy_transitions](0574)     mov   A,[Port_2_Data_SHADE]
0758: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
075A: 26 39 F0 AND   [accuracy_transitions+1],0xF0(0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
075D: 51 39    MOV   A,[accuracy_transitions+1](0578)     mov   A,[Port_2_DriveMode_0_SHADE]
075F: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0761: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0763: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0765: 2E 38 40 OR    [accuracy_transitions],0x40(0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0768: 51 38    MOV   A,[accuracy_transitions](0584)     mov   A,[Port_2_Data_SHADE]
076A: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
076C: 40       NOP                      (0586)     NOP
                                        (0587) 
076D: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
076E: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0770: 2E 38 50 OR    [accuracy_transitions],0x50(0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0773: 51 38    MOV   A,[accuracy_transitions](0593)     mov   A,[Port_2_Data_SHADE]
0775: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0777: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0778: 40       NOP                      (0597)     nop
0779: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
077B: 08       PUSH  A                  (0610)     push  A
077C: 26 38 C0 AND   [accuracy_transitions],0xC0(0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
077F: 51 38    MOV   A,[accuracy_transitions](0612)     mov   A,[Port_2_Data_SHADE]
0781: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0783: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0784: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0785: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0786: 2E 38 50 OR    [accuracy_transitions],0x50(0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0789: 51 38    MOV   A,[accuracy_transitions](0620)     mov   A,[Port_2_Data_SHADE]
078B: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
078D: 40       NOP                      (0623)     nop
078E: 40       NOP                      (0624)     nop
                                        (0625) 
078F: 26 38 C0 AND   [accuracy_transitions],0xC0(0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0792: 51 38    MOV   A,[accuracy_transitions](0627)     mov   A,[Port_2_Data_SHADE]
0794: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0796: 18       POP   A                  (0630)     pop   A
0797: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0799: A0 04    JZ    0x079E             (0633)     jz    .UNLOCK
079B: 79       DEC   X                  (0634)     dec   X
079C: BF D3    JNZ   0x0770             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
079E: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
079F: 2E 39 7F OR    [accuracy_transitions+1],0x7F(0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
07A2: 51 39    MOV   A,[accuracy_transitions+1](0640)     mov   A,[Port_2_DriveMode_0_SHADE]
07A4: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
07A6: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
07A8: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
07AA: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
07AB: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
07AC: 26 39 80 AND   [accuracy_transitions+1],0x80(0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
07AF: 2E 39 7F OR    [accuracy_transitions+1],0x7F(0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
07B2: 26 3A 80 AND   [accuracy_transitions+2],0x80(0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
07B5: 51 39    MOV   A,[accuracy_transitions+1](0689)     mov   A,[Port_2_DriveMode_0_SHADE]
07B7: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
07B9: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
07BB: 51 3A    MOV   A,[accuracy_transitions+2](0692)     mov   A,[Port_2_DriveMode_1_SHADE]
07BD: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
07BF: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
07C1: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
07C3: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
07C5: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
07C7: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
07C9: 50 03    MOV   A,0x3              (0701)     mov   A,03h
07CB: 9F 4C    CALL  0x0719             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
07CD: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
07CF: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
07D1: 50 03    MOV   A,0x3              (0707)     mov   A,03h
07D3: 9F 44    CALL  0x0719             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
07D5: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
07D7: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
07D9: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
07DB: 50 03    MOV   A,0x3              (0714)     mov   A,03h
07DD: 9F 3A    CALL  0x0719             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
07DF: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07E1: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
07E3: 50 02    MOV   A,0x2              (0720)     mov   A,02h
07E5: 9F 32    CALL  0x0719             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
07E7: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07E9: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
07EB: 50 08    MOV   A,0x8              (0726)     mov   A,08h
07ED: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
07EF: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07F1: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
07F3: 50 01    MOV   A,0x1              (0731)     mov   A,01h
07F5: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
07F7: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07F9: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
07FB: 50 06    MOV   A,0x6              (0736)     mov   A,06h
07FD: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
07FF: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0801: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0803: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0805: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0807: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0809: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
080B: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
080D: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
080F: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0811: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0813: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0815: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0817: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
081C: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
081E: 10       PUSH  X                  (0791)     push  X                            ; Store COL
081F: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0821: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0822: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0824: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0825: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0827: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0828: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
082A: 78       DEC   A                  (0828)     dec   A
082B: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
082D: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0836: 08       PUSH  A                  (0871)     push  A
0837: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0839: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
083B: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
083D: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
083F: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0841: D0 06    JNC   0x0848             (0877)     jnc   .Delay50u_End
0843: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0845: 78       DEC   A                  (0880)     dec   A                              ; [4]
0846: BF FE    JNZ   0x0845             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0848: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0849: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\dualadc_1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   DUALADC_1INT.asm
                                        (0004) ;;  Version: 2.30, Updated on 2015/3/4 at 22:26:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC Interrupt Service Routines.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "DUALADC_1.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export _DUALADC_1_CNT1_ISR
                                        (0022) export _DUALADC_1_CNT2_ISR
                                        (0023) export _DUALADC_1_PWM16_ISR
                                        (0024) 
                                        (0025) export  DUALADC_1_cCounter1U
                                        (0026) export  DUALADC_1_cCounter2U
                                        (0027) export _DUALADC_1_iResult1
                                        (0028) export  DUALADC_1_iResult1
                                        (0029) export _DUALADC_1_iResult2
                                        (0030) export  DUALADC_1_iResult2
                                        (0031) export _DUALADC_1_bfStatus
                                        (0032) export  DUALADC_1_bfStatus
                                        (0033) export  DUALADC_1_bSampC
                                        (0034) 
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM, REL, CON)
                                        (0040) 
                                        (0041)  DUALADC_1_cCounter1U:     BLK   1  ;The Upper byte of the Counter
                                        (0042)  DUALADC_1_cCounter2U:     BLK   1  ;The Upper byte of the Counter
                                        (0043) _DUALADC_1_iResult1:
                                        (0044)  DUALADC_1_iResult1:       BLK   2  ;A/D value
                                        (0045) _DUALADC_1_iResult2:
                                        (0046)  DUALADC_1_iResult2:       BLK   2  ;A/D value
                                        (0047) _DUALADC_1_bfStatus:
                                        (0048)  DUALADC_1_bfStatus:       BLK   1  ;Data Valid Flag
                                        (0049)  DUALADC_1_bSampC:         BLK   1  ;# of times to run A/D
                                        (0050) 
                                        (0051) 
                                        (0052) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0053) ;---------------------------------------------------
                                        (0054) ; Insert your custom declarations below this banner
                                        (0055) ;---------------------------------------------------
                                        (0056) 
                                        (0057) ;------------------------
                                        (0058) ; Includes
                                        (0059) ;------------------------
                                        (0060) 
                                        (0061) 	
                                        (0062) ;------------------------
                                        (0063) ;  Constant Definitions
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 
                                        (0072) ;---------------------------------------------------
                                        (0073) ; Insert your custom declarations above this banner
                                        (0074) ;---------------------------------------------------
                                        (0075) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0076) 
                                        (0077) 
                                        (0078) ;-----------------------------------------------
                                        (0079) ;  EQUATES and TABLES
                                        (0080) ;-----------------------------------------------
                                        (0081) ; Constant Definitions
                                        (0082) LowByte:   equ 1
                                        (0083) HighByte:  equ 0
                                        (0084) 
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) 
                                        (0088) 
                                        (0089) .LITERAL
                                        (0090) DUALADC_1MaxNegX4Table:
                                        (0091) ; Bits  7    8    9   10   11   12   13
                                        (0092)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0093) 
                                        (0094) DUALADC_1MaxPosX4Table:
                                        (0095) IF (DUALADC_1_DATA_FORMAT)
                                        (0096) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0097)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0098) ELSE
                                        (0099) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0100)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0101) 
                                        (0102) ENDIF
                                        (0103) .ENDLITERAL
                                        (0104) 
                                        (0105) 
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: _DUALADC_1_CNT1_ISR (Counter8 Interrupt)
                                        (0108) ;
                                        (0109) ;
                                        (0110) ;  DESCRIPTION:
                                        (0111) ;    Increment the upper (software) half on the counter whenever the
                                        (0112) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0113) ;    should start out at the most negative value (0xFF).
                                        (0114) ;
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;
                                        (0117) _DUALADC_1_CNT1_ISR:
0858: 76 3B    INC   [accuracy_transitions+3](0118)    inc [DUALADC_1_cCounter1U]
                                        (0119)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0120)    ;---------------------------------------------------
                                        (0121)    ; Insert your custom code below this banner
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ;   NOTE: interrupt service routines must preserve
                                        (0124)    ;   the values of the A and X CPU registers.
                                        (0125) 
                                        (0126)    ;---------------------------------------------------
                                        (0127)    ; Insert your custom code above this banner
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ;@PSoC_UserCode_END@ (Do not change this line.)
085A: 7E       RETI                     (0130)    reti
                                        (0131) 
                                        (0132) 
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;  FUNCTION NAME: _DUALADC_1_CNT2_ISR (Counter8 Interrupt)
                                        (0135) ;
                                        (0136) ;
                                        (0137) ;  DESCRIPTION:
                                        (0138) ;  Increment the upper (software) half on the counter whenever the
                                        (0139) ;  lower (hardware) half of the counter underflows.  This counter
                                        (0140) ;  should start out at the most negative value (0xFF).
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) _DUALADC_1_CNT2_ISR:
085B: 76 3C    INC   [accuracy_transitions+4](0145)    inc [DUALADC_1_cCounter2U]
                                        (0146)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0147)    ;---------------------------------------------------
                                        (0148)    ; Insert your custom code below this banner
                                        (0149)    ;---------------------------------------------------
                                        (0150)    ;   NOTE: interrupt service routines must preserve
                                        (0151)    ;   the values of the A and X CPU registers.
                                        (0152) 
                                        (0153)    ;---------------------------------------------------
                                        (0154)    ; Insert your custom code above this banner
                                        (0155)    ;---------------------------------------------------
                                        (0156)    ;@PSoC_UserCode_END@ (Do not change this line.)
085D: 7E       RETI                     (0157)    reti
                                        (0158) 
                                        (0159) 
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) ;  FUNCTION NAME: _DUALADC_1_PWM16_ISR  (PWM16 Interrupt)
                                        (0162) ;
                                        (0163) ;  DESCRIPTION:
                                        (0164) ;  This ISR is called when the ADC has completed and integrate cycle.
                                        (0165) ;  The ADC value is calculated and stored in a global location before
                                        (0166) ;  the end of the ISR.
                                        (0167) ;
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) _DUALADC_1_PWM16_ISR:
085E: 41 23 FE AND   REG[0x23],0xFE     (0171)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE  ; Disable Counter
0861: 41 2F FE AND   REG[0x2F],0xFE     (0172)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE  ; Disable Counter
                                        (0173) IF DUALADC_1_NoAZ
0864: 43 92 20 OR    REG[0x92],0x20     (0174)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero     ; Put Integrator in AutoZero
0867: 43 9A 20 OR    REG[0x9A],0x20     (0175)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero     ; Put Integrator in AutoZero
                                        (0176) ENDIF
086A: 43 93 10 OR    REG[0x93],0x10     (0177)    or   reg[DUALADC_1_bfADC1cr3],DUALADC_1_fFSW0           ; Put Integrator in reset
086D: 43 9B 10 OR    REG[0x9B],0x10     (0178)    or   reg[DUALADC_1_bfADC2cr3],DUALADC_1_fFSW0           ; Put Integrator in reset
0870: 71 01    OR    F,0x1              
                                        (0179) 
                                        (0180)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0181)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0182)    M8C_EnableGInt
0872: 40       NOP                      (0183)    nop                                                     ; Wait a couple cycles
0873: 70 FE    AND   F,0xFE             
                                        (0184)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0875: 08       PUSH  A                  (0185)    push  A                                                 ; Save the Accumulator
                                        (0186) 
                                        (0187) 
                                        (0188)    ; Get ADC1 result
0876: 5D 20    MOV   A,REG[0x20]        (0189)    mov   A,reg[DUALADC_1_bCount1]                          ; Read counter value  (Bogus read puts value in Period register)
0878: 5D 22    MOV   A,REG[0x22]        (0190)    mov   A,reg[DUALADC_1_bCompare1]                        ; Read counter value
087A: 78       DEC   A                  (0191)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
087B: 73       CPL   A                  (0192)    cpl   A                                                 ; Invert the value
087C: D0 03    JNC   0x0880             (0193)    jnc   DUALADC_1_INT_CALCV1                              ; if carry, then inc MSB as well
087E: 76 3B    INC   [accuracy_transitions+3](0194)    inc   [DUALADC_1_cCounter1U]
                                        (0195) DUALADC_1_INT_CALCV1:
0880: 53 3E    MOV   [accuracy_transitions+6],A(0196)    mov   [(DUALADC_1_iResult1 + LowByte)],A                ; Store LSB value
0882: 51 3B    MOV   A,[accuracy_transitions+3](0197)    mov   A, [DUALADC_1_cCounter1U]                         ; Store MSB from temp counter
0884: 53 3D    MOV   [accuracy_transitions+5],A(0198)    mov   [(DUALADC_1_iResult1 + HighByte)],A
                                        (0199) 
                                        (0200)    ; Get ADC2 result
0886: 5D 2C    MOV   A,REG[0x2C]        (0201)    mov   A,reg[DUALADC_1_bCount2]                          ; Read counter value  (Bogus read puts value in Period register)
0888: 5D 2E    MOV   A,REG[0x2E]        (0202)    mov   A,reg[DUALADC_1_bCompare2]                        ; Read counter value
088A: 78       DEC   A                  (0203)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
088B: 73       CPL   A                  (0204)    cpl   A                                                 ; Invert the value
088C: D0 03    JNC   0x0890             (0205)    jnc   DUALADC_1_INT_CALCV2                              ; if carry, then inc MSB as well
088E: 76 3C    INC   [accuracy_transitions+4](0206)    inc   [DUALADC_1_cCounter2U]
                                        (0207) DUALADC_1_INT_CALCV2:
0890: 53 40    MOV   [accuracy_transitions+8],A(0208)    mov   [(DUALADC_1_iResult2 + LowByte)],A                ; Store LSB value
0892: 51 3C    MOV   A,[accuracy_transitions+4](0209)    mov   A, [DUALADC_1_cCounter2U]                         ; Store MSB from temp counter
0894: 53 3F    MOV   [accuracy_transitions+7],A(0210)    mov   [(DUALADC_1_iResult2 + HighByte)],A
                                        (0211) 
                                        (0212)                                                            ; The new value has been stored,
                                        (0213)                                                            ; so get counters ready for next reading first.
0896: 62 21 FF MOV   REG[0x21],0xFF     (0214)    mov   reg[DUALADC_1_bPeriod1], ffh                      ; Initialize counter1 to FF - Set to overflow after 256 counts
0899: 62 2D FF MOV   REG[0x2D],0xFF     (0215)    mov   reg[DUALADC_1_bPeriod2], ffh                      ; Initialize counter2 to FF - Set to overflow after 256 counts
089C: 43 23 01 OR    REG[0x23],0x1      (0216)    or    reg[DUALADC_1_bCounter1_CR0],DUALADC_1_fDBLK_ENABLE  ; Enable Counter1
089F: 43 2F 01 OR    REG[0x2F],0x1      (0217)    or    reg[DUALADC_1_bCounter2_CR0],DUALADC_1_fDBLK_ENABLE  ; Enable Counter2
                                        (0218) 
                                        (0219) 
                                        (0220) IF (DUALADC_1_DATA_FORMAT)                                 ; Only check for Negative numbers if SIGNED result
                                        (0221)    mov   A, [DUALADC_1_bfStatus]                           ; Get Status with Resolution
                                        (0222)    and   A, DUALADC_1_bRES_MASK                            ; Mask of resolution
                                        (0223)    index DUALADC_1MaxNegX4Table                            ; Get Maximum negative value from table
                                        (0224)    mov   [DUALADC_1_cCounter1U], A                         ; Place result back into MSB of counter
                                        (0225)    mov   [DUALADC_1_cCounter2U], A                         ; Place result back into MSB of counter
                                        (0226) ELSE
08A2: 55 3B 00 MOV   [accuracy_transitions+3],0x0(0227)    mov   [DUALADC_1_cCounter1U], 00h                       ; Place result back into MSB of counter
08A5: 55 3C 00 MOV   [accuracy_transitions+4],0x0(0228)    mov   [DUALADC_1_cCounter2U], 00h                       ; Place result back into MSB of counter
                                        (0229) ENDIF
                                        (0230) 
                                        (0231)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0232)    ;---------------------------------------------------
                                        (0233)    ; If the input is muxed with multiple inputs
                                        (0234)    ; this is a good place to change inputs.
                                        (0235)    ; Insert your custom code below this banner
                                        (0236)    ;---------------------------------------------------
                                        (0237)    ;   NOTE: interrupt service routines must preserve
                                        (0238)    ;   the values of the A and X CPU registers. At this
                                        (0239)    ;   point A has been preserved on the stack and will
                                        (0240)    ;   be restored before the return from interrupt.
                                        (0241)    ;   However, if you use the X register, you must
                                        (0242)    ;   preserve its value and restore it here.
                                        (0243) 
                                        (0244) 
                                        (0245)    ;---------------------------------------------------
                                        (0246)    ; Insert your custom code above this banner
                                        (0247)    ;---------------------------------------------------
                                        (0248)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0249) 
08A8: 41 93 EF AND   REG[0x93],0xEF     (0250)    and   reg[DUALADC_1_bfADC1cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
08AB: 41 9B EF AND   REG[0x9B],0xEF     (0251)    and   reg[DUALADC_1_bfADC2cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
                                        (0252) IF DUALADC_1_NoAZ
08AE: 41 92 DF AND   REG[0x92],0xDF     (0253)    and   reg[DUALADC_1_bfADC1cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
08B1: 41 9A DF AND   REG[0x9A],0xDF     (0254)    and   reg[DUALADC_1_bfADC2cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
                                        (0255) ENDIF
                                        (0256) 
                                        (0257) 
                                        (0258)    ;****************************************************************************
                                        (0259)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0260)    ;                          ; if stack space isn't at a premium.
                                        (0261)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0262)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0263)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0264)    ;        successful acquisition of the next byte.
                                        (0265)    ;****************************************************************************
                                        (0266) 
                                        (0267) ; ADC1
                                        (0268) IF (DUALADC_1_DATA_FORMAT)                       ; Only check for Negative numbers if SIGNED result
                                        (0269)                                                  ; Negative Overflow Check
                                        (0270)    tst   [(DUALADC_1_iResult1 + HighByte)],80h
                                        (0271)    jnz   DUALADC_1_NOT_2POVFL1
                                        (0272) 
                                        (0273) ENDIF
                                        (0274)                                                  ; Postive Overflow Check
                                        (0275)                                                  ; Get MSB of Max Positive value x4 + 1
08B4: 51 41    MOV   A,[accuracy_transitions+9](0276)    mov   A,[DUALADC_1_bfStatus]                  ; Get Status with Resolution
08B6: 21 0F    AND   A,0xF              (0277)    and   A,DUALADC_1_bRES_MASK                   ; Mask of resolution normalized to 0
08B8: FF 97    INDEX 0x0851             (0278)    index DUALADC_1MaxPosX4Table                  ; Get Maximum positive value x4 + 1 from table
08BA: 08       PUSH  A                  (0279)    push  A
08BB: 22 3D    AND   A,[accuracy_transitions+5](0280)    and   A, [(DUALADC_1_iResult1 + HighByte)]
08BD: A0 0B    JZ    0x08C9             (0281)    jz    DUALADC_1_NOT_POVFL1
                                        (0282)                                                  ; Positive overflow, fix it - set to Max Positive + 1
08BF: 18       POP   A                  (0283)    pop   A
08C0: 11 01    SUB   A,0x1              (0284)    sub   A, 01h
                                        (0285)                                                  ; Force most positive * 4 into result
08C2: 53 3D    MOV   [accuracy_transitions+5],A(0286)    mov   [(DUALADC_1_iResult1 + HighByte)], A
08C4: 55 3E FF MOV   [accuracy_transitions+6],0xFF(0287)    mov   [(DUALADC_1_iResult1 + LowByte)], ffh
08C7: 80 02    JMP   0x08CA             (0288)    jmp   DUALADC_1_NOT_2POVFL1
                                        (0289) DUALADC_1_NOT_POVFL1:
08C9: 18       POP   A                  (0290)    pop   A
                                        (0291) 
                                        (0292) DUALADC_1_NOT_2POVFL1:
08CA: 68 3D    ASR   [accuracy_transitions+5](0293)    asr   [(DUALADC_1_iResult1 + HighByte)]       ; Shift MSB and LSB right twice to divide by four
08CC: 6E 3E    RRC   [accuracy_transitions+6](0294)    rrc   [(DUALADC_1_iResult1 + LowByte)]        ; Remember digital clock 4 times analog clock
08CE: 68 3D    ASR   [accuracy_transitions+5](0295)    asr   [(DUALADC_1_iResult1 + HighByte)]
08D0: 6E 3E    RRC   [accuracy_transitions+6](0296)    rrc   [(DUALADC_1_iResult1 + LowByte)]
                                        (0297) 
                                        (0298) ; ADC2
                                        (0299) IF (DUALADC_1_DATA_FORMAT)                       ; Only check for Negative numbers if SIGNED result
                                        (0300)                                                  ; Negative Overflow Check
                                        (0301)    tst   [(DUALADC_1_iResult2 + HighByte)],80h
                                        (0302)    jnz   DUALADC_1_NOT_2POVFL2
                                        (0303) 
                                        (0304) ENDIF
                                        (0305)                                                  ; Postive Overflow Check
                                        (0306)                                                  ; Get MSB of Max Positive value x4 + 1
08D2: 51 41    MOV   A,[accuracy_transitions+9](0307)    mov   A,[DUALADC_1_bfStatus]                  ; Get Status with Resolution
08D4: 21 0F    AND   A,0xF              (0308)    and   A,DUALADC_1_bRES_MASK                   ; Mask of resolution normalized to 0
08D6: FF 79    INDEX 0x0851             (0309)    index DUALADC_1MaxPosX4Table                  ; Get Maximum positive value x4 + 1 from table
08D8: 08       PUSH  A                  (0310)    push  A
08D9: 22 3F    AND   A,[accuracy_transitions+7](0311)    and   A, [(DUALADC_1_iResult2 + HighByte)]
08DB: A0 0B    JZ    0x08E7             (0312)    jz    DUALADC_1_NOT_POVFL2
                                        (0313)                                                  ; Positive overflow, fix it - set to Max Positive + 1
08DD: 18       POP   A                  (0314)    pop   A
08DE: 11 01    SUB   A,0x1              (0315)    sub   A, 01h
                                        (0316)                                                  ; Force most positive * 4 into result
08E0: 53 3F    MOV   [accuracy_transitions+7],A(0317)    mov   [(DUALADC_1_iResult2 + HighByte)], A
08E2: 55 40 FF MOV   [accuracy_transitions+8],0xFF(0318)    mov   [(DUALADC_1_iResult2 + LowByte)], ffh
08E5: 80 02    JMP   0x08E8             (0319)    jmp   DUALADC_1_NOT_2POVFL2
                                        (0320) DUALADC_1_NOT_POVFL2:
08E7: 18       POP   A                  (0321)    pop   A
                                        (0322) 
                                        (0323) DUALADC_1_NOT_2POVFL2:
08E8: 68 3F    ASR   [accuracy_transitions+7](0324)    asr   [(DUALADC_1_iResult2 + HighByte)]       ; Shift MSB and LSB right twice to divide by four
08EA: 6E 40    RRC   [accuracy_transitions+8](0325)    rrc   [(DUALADC_1_iResult2 + LowByte)]        ; Remember digital clock 4 times analog clock
08EC: 68 3F    ASR   [accuracy_transitions+7](0326)    asr   [(DUALADC_1_iResult2 + HighByte)]
08EE: 6E 40    RRC   [accuracy_transitions+8](0327)    rrc   [(DUALADC_1_iResult2 + LowByte)]
                                        (0328) 
                                        (0329)    ;**********************************************
                                        (0330)    ; Data is ready at this point.
                                        (0331)    ; If processing Data at Interrupt level - add
                                        (0332)    ;     User Code to handle the data
                                        (0333)    ;**********************************************
                                        (0334)    ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
                                        (0335)    ;---------------------------------------------------
                                        (0336)    ; Insert your custom code below this banner
                                        (0337)    ;---------------------------------------------------
                                        (0338)    ;   NOTE: interrupt service routines must preserve
                                        (0339)    ;   the values of the A and X CPU registers. At this
                                        (0340)    ;   point A has been preserved on the stack and wil
                                        (0341)    ;   be restored later. However, if you use X, be
                                        (0342)    ;   sure to take care of it yourself!
                                        (0343) 
                                        (0344) 
                                        (0345)    ;---------------------------------------------------
                                        (0346)    ; Insert your custom code above this banner
                                        (0347)    ;---------------------------------------------------
                                        (0348)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0349) 
08F0: 18       POP   A                  (0350)    pop   A                                       ; Restore A, not used any more
                                        (0351) 
08F1: 2E 41 10 OR    [accuracy_transitions+9],0x10(0352)    or    [DUALADC_1_bfStatus],DUALADC_1_fDATA_READY  ; Set Data ready bit
                                        (0353) 
08F4: 47 42 FF TST   [accuracy_transitions+10],0xFF(0354)    tst   [DUALADC_1_bSampC], ffh                 ; If sample_counter == 0 -->> continuous data collection
08F7: A0 23    JZ    0x091B             (0355)    jz    DUALADC_1_END_PWM16_ISR
                                        (0356) 
08F9: 7A 42    DEC   [accuracy_transitions+10](0357)    dec   [DUALADC_1_bSampC]                      ; Dec sample counter and check for zero
08FB: B0 1F    JNZ   0x091B             (0358)    jnz   DUALADC_1_END_PWM16_ISR
                                        (0359) 
08FD: 41 27 FE AND   REG[0x27],0xFE     (0360)    and   reg[DUALADC_1_fPWM_LSB_CR0], ~DUALADC_1_fDBLK_ENABLE     ; Disable the PWM
                                        (0361) 
0900: 41 23 FE AND   REG[0x23],0xFE     (0362)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
0903: 41 2F FE AND   REG[0x2F],0xFE     (0363)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
                                        (0364) 
                                        (0365) IF DUALADC_1_NoAZ
0906: 43 92 20 OR    REG[0x92],0x20     (0366)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
0909: 43 9A 20 OR    REG[0x9A],0x20     (0367)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
                                        (0368) ENDIF
                                        (0369) 
090C: 43 93 10 OR    REG[0x93],0x10     (0370)    or    reg[DUALADC_1_bfADC1cr3], DUALADC_1_fFSW0             ; Put Integrator into reset
090F: 43 9B 10 OR    REG[0x9B],0x10     (0371)    or    reg[DUALADC_1_bfADC2cr3], DUALADC_1_fFSW0             ; Put Integrator into reset
                                        (0372) 
0912: 41 E1 FB AND   REG[0xE1],0xFB     (0373)    and   reg[DUALADC_1_bfPWM16_INT_REG], ~DUALADC_1_bfPWM16_Mask      ; Disable interrupts
0915: 41 E1 FE AND   REG[0xE1],0xFE     (0374)    and   reg[DUALADC_1_bfCounter1_INT_REG], ~DUALADC_1_bfCounter1_Mask
0918: 41 E1 F7 AND   REG[0xE1],0xF7     (0375)    and   reg[DUALADC_1_bfCounter2_INT_REG], ~DUALADC_1_bfCounter2_Mask
                                        (0376) 
                                        (0377) DUALADC_1_END_PWM16_ISR:
091B: 7E       RETI                     (0378)    reti
                                        (0379) 
                                        (0380) DUALADC_1_APIINT_END:
FILE: lib\dualadc_1.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  DUALADC_1.asm
                                        (0004) ;;  Version: 2.30, Updated on 2015/3/4 at 22:26:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) include "DUALADC_1.inc"
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) 
                                        (0025) ;-----------------------------------------------
                                        (0026) ;  Global Symbols
                                        (0027) ;-----------------------------------------------
                                        (0028) 
                                        (0029) export  DUALADC_1_Start
                                        (0030) export _DUALADC_1_Start
                                        (0031) export  DUALADC_1_SetPower
                                        (0032) export _DUALADC_1_SetPower
                                        (0033) export  DUALADC_1_Stop
                                        (0034) export _DUALADC_1_Stop
                                        (0035) export  DUALADC_1_GetSamples
                                        (0036) export _DUALADC_1_GetSamples
                                        (0037) export  DUALADC_1_StopAD
                                        (0038) export _DUALADC_1_StopAD
                                        (0039) export  DUALADC_1_fIsData
                                        (0040) export _DUALADC_1_fIsData
                                        (0041) export  DUALADC_1_fIsDataAvailable
                                        (0042) export _DUALADC_1_fIsDataAvailable
                                        (0043) export  DUALADC_1_iGetData1
                                        (0044) export _DUALADC_1_iGetData1
                                        (0045) export  DUALADC_1_iGetData2
                                        (0046) export _DUALADC_1_iGetData2
                                        (0047) export  DUALADC_1_ClearFlag
                                        (0048) export _DUALADC_1_ClearFlag
                                        (0049) export  DUALADC_1_iGetData1ClearFlag
                                        (0050) export _DUALADC_1_iGetData1ClearFlag
                                        (0051) export  DUALADC_1_iGetData2ClearFlag
                                        (0052) export _DUALADC_1_iGetData2ClearFlag
                                        (0053) export  DUALADC_1_SetResolution
                                        (0054) export _DUALADC_1_SetResolution
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  EQUATES
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) ; Calctime parameters
                                        (0061) wCalcTime:     equ   DUALADC_1_bCALCTIME
                                        (0062) 
                                        (0063) ; Constants
                                        (0064) LowByte:       equ 1
                                        (0065) HighByte:      equ 0
                                        (0066) 
                                        (0067) AREA UserModules (ROM, REL)
                                        (0068) .SECTION
                                        (0069) ;-----------------------------------------------------------------------------
                                        (0070) ;  FUNCTION NAME: DUALADC_1_Start
                                        (0071) ;  FUNCTION NAME: DUALADC_1_SetPower
                                        (0072) ;
                                        (0073) ;  DESCRIPTION:
                                        (0074) ;  Applies power setting to the module's analog PSoc block.
                                        (0075) ;
                                        (0076) ;-----------------------------------------------------------------------------
                                        (0077) ;
                                        (0078) ;  ARGUMENTS:
                                        (0079) ;   A  Contains power level setting 0 to 3
                                        (0080) ;
                                        (0081) ;  RETURNS:  none
                                        (0082) ;
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;          
                                        (0090) ;    Currently only the page pointer registers listed below are modified: 
                                        (0091) ;          CUR_PP
                                        (0092) ;
                                        (0093) ;  THEORY of OPERATION or PROCEDURE:
                                        (0094) ;
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096)  DUALADC_1_Start:
                                        (0097) _DUALADC_1_Start:
                                        (0098)  DUALADC_1_SetPower:
                                        (0099) _DUALADC_1_SetPower:
                                        (0100)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0102)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus
                                        (0103) 
091C: 21 03    AND   A,0x3              (0104)    and   A,DUALADC_1_bfPOWERMASK                     ; Mask only the valid power setting bits
091E: 4F       MOV   X,SP               (0105)    mov   X, SP                                       ; Get location of next location on stack
091F: 08       PUSH  A                  (0106)    push  A                                           ; Save power value on temp location
                                        (0107) 
                                        (0108)                                                      ; Set power for ADC1
0920: 5D 93    MOV   A,REG[0x93]        (0109)    mov   A, reg[DUALADC_1_bfADC1cr3]                 ; Get current value of ADC1cr3
0922: 21 FC    AND   A,0xFC             (0110)    and   A, ~DUALADC_1_bfPOWERMASK                   ; Mask off old power value
0924: 2B 00    OR    A,[X+0]            (0111)    or    A, [X]                                      ; OR in new power value
0926: 29 F0    OR    A,0xF0             (0112)    or    A, f0h                                      ; Make sure other register is set correctly
0928: 60 93    MOV   REG[0x93],A        (0113)    mov   reg[DUALADC_1_bfADC1cr3], A                 ; Reload CR with new power value
                                        (0114) 
                                        (0115)                                                      ; Set power for ADC2
092A: 5D 9B    MOV   A,REG[0x9B]        (0116)    mov   A, reg[DUALADC_1_bfADC2cr3]                 ; Get current value of ADC2cr3
092C: 21 FC    AND   A,0xFC             (0117)    and   A, ~DUALADC_1_bfPOWERMASK                   ; Mask off old power value
092E: 2B 00    OR    A,[X+0]            (0118)    or    A, [X]                                      ; OR in new power value
0930: 29 F0    OR    A,0xF0             (0119)    or    A, f0h                                      ; Make sure other register is set correctly
0932: 60 9B    MOV   REG[0x9B],A        (0120)    mov   reg[DUALADC_1_bfADC2cr3], A                 ; Reload CR with new power value
                                        (0121) 
0934: 49 92 01 TST   REG[0x92],0x1      (0122)    tst   reg[DUALADC_1_bfADC1cr2], DUALADC_1_fRES_SET
0937: A0 05    JZ    0x093D             (0123)    jz    .DoNotLoadRes
0939: 50 00    MOV   A,0x0              (0124)    mov   A,DUALADC_1_bNUMBITS - DUALADC_1_bMINRES               ; get and set the resolution
093B: 53 41    MOV   [accuracy_transitions+9],A(0125)    mov   [DUALADC_1_bfStatus], A              ; place it in the status variable
                                        (0126) .DoNotLoadRes:
                                        (0127) 
093D: 18       POP   A                  (0128)    pop   A                                           ; Restore the stack and power value
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0130)    RAM_EPILOGUE RAM_USE_CLASS_4
093E: 7F       RET                      (0131)    ret
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: DUALADC_1_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;  Removes power from the module's analog PSoc blocks, but the digital
                                        (0140) ;  blocks keep on running.
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS: None
                                        (0145) ;
                                        (0146) ;  RETURNS:   NA
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS:
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155)  DUALADC_1_Stop:
                                        (0156) _DUALADC_1_Stop:
                                        (0157)    RAM_PROLOGUE RAM_USE_CLASS_1
093F: 41 93 FC AND   REG[0x93],0xFC     (0158)    and   reg[DUALADC_1_bfADC1cr3], ~DUALADC_1_bfPOWERMASK
0942: 41 9B FC AND   REG[0x9B],0xFC     (0159)    and   reg[DUALADC_1_bfADC2cr3], ~DUALADC_1_bfPOWERMASK
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0945: 7F       RET                      (0161)    ret
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) .SECTION
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;  FUNCTION NAME: DUALADC_1_Get_Samples
                                        (0167) ;
                                        (0168) ;  DESCRIPTION:
                                        (0169) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0170) ;  is set whenever a new data value is available.
                                        (0171) ;
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;
                                        (0174) ;  ARGUMENTS:
                                        (0175) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0176) ;     continuously.  A flag is set whenever a new data values are available.
                                        (0177) ;
                                        (0178) ;  RETURNS:  NA
                                        (0179) ;
                                        (0180) ;  SIDE EFFECTS:
                                        (0181) ;    The A and X registers may be modified by this or future implementations
                                        (0182) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0183) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0184) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0185) ;    functions.
                                        (0186) ;          
                                        (0187) ;    Currently only the page pointer registers listed below are modified: 
                                        (0188) ;          CUR_PP
                                        (0189) ;
                                        (0190)  DUALADC_1_GetSamples:
                                        (0191) _DUALADC_1_GetSamples:
                                        (0192)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0193)    RAM_SETPAGE_CUR >DUALADC_1_bSampC
0946: 53 42    MOV   [accuracy_transitions+10],A(0194)    mov   [DUALADC_1_bSampC], A                             ; Store sample count
                                        (0195)                                                            ; Interrupts, Put A/D in reset
0948: 51 41    MOV   A,[accuracy_transitions+9](0196)    mov   A,[DUALADC_1_bfStatus]                            ; get and set the resolution
094A: 21 0F    AND   A,0xF              (0197)    and   A,DUALADC_1_bRES_MASK
094C: 01 07    ADD   A,0x7              (0198)    add   A,DUALADC_1_bMINRES
094E: 90 7A    CALL  _DUALADC_1_SetResolution(0199)    call  DUALADC_1_SetResolution
                                        (0200) 
                                        (0201) DUALADC_1_LoadMSBCounter:                                  ; The PWM has been setup by SetResolution, now set the upper
                                        (0202)                                                            ; counter which will be the same as the period.
                                        (0203)                                                            ; Reset MSB of counter to most negative value
                                        (0204) 
0950: 5D 2A    MOV   A,REG[0x2A]        (0205)    mov   A,reg[DUALADC_1_bPWM_IntTime_MSB]                 ; Get MSB of PWM and move it into RAM
0952: 53 3B    MOV   [accuracy_transitions+3],A(0206)    mov   [DUALADC_1_cCounter1U], A                         ; Use counter as temp location
0954: 50 00    MOV   A,0x0              (0207)    mov   A, 00h                                            ; Load A with zero for the calculation
0956: 12 3B    SUB   A,[accuracy_transitions+3](0208)    sub   A, [DUALADC_1_cCounter1U]                         ; 0 - MSB_PWM = MSB_of_most_neg_value
0958: 67       ASR   A                  (0209)    asr   A                                                 ; Half the range (+ and -)
                                        (0210) IF (DUALADC_1_DATA_FORMAT)
                                        (0211)    mov   [DUALADC_1_cCounter1U], A                         ; Place result back into MSB of counter1
                                        (0212)    mov   [DUALADC_1_cCounter2U], A                         ; Place result back into MSB of counter2
                                        (0213) ELSE
0959: 55 3B 00 MOV   [accuracy_transitions+3],0x0(0214)    mov   [DUALADC_1_cCounter1U], 00h                       ; Always start at zero for unsigned values for ADC1
095C: 55 3C 00 MOV   [accuracy_transitions+4],0x0(0215)    mov   [DUALADC_1_cCounter2U], 00h                       ; Always start at zero for unsigned values for ADC2
                                        (0216) ENDIF
095F: 5D 26    MOV   A,REG[0x26]        (0217)    mov   A, reg[DUALADC_1_bPWM_IntTime_LSB]                ; Dummy Read  - required do not remove
0961: 62 21 FF MOV   REG[0x21],0xFF     (0218)    mov   reg[DUALADC_1_bPeriod1], FFh                      ; Make sure counter1 starts at FF
0964: 62 2D FF MOV   REG[0x2D],0xFF     (0219)    mov   reg[DUALADC_1_bPeriod2], FFh                      ; Make sure counter2 starts at FF
                                        (0220) 
0967: 41 93 EF AND   REG[0x93],0xEF     (0221)    and   reg[DUALADC_1_bfADC1cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
096A: 41 9B EF AND   REG[0x9B],0xEF     (0222)    and   reg[DUALADC_1_bfADC2cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
                                        (0223) IF DUALADC_1_NoAZ
096D: 41 92 DF AND   REG[0x92],0xDF     (0224)     and  reg[DUALADC_1_bfADC1cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
0970: 41 9A DF AND   REG[0x9A],0xDF     (0225)     and  reg[DUALADC_1_bfADC2cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
                                        (0226) ENDIF
                                        (0227) 
0973: 43 23 05 OR    REG[0x23],0x5      (0228)    or    reg[DUALADC_1_bCounter1_CR0], (DUALADC_1_fDBLK_ENABLE|DUALADC_1_fPULSE_WIDE)   ; Enable the Counter
0976: 43 2F 05 OR    REG[0x2F],0x5      (0229)    or    reg[DUALADC_1_bCounter2_CR0], (DUALADC_1_fDBLK_ENABLE|DUALADC_1_fPULSE_WIDE)   ; Enable the Counter
0979: 43 27 01 OR    REG[0x27],0x1      (0230)    or    reg[DUALADC_1_fPWM_LSB_CR0], DUALADC_1_fDBLK_ENABLE          ; Enable PWM
097C: 43 E1 04 OR    REG[0xE1],0x4      (0231)    or    reg[DUALADC_1_bfPWM16_INT_REG], DUALADC_1_bfPWM16_Mask      ; Enable PWM and Counter interrupts
097F: 43 E1 01 OR    REG[0xE1],0x1      (0232)    or    reg[DUALADC_1_bfCounter1_INT_REG], DUALADC_1_bfCounter1_Mask
0982: 43 E1 08 OR    REG[0xE1],0x8      (0233)    or    reg[DUALADC_1_bfCounter2_INT_REG], DUALADC_1_bfCounter2_Mask
                                        (0234) 
0985: 7F       RET                      (0235)    ret
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) .SECTION
                                        (0240) ;-----------------------------------------------------------------------------
                                        (0241) ;  FUNCTION NAME: DUALADC_1_StopAD
                                        (0242) ;
                                        (0243) ;  DESCRIPTION:
                                        (0244) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0245) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS:  None
                                        (0250) ;
                                        (0251) ;  RETURNS: NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;     The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  DUALADC_1_StopAD:
                                        (0261) _DUALADC_1_StopAD:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
0986: 41 27 FE AND   REG[0x27],0xFE     (0263)    and   reg[DUALADC_1_fPWM_LSB_CR0], ~DUALADC_1_fDBLK_ENABLE     ; Disable the PWM
                                        (0264) 
0989: 41 23 FE AND   REG[0x23],0xFE     (0265)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
098C: 41 2F FE AND   REG[0x2F],0xFE     (0266)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
                                        (0267) 
                                        (0268) IF DUALADC_1_NoAZ
098F: 43 92 20 OR    REG[0x92],0x20     (0269)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
0992: 43 9A 20 OR    REG[0x9A],0x20     (0270)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
                                        (0271) ENDIF
                                        (0272) 
0995: 43 93 10 OR    REG[0x93],0x10     (0273)    or   reg[DUALADC_1_bfADC1cr3], DUALADC_1_fFSW0              ; Put Integrator into reset
0998: 43 9B 10 OR    REG[0x9B],0x10     (0274)    or   reg[DUALADC_1_bfADC2cr3], DUALADC_1_fFSW0              ; Put Integrator into reset
                                        (0275) 
099B: 08       PUSH  A                  (0276)    push A
099C: 41 E1 FB AND   REG[0xE1],0xFB     
099F: 41 E1 FE AND   REG[0xE1],0xFE     
09A2: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0277)    M8C_DisableIntMask DUALADC_1_bfPWM16_INT_REG, DUALADC_1_bfPWM16_Mask      ; Disable interrupts
                                        (0278)    M8C_DisableIntMask DUALADC_1_bfCounter1_INT_REG, DUALADC_1_bfCounter1_Mask
                                        (0279)    M8C_DisableIntMask DUALADC_1_bfCounter2_INT_REG, DUALADC_1_bfCounter1_Mask
09A5: 18       POP   A                  (0280)    pop  A
                                        (0281)    
                                        (0282)    RAM_EPILOGUE RAM_USE_CLASS_1
09A6: 7F       RET                      (0283)    ret
                                        (0284) .ENDSECTION
                                        (0285) 
                                        (0286) .SECTION
                                        (0287) ;-----------------------------------------------------------------------------
                                        (0288) ;  FUNCTION NAME: DUALADC_1_fIsData
                                        (0289) ;  FUNCTION NAME: DUALADC_1_fIsDataAvailable
                                        (0290) ;
                                        (0291) ;  DESCRIPTION:
                                        (0292) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0293) ;  value is available.
                                        (0294) ;
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;
                                        (0297) ;  ARGUMENTS: None
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;  A  Returns data status  A == 0 no data available
                                        (0301) ;                          A != 0 data available
                                        (0302) ;
                                        (0303) ;  SIDE EFFECTS:
                                        (0304) ;    The A and X registers may be modified by this or future implementations
                                        (0305) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0306) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0307) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0308) ;    functions.
                                        (0309) ;          
                                        (0310) ;    Currently only the page pointer registers listed below are modified:
                                        (0311) ;          CUR_PP
                                        (0312) ;
                                        (0313)  DUALADC_1_fIsData:
                                        (0314) _DUALADC_1_fIsData:
                                        (0315)  DUALADC_1_fIsDataAvailable:
                                        (0316) _DUALADC_1_fIsDataAvailable:
                                        (0317)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0318)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus
09A7: 51 41    MOV   A,[accuracy_transitions+9](0319)    mov   A, [DUALADC_1_bfStatus]                      ; Get status byte
09A9: 21 10    AND   A,0x10             (0320)    and   A, DUALADC_1_fDATA_READY                     ; Mask off other bits
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_4
09AB: 7F       RET                      (0322)    ret
                                        (0323) .ENDSECTION
                                        (0324) 
                                        (0325) .SECTION
                                        (0326) ;-----------------------------------------------------------------------------
                                        (0327) ;  FUNCTION NAME: DUALADC_1_iGetData1ClearFlag
                                        (0328) ;  FUNCTION NAME: DUALADC_1_iGetData1
                                        (0329) ;
                                        (0330) ;  DESCRIPTION:
                                        (0331) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0332) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: None
                                        (0337) ;
                                        (0338) ;  RETURNS:
                                        (0339) ;    A  Contains the LSB of the 16 bit result
                                        (0340) ;    X  Contains the MSB of the 16 bit result
                                        (0341) ;
                                        (0342) ;  SIDE EFFECTS:
                                        (0343) ;    The A and X registers may be modified by this or future implementations
                                        (0344) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0345) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0346) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0347) ;    functions.
                                        (0348) ;          
                                        (0349) ;    Currently only the page pointer registers listed below are modified:
                                        (0350) ;          CUR_PP
                                        (0351) ;
                                        (0352)  DUALADC_1_iGetData1ClearFlag:
                                        (0353) _DUALADC_1_iGetData1ClearFlag:
                                        (0354)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0355)    RAM_SETPAGE_CUR >DUALADC_1_iResult1 
09AC: 26 41 EF AND   [accuracy_transitions+9],0xEF(0356)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
09AF: 58 3D    MOV   X,[accuracy_transitions+5](0357)    mov   X, [(DUALADC_1_iResult1 + HighByte)]
09B1: 51 3E    MOV   A,[accuracy_transitions+6](0358)    mov   A, [(DUALADC_1_iResult1 + LowByte)]
                                        (0359)    RAM_EPILOGUE RAM_USE_CLASS_4
09B3: 7F       RET                      (0360)    ret
                                        (0361) 
                                        (0362)  DUALADC_1_iGetData1:
                                        (0363) _DUALADC_1_iGetData1:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
09B4: 58 3D    MOV   X,[accuracy_transitions+5](0366)    mov   X, [(DUALADC_1_iResult1 + HighByte)]
09B6: 51 3E    MOV   A,[accuracy_transitions+6](0367)    mov   A, [(DUALADC_1_iResult1 + LowByte)]
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
09B8: 7F       RET                      (0369)    ret
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: DUALADC_1_iGetData2ClearFlag
                                        (0375) ;  FUNCTION NAME: DUALADC_1_iGetData2
                                        (0376) ;
                                        (0377) ;  DESCRIPTION:
                                        (0378) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0379) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0380) ;
                                        (0381) ;-----------------------------------------------------------------------------
                                        (0382) ;
                                        (0383) ;  ARGUMENTS: None
                                        (0384) ;
                                        (0385) ;  RETURNS:
                                        (0386) ;    A  Contains the LSB of the 16 bit result
                                        (0387) ;    X  Contains the MSB of the 16 bit result
                                        (0388) ;
                                        (0389) ;  SIDE EFFECTS:
                                        (0390) ;    The A and X registers may be modified by this or future implementations
                                        (0391) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0392) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0393) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0394) ;    functions.
                                        (0395) ;          
                                        (0396) ;    Currently only the page pointer registers listed below are modified:
                                        (0397) ;          CUR_PP
                                        (0398) ;
                                        (0399)  DUALADC_1_iGetData2ClearFlag:
                                        (0400) _DUALADC_1_iGetData2ClearFlag:
                                        (0401)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0402)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
09B9: 26 41 EF AND   [accuracy_transitions+9],0xEF(0403)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
09BC: 58 3F    MOV   X,[accuracy_transitions+7](0404)    mov   X, [(DUALADC_1_iResult2 + HighByte)]
09BE: 51 40    MOV   A,[accuracy_transitions+8](0405)    mov   A, [(DUALADC_1_iResult2 + LowByte)]
                                        (0406)    RAM_EPILOGUE RAM_USE_CLASS_4
09C0: 7F       RET                      (0407)    ret
                                        (0408) 
                                        (0409)  DUALADC_1_iGetData2:
                                        (0410) _DUALADC_1_iGetData2:
                                        (0411)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0412)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
09C1: 58 3F    MOV   X,[accuracy_transitions+7](0413)    mov   X, [(DUALADC_1_iResult2 + HighByte)]
09C3: 51 40    MOV   A,[accuracy_transitions+8](0414)    mov   A, [(DUALADC_1_iResult2 + LowByte)]
                                        (0415)    RAM_EPILOGUE RAM_USE_CLASS_4
09C5: 7F       RET                      (0416)    ret
                                        (0417) .ENDSECTION
                                        (0418) 
                                        (0419) .SECTION
                                        (0420) ;-----------------------------------------------------------------------------
                                        (0421) ;  FUNCTION NAME: DUALADC_1_ClearFlag
                                        (0422) ;
                                        (0423) ;  DESCRIPTION:
                                        (0424) ;  Clears the data ready flag.
                                        (0425) ;
                                        (0426) ;-----------------------------------------------------------------------------
                                        (0427) ;
                                        (0428) ;  ARGUMENTS: None
                                        (0429) ;
                                        (0430) ;  RETURNS: NA
                                        (0431) ;
                                        (0432) ;  SIDE EFFECTS:
                                        (0433) ;    The A and X registers may be modified by this or future implementations
                                        (0434) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0435) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0436) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0437) ;    functions.
                                        (0438) ;          
                                        (0439) ;    Currently only the page pointer registers listed below are modified:
                                        (0440) ;          CUR_PP
                                        (0441) ;
                                        (0442)  DUALADC_1_ClearFlag:
                                        (0443) _DUALADC_1_ClearFlag:
                                        (0444)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0445)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus  
09C6: 26 41 EF AND   [accuracy_transitions+9],0xEF(0446)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
                                        (0447)    RAM_EPILOGUE RAM_USE_CLASS_4
09C9: 7F       RET                      (0448)    ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: DUALADC_1_SetResolution
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0462) ;
                                        (0463) ;  RETURNS:  NA
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475) ;    This function halts the PWM and the counter to sync the A/D , but
                                        (0476) ;    does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0477) ;    should be called. It sets the resolution for both channels at the
                                        (0478) ;    same time.
                                        (0479) ;
                                        (0480)  DUALADC_1_SetResolution:
                                        (0481) _DUALADC_1_SetResolution:
                                        (0482)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0483)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus  
                                        (0484) 
09CA: 41 92 FE AND   REG[0x92],0xFE     (0485)    and   reg[DUALADC_1_bfADC1cr2], ~DUALADC_1_fRES_SET
                                        (0486)    
09CD: 9F B7    CALL  _DUALADC_1_StopAD  (0487)    call  DUALADC_1_StopAD                          ; Stop the A/D if it is running
09CF: 55 41 00 MOV   [accuracy_transitions+9],0x0(0488)    mov   [DUALADC_1_bfStatus], 00h                 ; and clear status and old resolution
                                        (0489) 
                                        (0490)                                                    ; Check for resolution to be within min and max values
09D2: 39 07    CMP   A,0x7              (0491)    cmp   A,DUALADC_1_bMINRES                       ; Check low end of resolution
09D4: D0 05    JNC   0x09DA             (0492)    jnc   DUALADC_1_CHECKHI
09D6: 50 07    MOV   A,0x7              (0493)    mov   A,DUALADC_1_bMINRES                       ; Too low - load legal low value
09D8: 80 07    JMP   0x09E0             (0494)    jmp   DUALADC_1_RES_OK
                                        (0495) 
                                        (0496) DUALADC_1_CHECKHI:                                 ; Check high end of resolution
09DA: 39 0D    CMP   A,0xD              (0497)    cmp   A,DUALADC_1_bMAXRES
09DC: C0 03    JC    0x09E0             (0498)    jc    DUALADC_1_RES_OK
09DE: 50 0D    MOV   A,0xD              (0499)    mov   A,DUALADC_1_bMAXRES                       ; Too high - load legal Max value
                                        (0500) 
                                        (0501) DUALADC_1_RES_OK:
                                        (0502)                                                    ; Calculate compare value for the PWM which
                                        (0503)                                                    ; computes the integrate time
09E0: 11 07    SUB   A,0x7              (0504)    sub   A, DUALADC_1_bMINRES                      ; Normalize with min resolution
09E2: 2C 41    OR    [accuracy_transitions+9],A(0505)    or    [DUALADC_1_bfStatus], A
                                        (0506)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0507)                                                    ; is running 4x so 128*4=512 or 0x0200
09E4: 01 01    ADD   A,0x1              (0508)    add   A,01h                                     ; The MSB is 02h.
09E6: 5C       MOV   X,A                (0509)    mov   X,A
09E7: 50 01    MOV   A,0x1              (0510)    mov   A,01h
                                        (0511) 
                                        (0512) DUALADC_1_CALC_INTTIME:                            ; Now shift the MSB left for every bit of resolution of min (7).
09E9: 64       ASL   A                  (0513)    asl   A
09EA: 79       DEC   X                  (0514)    dec   X
09EB: BF FD    JNZ   0x09E9             (0515)    jnz   DUALADC_1_CALC_INTTIME
                                        (0516) 
                                        (0517) DUALADC_1_LOAD_INTTIME:                            ; Load compare value and Calc time into registers
                                        (0518)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
09ED: 62 26 00 MOV   REG[0x26],0x0      (0519)    mov   reg[DUALADC_1_bPWM_IntTime_LSB], 00h
09F0: 60 2A    MOV   REG[0x2A],A        (0520)    mov   reg[DUALADC_1_bPWM_IntTime_MSB], A
                                        (0521) 
                                        (0522)                                                    ; Load the CalcTime into the PWM Period
09F2: 62 25 58 MOV   REG[0x25],0x58     (0523)    mov   reg[DUALADC_1_bPWM_Period_LSB], <wCalcTime
09F5: 01 00    ADD   A,0x0              (0524)    add   A, >wCalcTime
09F7: 60 29    MOV   REG[0x29],A        (0525)    mov   reg[DUALADC_1_bPWM_Period_MSB],A
                                        (0526)    RAM_EPILOGUE RAM_USE_CLASS_4
09F9: 7F       RET                      (0527)    ret
                                        (0528) .ENDSECTION
                                        (0529) 
                                        (0530) ; End of File DUALADC_1.asm
FILE: C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\FINAL_~1\FINAL_~1\FINAL_~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include <string.h>
(0008) #include <stddef.h>
(0009) 
(0010) // Output-related functions
(0011) void itoa(unsigned short input, char *str, int base);
(0012) void LCD_line_print(char *str, unsigned char line);
(0013) #define LCD_LINE_1 0
(0014) #define LCD_LINE_2 1
(0015) 
(0016) // FSM/timer-related functions
(0017) void do_nothing(void);
(0018) void start_timer(void);
(0019) void stop_timer_record(void);
(0020) void show_next_record(void);
(0021) void inc_accuracy(void);
(0022) void inc_sensitivity(void);
(0023) void show_detected(void);
(0024) 
(0025) /*******************************************************************************
(0026)  * State machine definitions
(0027)  ******************************************************************************/
(0028) 
(0029) // event enum
(0030) enum event {
(0031) 	sp, lp, mic, eol
(0032) };
(0033) 
(0034) // state enum
(0035) enum state {
(0036) 	pb_stopped, pb_running, mic_stopped, mic_running,
(0037) 	statistic, accuracy, sensitivity
(0038) };
(0039) 
(0040) // transition and table
(0041) struct transition {
(0042) 	enum event event_val;
(0043) 	void (*task) (void);
(0044) 	enum state next_state;
(0045) };
(0046) 
(0047) // stopwatch current state
(0048) enum state cs = pb_stopped;
(0049) 
(0050) // fsm function
(0051) void stopwatch_fsm(enum event event_input){
__UserModules_end|__text_start|_stopwatch_fsm|_stopwatch_fsm:
  i                    --> X+0
  event_input          --> X-4
    09FA: 10       PUSH  X
    09FB: 4F       MOV   X,SP
    09FC: 38 02    ADD   SP,0x2
(0052) 	static const struct transition pb_stopped_transitions[] = {
(0053) 	//	Event	Task				Next_state
(0054) 		{sp,	start_timer, 		pb_running},
(0055) 		{lp,	do_nothing, 		mic_stopped},
(0056) 		{eol,	do_nothing,			pb_stopped}
(0057) 	};
(0058) 	static const struct transition pb_running_transitions[] = {
(0059) 	//	Event	Task				Next_state
(0060) 		{sp,	stop_timer_record,	pb_stopped},
(0061) 		{eol,	do_nothing,			pb_running}
(0062) 	};
(0063) 	static const struct transition mic_stopped_transitions[] = {
(0064) 	//	Event	Task				Next_state
(0065) 		{mic,	start_timer, 		mic_running},
(0066) 		{lp,	do_nothing, 		statistic},
(0067) 		{eol,	do_nothing,			mic_stopped}
(0068) 	};
(0069) 	static const struct transition mic_running_transitions[] = {
(0070) 	//	Event	Task				Next_state
(0071) 		{mic,	stop_timer_record,	mic_stopped},
(0072) 		{sp,	stop_timer_record,	mic_stopped},
(0073) 		{eol,	do_nothing,			mic_running}
(0074) 	};
(0075) 	static const struct transition statistic_transitions[] = {
(0076) 	//	Event	Task				Next_state
(0077) 		{sp,	show_next_record,	statistic},
(0078) 		{lp,	do_nothing, 		accuracy},
(0079) 		{eol,	do_nothing,			statistic}
(0080) 	};
(0081) 	static const struct transition accuracy_transitions[] = {
(0082) 	//	Event	Task				Next_state
(0083) 		{sp,	inc_accuracy, 		accuracy},
(0084) 		{lp,	do_nothing, 		sensitivity},
(0085) 		{eol,	do_nothing,			accuracy}
(0086) 	};
(0087) 	static const struct transition sensitivity_transitions[] = {
(0088) 	//	Event	Task				Next_state
(0089) 		{sp,	inc_sensitivity, 	sensitivity},
(0090) 		{mic,	show_detected,		sensitivity},
(0091) 		{lp,	do_nothing, 		pb_stopped},
(0092) 		{eol,	do_nothing,			sensitivity}
(0093) 	};
(0094) 	// FSM table. Since it is const, it will be stored in FLASH
(0095) 	static const struct transition *fsm_table[7] = {
(0096) 		pb_stopped_transitions, 
(0097) 		pb_running_transitions, 
(0098) 		mic_stopped_transitions, 
(0099) 		mic_running_transitions,
(0100) 		statistic_transitions, 
(0101) 		accuracy_transitions, 
(0102) 		sensitivity_transitions
(0103) 	};
(0104) 
(0105) 	// search for signal
(0106) 	int i;
(0107) 	for (i = 0; (fsm_table[cs][i].event_val != event_input)
    09FE: 56 01 00 MOV   [X+1],0x0
    0A01: 56 00 00 MOV   [X+0],0x0
    0A04: 80 06    JMP   0x0A0B
(0108) 		&& (fsm_table[cs][i].event_val != eol); i++){
(0109) 	};
    0A06: 77 01    INC   [X+1]
    0A08: 0F 00 00 ADC   [X+0],0x0
    0A0B: 5F 36 00 MOV   [__r1],[cs|pb_stopped_transitions|buffer]
    0A0E: 65 36    ASL   [__r1]
    0A10: 06 36 01 ADD   [__r1],0x1
    0A13: 3E 36    MVI   A,[__r1]
    0A15: 53 37    MOV   [__r0],A
    0A17: 3E 36    MVI   A,[__r1]
    0A19: 53 36    MOV   [__r1],A
    0A1B: 52 01    MOV   A,[X+1]
    0A1D: 53 34    MOV   [__r3],A
    0A1F: 52 00    MOV   A,[X+0]
    0A21: 53 35    MOV   [__r2],A
    0A23: 65 34    ASL   [__r3]
    0A25: 6B 35    RLC   [__r2]
    0A27: 65 34    ASL   [__r3]
    0A29: 6B 35    RLC   [__r2]
    0A2B: 51 34    MOV   A,[__r3]
    0A2D: 02 36    ADD   A,[__r1]
    0A2F: 53 36    MOV   [__r1],A
    0A31: 51 35    MOV   A,[__r2]
    0A33: 0A 37    ADC   A,[__r0]
    0A35: 10       PUSH  X
    0A36: 58 36    MOV   X,[__r1]
    0A38: 28       ROMX  
    0A39: 20       POP   X
    0A3A: 53 36    MOV   [__r1],A
    0A3C: 55 37 00 MOV   [__r0],0x0
    0A3F: 52 FC    MOV   A,[X-4]
    0A41: 53 34    MOV   [__r3],A
    0A43: 55 35 00 MOV   [__r2],0x0
    0A46: 50 00    MOV   A,0x0
    0A48: 3A 35    CMP   A,[__r2]
    0A4A: B0 07    JNZ   0x0A52
    0A4C: 51 36    MOV   A,[__r1]
    0A4E: 3A 34    CMP   A,[__r3]
    0A50: A0 0B    JZ    0x0A5C
    0A52: 3C 37 00 CMP   [__r0],0x0
    0A55: BF B0    JNZ   0x0A06
    0A57: 3C 36 03 CMP   [__r1],0x3
    0A5A: BF AB    JNZ   0x0A06
(0110) 	// call task function and than change state
(0111) 	fsm_table[cs][i].task();
    0A5C: 5F 36 00 MOV   [__r1],[cs|pb_stopped_transitions|buffer]
    0A5F: 65 36    ASL   [__r1]
    0A61: 06 36 01 ADD   [__r1],0x1
    0A64: 3E 36    MVI   A,[__r1]
    0A66: 53 37    MOV   [__r0],A
    0A68: 3E 36    MVI   A,[__r1]
    0A6A: 53 36    MOV   [__r1],A
    0A6C: 52 01    MOV   A,[X+1]
    0A6E: 53 34    MOV   [__r3],A
    0A70: 52 00    MOV   A,[X+0]
    0A72: 53 35    MOV   [__r2],A
    0A74: 65 34    ASL   [__r3]
    0A76: 6B 35    RLC   [__r2]
    0A78: 65 34    ASL   [__r3]
    0A7A: 6B 35    RLC   [__r2]
    0A7C: 51 34    MOV   A,[__r3]
    0A7E: 02 36    ADD   A,[__r1]
    0A80: 53 36    MOV   [__r1],A
    0A82: 51 35    MOV   A,[__r2]
    0A84: 0A 37    ADC   A,[__r0]
    0A86: 53 37    MOV   [__r0],A
    0A88: 06 36 01 ADD   [__r1],0x1
    0A8B: 0E 37 00 ADC   [__r0],0x0
    0A8E: 51 37    MOV   A,[__r0]
    0A90: 10       PUSH  X
    0A91: 58 36    MOV   X,[__r1]
    0A93: 08       PUSH  A
    0A94: 28       ROMX  
    0A95: 53 37    MOV   [__r0],A
    0A97: 18       POP   A
    0A98: 75       INC   X
    0A99: 09 00    ADC   A,0x0
    0A9B: 28       ROMX  
    0A9C: 5C       MOV   X,A
    0A9D: 51 37    MOV   A,[__r0]
    0A9F: 7C 17 BB LCALL __plcall
    0AA2: 20       POP   X
(0112) 	cs = fsm_table[cs][i].next_state;
    0AA3: 5F 36 00 MOV   [__r1],[cs|pb_stopped_transitions|buffer]
    0AA6: 65 36    ASL   [__r1]
    0AA8: 06 36 01 ADD   [__r1],0x1
    0AAB: 3E 36    MVI   A,[__r1]
    0AAD: 53 37    MOV   [__r0],A
    0AAF: 3E 36    MVI   A,[__r1]
    0AB1: 53 36    MOV   [__r1],A
    0AB3: 52 01    MOV   A,[X+1]
    0AB5: 53 34    MOV   [__r3],A
    0AB7: 52 00    MOV   A,[X+0]
    0AB9: 53 35    MOV   [__r2],A
    0ABB: 65 34    ASL   [__r3]
    0ABD: 6B 35    RLC   [__r2]
    0ABF: 65 34    ASL   [__r3]
    0AC1: 6B 35    RLC   [__r2]
    0AC3: 51 34    MOV   A,[__r3]
    0AC5: 02 36    ADD   A,[__r1]
    0AC7: 53 36    MOV   [__r1],A
    0AC9: 51 35    MOV   A,[__r2]
    0ACB: 0A 37    ADC   A,[__r0]
    0ACD: 53 37    MOV   [__r0],A
    0ACF: 06 36 03 ADD   [__r1],0x3
    0AD2: 0E 37 00 ADC   [__r0],0x0
    0AD5: 51 37    MOV   A,[__r0]
    0AD7: 10       PUSH  X
    0AD8: 58 36    MOV   X,[__r1]
    0ADA: 28       ROMX  
    0ADB: 20       POP   X
    0ADC: 53 00    MOV   [cs|pb_stopped_transitions|buffer],A
(0113) 	return;
    0ADE: 38 FE    ADD   SP,0xFE
    0AE0: 20       POP   X
    0AE1: 7F       RET   
(0114) }
(0115) 
(0116) // global variable
(0117) unsigned short time;
(0118) unsigned short time_displayed;
(0119) unsigned short time_record[10] = {0,0,0,0,0,0,0,0,0,0};
(0120) unsigned short hh = 0;
(0121) unsigned short mm = 0;
(0122) unsigned short ss = 0;
(0123) unsigned short ll = 0;
(0124) unsigned short MuteTime;
(0125) unsigned char MicSensitivity = 1;
(0126) int MicSenseValue = 350;
(0127) unsigned char TimeAccuracy = 0;
(0128) unsigned char stat_show = 0;
(0129) unsigned char stat_result = 0;
(0130) char str_buf[17];
(0131) char * tmp_ptr;
(0132) 
(0133) /*******************************************************************************
(0134)  * Main function
(0135)  ******************************************************************************/
(0136) void main(void){
_main:
  MicValue             --> X+4
  i                    --> X+2
  PressedTime          --> X+1
  bSwitchState         --> X+0
    0AE2: 10       PUSH  X
    0AE3: 4F       MOV   X,SP
    0AE4: 38 10    ADD   SP,0x10
(0137) 	unsigned char bSwitchState = 0;
    0AE6: 56 00 00 MOV   [X+0],0x0
(0138) 	unsigned char PressedTime = 0;
    0AE9: 56 01 00 MOV   [X+1],0x0
(0139) 	int MicValue;
(0140) 	int i;
(0141) 	MuteTime = 0;
    0AEC: 55 68 00 MOV   [MuteTime+1],0x0
    0AEF: 55 67 00 MOV   [MuteTime],0x0
(0142) 	
(0143) 	// initialize interrupt
(0144) 	M8C_EnableGInt;
    0AF2: 71 01    OR    F,0x1
(0145) 	StopTimer_EnableInt();
    0AF4: 10       PUSH  X
    0AF5: 7C 05 28 LCALL _StopTimer_EnableInt
(0146) 	MuteTimer_EnableInt();
    0AF8: 7C 05 EC LCALL _MuteTimer_EnableInt
(0147) 	
(0148) 	// start Mic hardware
(0149) 	PGA_1_Start(PGA_1_HIGHPOWER);
    0AFB: 50 03    MOV   A,0x3
    0AFD: 7C 05 B8 LCALL _PGA_1_SetPower|_PGA_1_Start|PGA_1_SetPower|PGA_1_Start
(0150) 	PGA_2_Start(PGA_2_HIGHPOWER);
    0B00: 50 03    MOV   A,0x3
    0B02: 7C 05 84 LCALL _PGA_2_Start|PGA_2_SetPower|PGA_2_Start|_PGA_2_SetPower
(0151) 	LPF2_1_Start(LPF2_1_HIGHPOWER);
    0B05: 50 03    MOV   A,0x3
    0B07: 7C 06 32 LCALL _LPF2_1_SetPower|LPF2_1_Start|_LPF2_1_Start|LPF2_1_SetPower
(0152) 	DUALADC_1_Start(DUALADC_1_HIGHPOWER);
    0B0A: 50 03    MOV   A,0x3
    0B0C: 7C 09 1C LCALL _DUALADC_1_Start|_DUALADC_1_SetPower|DUALADC_1_Start|DUALADC_1_SetPower
(0153) 	DUALADC_1_SetResolution(10);
    0B0F: 50 0A    MOV   A,0xA
    0B11: 7C 09 CA LCALL _DUALADC_1_SetResolution
(0154) 	DUALADC_1_GetSamples(0);
    0B14: 50 00    MOV   A,0x0
    0B16: 7C 09 46 LCALL _DUALADC_1_GetSamples
(0155) 	
(0156) 	// init LCD module
(0157) 	LCD_Start();
    0B19: 7C 07 AC LCALL _LCD_Init|LCD_Start|_LCD_Start
    0B1C: 20       POP   X
(0158) 	
(0159) 	// start PWM and LCD
(0160) 	cstrcpy(str_buf, "Hello?");
    0B1D: 50 02    MOV   A,0x2
    0B1F: 08       PUSH  A
    0B20: 50 C4    MOV   A,0xC4
    0B22: 08       PUSH  A
    0B23: 50 00    MOV   A,0x0
    0B25: 08       PUSH  A
    0B26: 50 56    MOV   A,0x56
    0B28: 08       PUSH  A
    0B29: 7C 17 73 LCALL _cstrcpy
(0161) 	LCD_line_print(str_buf, LCD_LINE_2);
    0B2C: 50 01    MOV   A,0x1
    0B2E: 08       PUSH  A
    0B2F: 50 00    MOV   A,0x0
    0B31: 08       PUSH  A
    0B32: 50 56    MOV   A,0x56
    0B34: 08       PUSH  A
    0B35: 7C 14 6E LCALL _LCD_line_print
    0B38: 38 F9    ADD   SP,0xF9
    0B3A: 7D 13 58 LJMP  0x1358
(0162) 	
(0163) 	// main loop
(0164) 	while (1){
(0165) 		/****************************************************
(0166) 		 * Button detecting
(0167) 		 ***************************************************/
(0168) 		// debouncing		
(0169) 		bSwitchState <<= 1;
    0B3D: 66 00    ASL   [X+0]
(0170) 		bSwitchState &= 0x0f;
    0B3F: 27 00 0F AND   [X+0],0xF
(0171) 		bSwitchState |= (PRT1DR & 0x01);
    0B42: 5D 04    MOV   A,REG[0x4]
    0B44: 21 01    AND   A,0x1
    0B46: 2D 00    OR    [X+0],A
(0172) 		if(bSwitchState == 0x0f){	// press detected 0x07
    0B48: 3D 00 0F CMP   [X+0],0xF
    0B4B: B0 37    JNZ   0x0B83
(0173) 			if (PressedTime < 25){
    0B4D: 3D 01 19 CMP   [X+1],0x19
    0B50: D0 05    JNC   0x0B56
(0174) 				PressedTime++;	// Time button being pressed counted
    0B52: 77 01    INC   [X+1]
(0175) 			} else if (PressedTime == 25){
    0B54: 80 80    JMP   0x0BD5
    0B56: 3D 01 19 CMP   [X+1],0x19
    0B59: B0 7B    JNZ   0x0BD5
(0176) 				// Long pressed Event
(0177) 				PressedTime++; // to prevent Repeated event
    0B5B: 77 01    INC   [X+1]
(0178) 				stopwatch_fsm(lp);
    0B5D: 50 01    MOV   A,0x1
    0B5F: 08       PUSH  A
    0B60: 9E 98    CALL  __UserModules_end|__text_start|_stopwatch_fsm|_stopwatch_fsm
    0B62: 38 FF    ADD   SP,0xFF
(0179) 			
(0180) 				cstrcpy(str_buf, "Long Pressed");
    0B64: 50 02    MOV   A,0x2
    0B66: 08       PUSH  A
    0B67: 50 B7    MOV   A,0xB7
    0B69: 08       PUSH  A
    0B6A: 50 00    MOV   A,0x0
    0B6C: 08       PUSH  A
    0B6D: 50 56    MOV   A,0x56
    0B6F: 08       PUSH  A
    0B70: 7C 17 73 LCALL _cstrcpy
(0181) 				LCD_line_print(str_buf, LCD_LINE_2);
    0B73: 50 01    MOV   A,0x1
    0B75: 08       PUSH  A
    0B76: 50 00    MOV   A,0x0
    0B78: 08       PUSH  A
    0B79: 50 56    MOV   A,0x56
    0B7B: 08       PUSH  A
    0B7C: 7C 14 6E LCALL _LCD_line_print
    0B7F: 38 F9    ADD   SP,0xF9
(0182) 			} else {
(0183) 				// to prevent Repeated event after long pressed event
(0184) 			}
(0185) 		} else {
    0B81: 80 53    JMP   0x0BD5
(0186) 			if (PressedTime == 0){
    0B83: 3D 01 00 CMP   [X+1],0x0
    0B86: B0 03    JNZ   0x0B8A
(0187) 				// Not pressed. No Event
(0188) 			} else if (PressedTime >= 25){
    0B88: 80 49    JMP   0x0BD2
    0B8A: 3D 01 19 CMP   [X+1],0x19
    0B8D: C0 20    JC    0x0BAE
(0189) 				// Release after Long pressed Event
(0190) 				cstrcpy(str_buf, "Released");
    0B8F: 50 02    MOV   A,0x2
    0B91: 08       PUSH  A
    0B92: 50 AE    MOV   A,0xAE
    0B94: 08       PUSH  A
    0B95: 50 00    MOV   A,0x0
    0B97: 08       PUSH  A
    0B98: 50 56    MOV   A,0x56
    0B9A: 08       PUSH  A
    0B9B: 7C 17 73 LCALL _cstrcpy
(0191) 				LCD_line_print(str_buf, LCD_LINE_2);
    0B9E: 50 01    MOV   A,0x1
    0BA0: 08       PUSH  A
    0BA1: 50 00    MOV   A,0x0
    0BA3: 08       PUSH  A
    0BA4: 50 56    MOV   A,0x56
    0BA6: 08       PUSH  A
    0BA7: 7C 14 6E LCALL _LCD_line_print
    0BAA: 38 F9    ADD   SP,0xF9
(0192) 			} else {
    0BAC: 80 25    JMP   0x0BD2
(0193) 				// Short Pressed Event
(0194) 				stopwatch_fsm(sp);
    0BAE: 50 00    MOV   A,0x0
    0BB0: 08       PUSH  A
    0BB1: 9E 47    CALL  __UserModules_end|__text_start|_stopwatch_fsm|_stopwatch_fsm
    0BB3: 38 FF    ADD   SP,0xFF
(0195) 			
(0196) 				cstrcpy(str_buf, "Short Pressed");
    0BB5: 50 02    MOV   A,0x2
    0BB7: 08       PUSH  A
    0BB8: 50 A0    MOV   A,0xA0
    0BBA: 08       PUSH  A
    0BBB: 50 00    MOV   A,0x0
    0BBD: 08       PUSH  A
    0BBE: 50 56    MOV   A,0x56
    0BC0: 08       PUSH  A
    0BC1: 7C 17 73 LCALL _cstrcpy
(0197) 				LCD_line_print(str_buf, LCD_LINE_2);
    0BC4: 50 01    MOV   A,0x1
    0BC6: 08       PUSH  A
    0BC7: 50 00    MOV   A,0x0
    0BC9: 08       PUSH  A
    0BCA: 50 56    MOV   A,0x56
    0BCC: 08       PUSH  A
    0BCD: 7C 14 6E LCALL _LCD_line_print
    0BD0: 38 F9    ADD   SP,0xF9
(0198) 			}
(0199) 			PressedTime = 0;
    0BD2: 56 01 00 MOV   [X+1],0x0
(0200) 		}
(0201) 		
(0202) 		/****************************************************
(0203) 		 * Microphone detecting
(0204) 		 ***************************************************/
(0205) 		// get mic
(0206) 		if(MuteTime == 0) {
    0BD5: 3C 67 00 CMP   [MuteTime],0x0
    0BD8: B0 5F    JNZ   0x0C38
    0BDA: 3C 68 00 CMP   [MuteTime+1],0x0
    0BDD: B0 5A    JNZ   0x0C38
(0207) 			while (DUALADC_1_fIsDataAvailable() == 0){
(0208) 				// Wait for mic conversion data available
(0209) 			}
    0BDF: 10       PUSH  X
    0BE0: 7C 09 A7 LCALL DUALADC_1_fIsDataAvailable|DUALADC_1_fIsData|_DUALADC_1_fIsData|_DUALADC_1_fIsDataAvailable
    0BE3: 20       POP   X
    0BE4: 39 00    CMP   A,0x0
    0BE6: AF F8    JZ    0x0BDF
(0210) 			MicValue = DUALADC_1_iGetData1ClearFlag(); // Get data from ADC
    0BE8: 10       PUSH  X
    0BE9: 7C 09 AC LCALL _DUALADC_1_iGetData1ClearFlag
    0BEC: 5A 37    MOV   [__r0],X
    0BEE: 20       POP   X
    0BEF: 54 05    MOV   [X+5],A
    0BF1: 51 37    MOV   A,[__r0]
    0BF3: 54 04    MOV   [X+4],A
(0211) 										// and Clear data ready flag
(0212) 			if(MicValue > MicSenseValue) {
    0BF5: 51 2D    MOV   A,[MicSenseValue|statistic_transitions+1]
    0BF7: 13 05    SUB   A,[X+5]
    0BF9: 52 04    MOV   A,[X+4]
    0BFB: 31 80    XOR   A,0x80
    0BFD: 53 33    MOV   [__rX],A
    0BFF: 51 2C    MOV   A,[MicSenseValue|statistic_transitions]
    0C01: 31 80    XOR   A,0x80
    0C03: 1A 33    SBB   A,[__rX]
    0C05: D0 64    JNC   0x0C6A
(0213) 				// Sound detected
(0214) 				stopwatch_fsm(mic);
    0C07: 50 02    MOV   A,0x2
    0C09: 08       PUSH  A
    0C0A: 9D EE    CALL  __UserModules_end|__text_start|_stopwatch_fsm|_stopwatch_fsm
    0C0C: 38 FF    ADD   SP,0xFF
(0215) 				
(0216) 				cstrcpy(str_buf, "Sound detected");
    0C0E: 50 02    MOV   A,0x2
    0C10: 08       PUSH  A
    0C11: 50 91    MOV   A,0x91
    0C13: 08       PUSH  A
    0C14: 50 00    MOV   A,0x0
    0C16: 08       PUSH  A
    0C17: 50 56    MOV   A,0x56
    0C19: 08       PUSH  A
    0C1A: 7C 17 73 LCALL _cstrcpy
(0217) 				LCD_line_print(str_buf, LCD_LINE_2);
    0C1D: 50 01    MOV   A,0x1
    0C1F: 08       PUSH  A
    0C20: 50 00    MOV   A,0x0
    0C22: 08       PUSH  A
    0C23: 50 56    MOV   A,0x56
    0C25: 08       PUSH  A
    0C26: 7C 14 6E LCALL _LCD_line_print
    0C29: 38 F9    ADD   SP,0xF9
(0218) 
(0219) 				// Start Mute Timer
(0220) 				MuteTime = 1;	// Prevent getting this loop again.
    0C2B: 55 68 01 MOV   [MuteTime+1],0x1
    0C2E: 55 67 00 MOV   [MuteTime],0x0
(0221) 				MuteTimer_Start();
    0C31: 10       PUSH  X
    0C32: 7C 05 F4 LCALL _MuteTimer_Start
    0C35: 20       POP   X
(0222) 			}
(0223) 		} else if (MuteTime > 100) {	// Muted for 0.5 seconds
    0C36: 80 33    JMP   0x0C6A
    0C38: 50 64    MOV   A,0x64
    0C3A: 12 68    SUB   A,[MuteTime+1]
    0C3C: 50 00    MOV   A,0x0
    0C3E: 1A 67    SBB   A,[MuteTime]
    0C40: D0 29    JNC   0x0C6A
(0224) 			MuteTimer_Stop();
    0C42: 10       PUSH  X
    0C43: 7C 05 F8 LCALL _MuteTimer_Stop
    0C46: 20       POP   X
(0225) 			MuteTime = 0;
    0C47: 55 68 00 MOV   [MuteTime+1],0x0
    0C4A: 55 67 00 MOV   [MuteTime],0x0
(0226) 			
(0227) 			cstrcpy(str_buf, "Mic Restored");
    0C4D: 50 02    MOV   A,0x2
    0C4F: 08       PUSH  A
    0C50: 50 84    MOV   A,0x84
    0C52: 08       PUSH  A
    0C53: 50 00    MOV   A,0x0
    0C55: 08       PUSH  A
    0C56: 50 56    MOV   A,0x56
    0C58: 08       PUSH  A
    0C59: 7C 17 73 LCALL _cstrcpy
(0228) 			LCD_line_print(str_buf, LCD_LINE_2);
    0C5C: 50 01    MOV   A,0x1
    0C5E: 08       PUSH  A
    0C5F: 50 00    MOV   A,0x0
    0C61: 08       PUSH  A
    0C62: 50 56    MOV   A,0x56
    0C64: 08       PUSH  A
    0C65: 7C 14 6E LCALL _LCD_line_print
    0C68: 38 F9    ADD   SP,0xF9
(0229) 		}
(0230) 		
(0231) 		/****************************************************
(0232) 		 * Main Loop
(0233) 		 ***************************************************/
(0234) 		time_displayed = time;
    0C6A: 5F 6A 6C MOV   [time_displayed+1],[time+1]
    0C6D: 5F 69 6B MOV   [time_displayed],[time]
(0235) 		switch(cs){
    0C70: 51 00    MOV   A,[cs|pb_stopped_transitions|buffer]
    0C72: 54 07    MOV   [X+7],A
    0C74: 56 06 00 MOV   [X+6],0x0
    0C77: 3D 06 00 CMP   [X+6],0x0
    0C7A: B0 06    JNZ   0x0C81
    0C7C: 3D 07 00 CMP   [X+7],0x0
    0C7F: A0 3F    JZ    0x0CBF
    0C81: 3D 06 00 CMP   [X+6],0x0
    0C84: B0 06    JNZ   0x0C8B
    0C86: 3D 07 01 CMP   [X+7],0x1
    0C89: A0 35    JZ    0x0CBF
    0C8B: 3D 06 00 CMP   [X+6],0x0
    0C8E: B0 06    JNZ   0x0C95
    0C90: 3D 07 02 CMP   [X+7],0x2
    0C93: A0 2B    JZ    0x0CBF
    0C95: 3D 06 00 CMP   [X+6],0x0
    0C98: B0 06    JNZ   0x0C9F
    0C9A: 3D 07 03 CMP   [X+7],0x3
    0C9D: A0 21    JZ    0x0CBF
    0C9F: 3D 06 00 CMP   [X+6],0x0
    0CA2: B0 06    JNZ   0x0CA9
    0CA4: 3D 07 04 CMP   [X+7],0x4
    0CA7: A3 10    JZ    0x0FB8
    0CA9: 3D 06 00 CMP   [X+6],0x0
    0CAC: B0 06    JNZ   0x0CB3
    0CAE: 3D 07 05 CMP   [X+7],0x5
    0CB1: A5 DD    JZ    0x128F
    0CB3: 3D 06 00 CMP   [X+6],0x0
    0CB6: B0 06    JNZ   0x0CBD
    0CB8: 3D 07 06 CMP   [X+7],0x6
    0CBB: A6 5C    JZ    0x1318
    0CBD: 86 9A    JMP   0x1358
(0236) 		case pb_stopped:
(0237) 		case pb_running:
(0238) 		case mic_stopped:
(0239) 		case mic_running:
(0240) 			switch(TimeAccuracy) {
    0CBF: 51 2E    MOV   A,[TimeAccuracy]
    0CC1: 54 09    MOV   [X+9],A
    0CC3: 56 08 00 MOV   [X+8],0x0
    0CC6: 3D 08 00 CMP   [X+8],0x0
    0CC9: B0 06    JNZ   0x0CD0
    0CCB: 3D 09 00 CMP   [X+9],0x0
    0CCE: A0 17    JZ    0x0CE6
    0CD0: 3D 08 00 CMP   [X+8],0x0
    0CD3: B0 06    JNZ   0x0CDA
    0CD5: 3D 09 01 CMP   [X+9],0x1
    0CD8: A0 15    JZ    0x0CEE
    0CDA: 3D 08 00 CMP   [X+8],0x0
    0CDD: B0 06    JNZ   0x0CE4
    0CDF: 3D 09 02 CMP   [X+9],0x2
    0CE2: A0 30    JZ    0x0D13
    0CE4: 80 5C    JMP   0x0D41
(0241) 			case 0: // 1 sec
(0242) 				ll = 0;
    0CE6: 55 2A 00 MOV   [ll+1],0x0
    0CE9: 55 29 00 MOV   [ll],0x0
(0243) 				break;
    0CEC: 80 54    JMP   0x0D41
(0244) 			case 1: // 1/2 sec
(0245) 				ll = (time_displayed % 2) * 5;
    0CEE: 51 6A    MOV   A,[time_displayed+1]
    0CF0: 21 01    AND   A,0x1
    0CF2: 53 36    MOV   [__r1],A
    0CF4: 50 00    MOV   A,0x0
    0CF6: 08       PUSH  A
    0CF7: 51 36    MOV   A,[__r1]
    0CF9: 08       PUSH  A
    0CFA: 50 00    MOV   A,0x0
    0CFC: 08       PUSH  A
    0CFD: 50 05    MOV   A,0x5
    0CFF: 08       PUSH  A
    0D00: 7C 16 DB LCALL 0x16DB
    0D03: 38 FC    ADD   SP,0xFC
    0D05: 5F 2A 33 MOV   [ll+1],[__rX]
    0D08: 5F 29 32 MOV   [ll],[__rY]
(0246) 				time_displayed >>= 1;	// division by 2
    0D0B: 70 FB    AND   F,0xFB
    0D0D: 6E 69    RRC   [time_displayed]
    0D0F: 6E 6A    RRC   [time_displayed+1]
(0247) 				break;
    0D11: 80 2F    JMP   0x0D41
(0248) 			case 2: // 1/10 sec
(0249) 				ll = (time_displayed % 10);
    0D13: 50 00    MOV   A,0x0
    0D15: 08       PUSH  A
    0D16: 50 0A    MOV   A,0xA
    0D18: 08       PUSH  A
    0D19: 51 69    MOV   A,[time_displayed]
    0D1B: 08       PUSH  A
    0D1C: 51 6A    MOV   A,[time_displayed+1]
    0D1E: 08       PUSH  A
    0D1F: 7C 16 80 LCALL 0x1680
    0D22: 38 FE    ADD   SP,0xFE
    0D24: 18       POP   A
    0D25: 53 2A    MOV   [ll+1],A
    0D27: 18       POP   A
    0D28: 53 29    MOV   [ll],A
(0250) 				time_displayed /= 10;
    0D2A: 50 00    MOV   A,0x0
    0D2C: 08       PUSH  A
    0D2D: 50 0A    MOV   A,0xA
    0D2F: 08       PUSH  A
    0D30: 51 69    MOV   A,[time_displayed]
    0D32: 08       PUSH  A
    0D33: 51 6A    MOV   A,[time_displayed+1]
    0D35: 08       PUSH  A
    0D36: 7C 16 80 LCALL 0x1680
    0D39: 18       POP   A
    0D3A: 53 6A    MOV   [time_displayed+1],A
    0D3C: 18       POP   A
    0D3D: 53 69    MOV   [time_displayed],A
    0D3F: 38 FE    ADD   SP,0xFE
(0251) 				break;
(0252) 			}
(0253) 			ss = time_displayed % 60;
    0D41: 50 00    MOV   A,0x0
    0D43: 08       PUSH  A
    0D44: 50 3C    MOV   A,0x3C
    0D46: 08       PUSH  A
    0D47: 51 69    MOV   A,[time_displayed]
    0D49: 08       PUSH  A
    0D4A: 51 6A    MOV   A,[time_displayed+1]
    0D4C: 08       PUSH  A
    0D4D: 7C 16 80 LCALL 0x1680
    0D50: 38 FE    ADD   SP,0xFE
    0D52: 18       POP   A
    0D53: 53 28    MOV   [ss+1],A
    0D55: 18       POP   A
    0D56: 53 27    MOV   [ss],A
(0254) 			time_displayed /= 60;
    0D58: 50 00    MOV   A,0x0
    0D5A: 08       PUSH  A
    0D5B: 50 3C    MOV   A,0x3C
    0D5D: 08       PUSH  A
    0D5E: 51 69    MOV   A,[time_displayed]
    0D60: 08       PUSH  A
    0D61: 51 6A    MOV   A,[time_displayed+1]
    0D63: 08       PUSH  A
    0D64: 7C 16 80 LCALL 0x1680
    0D67: 18       POP   A
    0D68: 53 6A    MOV   [time_displayed+1],A
    0D6A: 18       POP   A
    0D6B: 53 69    MOV   [time_displayed],A
    0D6D: 38 FE    ADD   SP,0xFE
(0255) 			mm = time_displayed % 60;
    0D6F: 50 00    MOV   A,0x0
    0D71: 08       PUSH  A
    0D72: 50 3C    MOV   A,0x3C
    0D74: 08       PUSH  A
    0D75: 51 69    MOV   A,[time_displayed]
    0D77: 08       PUSH  A
    0D78: 51 6A    MOV   A,[time_displayed+1]
    0D7A: 08       PUSH  A
    0D7B: 7C 16 80 LCALL 0x1680
    0D7E: 38 FE    ADD   SP,0xFE
    0D80: 18       POP   A
    0D81: 53 26    MOV   [mm+1],A
    0D83: 18       POP   A
    0D84: 53 25    MOV   [mm],A
(0256) 			time_displayed /= 60;
    0D86: 50 00    MOV   A,0x0
    0D88: 08       PUSH  A
    0D89: 50 3C    MOV   A,0x3C
    0D8B: 08       PUSH  A
    0D8C: 51 69    MOV   A,[time_displayed]
    0D8E: 08       PUSH  A
    0D8F: 51 6A    MOV   A,[time_displayed+1]
    0D91: 08       PUSH  A
    0D92: 7C 16 80 LCALL 0x1680
    0D95: 18       POP   A
    0D96: 53 6A    MOV   [time_displayed+1],A
    0D98: 18       POP   A
    0D99: 53 69    MOV   [time_displayed],A
    0D9B: 38 FE    ADD   SP,0xFE
(0257) 			hh = time_displayed;
    0D9D: 5F 24 6A MOV   [hh+1],[time_displayed+1]
    0DA0: 5F 23 69 MOV   [hh],[time_displayed]
(0258) 			
(0259) 			// display time
(0260) 			tmp_ptr = str_buf;
    0DA3: 55 55 56 MOV   [tmp_ptr+1],0x56
    0DA6: 55 54 00 MOV   [tmp_ptr],0x0
(0261) 			itoa(hh, tmp_ptr, 10);
    0DA9: 50 00    MOV   A,0x0
    0DAB: 08       PUSH  A
    0DAC: 50 0A    MOV   A,0xA
    0DAE: 08       PUSH  A
    0DAF: 51 54    MOV   A,[tmp_ptr]
    0DB1: 08       PUSH  A
    0DB2: 51 55    MOV   A,[tmp_ptr+1]
    0DB4: 08       PUSH  A
    0DB5: 51 23    MOV   A,[hh]
    0DB7: 08       PUSH  A
    0DB8: 51 24    MOV   A,[hh+1]
    0DBA: 08       PUSH  A
    0DBB: 95 A3    CALL  _itoa
(0262) 			tmp_ptr = tmp_ptr + strlen(tmp_ptr);
    0DBD: 51 54    MOV   A,[tmp_ptr]
    0DBF: 08       PUSH  A
    0DC0: 51 55    MOV   A,[tmp_ptr+1]
    0DC2: 08       PUSH  A
    0DC3: 7C 17 A0 LCALL _strlen
    0DC6: 38 F8    ADD   SP,0xF8
    0DC8: 51 36    MOV   A,[__r1]
    0DCA: 02 55    ADD   A,[tmp_ptr+1]
    0DCC: 53 55    MOV   [tmp_ptr+1],A
    0DCE: 51 37    MOV   A,[__r0]
    0DD0: 0A 54    ADC   A,[tmp_ptr]
    0DD2: 53 54    MOV   [tmp_ptr],A
(0263) 			*tmp_ptr++ = ':';
    0DD4: 5F 36 55 MOV   [__r1],[tmp_ptr+1]
    0DD7: 5F 37 54 MOV   [__r0],[tmp_ptr]
    0DDA: 51 36    MOV   A,[__r1]
    0DDC: 01 01    ADD   A,0x1
    0DDE: 53 55    MOV   [tmp_ptr+1],A
    0DE0: 51 37    MOV   A,[__r0]
    0DE2: 09 00    ADC   A,0x0
    0DE4: 53 54    MOV   [tmp_ptr],A
    0DE6: 50 3A    MOV   A,0x3A
    0DE8: 3F 36    MVI   [__r1],A
(0264) 			itoa(mm, tmp_ptr, 10);
    0DEA: 50 00    MOV   A,0x0
    0DEC: 08       PUSH  A
    0DED: 50 0A    MOV   A,0xA
    0DEF: 08       PUSH  A
    0DF0: 51 54    MOV   A,[tmp_ptr]
    0DF2: 08       PUSH  A
    0DF3: 51 55    MOV   A,[tmp_ptr+1]
    0DF5: 08       PUSH  A
    0DF6: 51 25    MOV   A,[mm]
    0DF8: 08       PUSH  A
    0DF9: 51 26    MOV   A,[mm+1]
    0DFB: 08       PUSH  A
    0DFC: 95 62    CALL  _itoa
(0265) 			tmp_ptr = tmp_ptr + strlen(tmp_ptr);
    0DFE: 51 54    MOV   A,[tmp_ptr]
    0E00: 08       PUSH  A
    0E01: 51 55    MOV   A,[tmp_ptr+1]
    0E03: 08       PUSH  A
    0E04: 7C 17 A0 LCALL _strlen
    0E07: 38 F8    ADD   SP,0xF8
    0E09: 51 36    MOV   A,[__r1]
    0E0B: 02 55    ADD   A,[tmp_ptr+1]
    0E0D: 53 55    MOV   [tmp_ptr+1],A
    0E0F: 51 37    MOV   A,[__r0]
    0E11: 0A 54    ADC   A,[tmp_ptr]
    0E13: 53 54    MOV   [tmp_ptr],A
(0266) 			*tmp_ptr++ = ':';
    0E15: 5F 36 55 MOV   [__r1],[tmp_ptr+1]
    0E18: 5F 37 54 MOV   [__r0],[tmp_ptr]
    0E1B: 51 36    MOV   A,[__r1]
    0E1D: 01 01    ADD   A,0x1
    0E1F: 53 55    MOV   [tmp_ptr+1],A
    0E21: 51 37    MOV   A,[__r0]
    0E23: 09 00    ADC   A,0x0
    0E25: 53 54    MOV   [tmp_ptr],A
    0E27: 50 3A    MOV   A,0x3A
    0E29: 3F 36    MVI   [__r1],A
(0267) 			itoa(ss, tmp_ptr, 10);
    0E2B: 50 00    MOV   A,0x0
    0E2D: 08       PUSH  A
    0E2E: 50 0A    MOV   A,0xA
    0E30: 08       PUSH  A
    0E31: 51 54    MOV   A,[tmp_ptr]
    0E33: 08       PUSH  A
    0E34: 51 55    MOV   A,[tmp_ptr+1]
    0E36: 08       PUSH  A
    0E37: 51 27    MOV   A,[ss]
    0E39: 08       PUSH  A
    0E3A: 51 28    MOV   A,[ss+1]
    0E3C: 08       PUSH  A
    0E3D: 95 21    CALL  _itoa
(0268) 			tmp_ptr = tmp_ptr + strlen(tmp_ptr);
    0E3F: 51 54    MOV   A,[tmp_ptr]
    0E41: 08       PUSH  A
    0E42: 51 55    MOV   A,[tmp_ptr+1]
    0E44: 08       PUSH  A
    0E45: 7C 17 A0 LCALL _strlen
    0E48: 38 F8    ADD   SP,0xF8
    0E4A: 51 36    MOV   A,[__r1]
    0E4C: 02 55    ADD   A,[tmp_ptr+1]
    0E4E: 53 55    MOV   [tmp_ptr+1],A
    0E50: 51 37    MOV   A,[__r0]
    0E52: 0A 54    ADC   A,[tmp_ptr]
    0E54: 53 54    MOV   [tmp_ptr],A
(0269) 			*tmp_ptr++ = ':';
    0E56: 5F 36 55 MOV   [__r1],[tmp_ptr+1]
    0E59: 5F 37 54 MOV   [__r0],[tmp_ptr]
    0E5C: 51 36    MOV   A,[__r1]
    0E5E: 01 01    ADD   A,0x1
    0E60: 53 55    MOV   [tmp_ptr+1],A
    0E62: 51 37    MOV   A,[__r0]
    0E64: 09 00    ADC   A,0x0
    0E66: 53 54    MOV   [tmp_ptr],A
    0E68: 50 3A    MOV   A,0x3A
    0E6A: 3F 36    MVI   [__r1],A
(0270) 			itoa(ll, tmp_ptr, 10);
    0E6C: 50 00    MOV   A,0x0
    0E6E: 08       PUSH  A
    0E6F: 50 0A    MOV   A,0xA
    0E71: 08       PUSH  A
    0E72: 51 54    MOV   A,[tmp_ptr]
    0E74: 08       PUSH  A
    0E75: 51 55    MOV   A,[tmp_ptr+1]
    0E77: 08       PUSH  A
    0E78: 51 29    MOV   A,[ll]
    0E7A: 08       PUSH  A
    0E7B: 51 2A    MOV   A,[ll+1]
    0E7D: 08       PUSH  A
    0E7E: 94 E0    CALL  _itoa
(0271) 			LCD_line_print(str_buf, LCD_LINE_1);
    0E80: 50 00    MOV   A,0x0
    0E82: 08       PUSH  A
    0E83: 50 00    MOV   A,0x0
    0E85: 08       PUSH  A
    0E86: 50 56    MOV   A,0x56
    0E88: 08       PUSH  A
    0E89: 95 E3    CALL  _LCD_line_print
    0E8B: 38 F7    ADD   SP,0xF7
(0272) 			
(0273) 			
(0274) 			switch(cs){
    0E8D: 51 00    MOV   A,[cs|pb_stopped_transitions|buffer]
    0E8F: 54 0B    MOV   [X+11],A
    0E91: 56 0A 00 MOV   [X+10],0x0
    0E94: 3D 0A 00 CMP   [X+10],0x0
    0E97: B0 06    JNZ   0x0E9E
    0E99: 3D 0B 00 CMP   [X+11],0x0
    0E9C: A0 21    JZ    0x0EBE
    0E9E: 3D 0A 00 CMP   [X+10],0x0
    0EA1: B0 06    JNZ   0x0EA8
    0EA3: 3D 0B 01 CMP   [X+11],0x1
    0EA6: A0 35    JZ    0x0EDC
    0EA8: 3D 0A 00 CMP   [X+10],0x0
    0EAB: B0 06    JNZ   0x0EB2
    0EAD: 3D 0B 02 CMP   [X+11],0x2
    0EB0: A0 49    JZ    0x0EFA
    0EB2: 3D 0A 00 CMP   [X+10],0x0
    0EB5: B0 06    JNZ   0x0EBC
    0EB7: 3D 0B 03 CMP   [X+11],0x3
    0EBA: A0 9E    JZ    0x0F59
    0EBC: 84 9B    JMP   0x1358
(0275) 			case pb_stopped:
(0276) 				cstrcpy(str_buf, "PB Mode - Stop");
    0EBE: 50 02    MOV   A,0x2
    0EC0: 08       PUSH  A
    0EC1: 50 75    MOV   A,0x75
    0EC3: 08       PUSH  A
    0EC4: 50 00    MOV   A,0x0
    0EC6: 08       PUSH  A
    0EC7: 50 56    MOV   A,0x56
    0EC9: 08       PUSH  A
    0ECA: 7C 17 73 LCALL _cstrcpy
(0277) 				LCD_line_print(str_buf, LCD_LINE_2);
    0ECD: 50 01    MOV   A,0x1
    0ECF: 08       PUSH  A
    0ED0: 50 00    MOV   A,0x0
    0ED2: 08       PUSH  A
    0ED3: 50 56    MOV   A,0x56
    0ED5: 08       PUSH  A
    0ED6: 95 96    CALL  _LCD_line_print
    0ED8: 38 F9    ADD   SP,0xF9
(0278) 				break;
    0EDA: 84 7D    JMP   0x1358
(0279) 			case pb_running:
(0280) 				cstrcpy(str_buf, "PB Mode - Run");
    0EDC: 50 02    MOV   A,0x2
    0EDE: 08       PUSH  A
    0EDF: 50 67    MOV   A,0x67
    0EE1: 08       PUSH  A
    0EE2: 50 00    MOV   A,0x0
    0EE4: 08       PUSH  A
    0EE5: 50 56    MOV   A,0x56
    0EE7: 08       PUSH  A
    0EE8: 7C 17 73 LCALL _cstrcpy
(0281) 				LCD_line_print(str_buf, LCD_LINE_2);
    0EEB: 50 01    MOV   A,0x1
    0EED: 08       PUSH  A
    0EEE: 50 00    MOV   A,0x0
    0EF0: 08       PUSH  A
    0EF1: 50 56    MOV   A,0x56
    0EF3: 08       PUSH  A
    0EF4: 95 78    CALL  _LCD_line_print
    0EF6: 38 F9    ADD   SP,0xF9
(0282) 				break;
    0EF8: 84 5F    JMP   0x1358
(0283) 			case mic_stopped:
(0284) 				// display mic level
(0285) 				tmp_ptr = tmp_ptr + strlen(tmp_ptr);
    0EFA: 51 54    MOV   A,[tmp_ptr]
    0EFC: 08       PUSH  A
    0EFD: 51 55    MOV   A,[tmp_ptr+1]
    0EFF: 08       PUSH  A
    0F00: 7C 17 A0 LCALL _strlen
    0F03: 51 36    MOV   A,[__r1]
    0F05: 02 55    ADD   A,[tmp_ptr+1]
    0F07: 53 55    MOV   [tmp_ptr+1],A
    0F09: 51 37    MOV   A,[__r0]
    0F0B: 0A 54    ADC   A,[tmp_ptr]
    0F0D: 53 54    MOV   [tmp_ptr],A
(0286) 				*tmp_ptr++ = ' ';
    0F0F: 5F 36 55 MOV   [__r1],[tmp_ptr+1]
    0F12: 5F 37 54 MOV   [__r0],[tmp_ptr]
    0F15: 51 36    MOV   A,[__r1]
    0F17: 01 01    ADD   A,0x1
    0F19: 53 55    MOV   [tmp_ptr+1],A
    0F1B: 51 37    MOV   A,[__r0]
    0F1D: 09 00    ADC   A,0x0
    0F1F: 53 54    MOV   [tmp_ptr],A
    0F21: 50 20    MOV   A,0x20
    0F23: 3F 36    MVI   [__r1],A
(0287) 				itoa(MicValue, tmp_ptr, 10);
    0F25: 50 00    MOV   A,0x0
    0F27: 08       PUSH  A
    0F28: 50 0A    MOV   A,0xA
    0F2A: 08       PUSH  A
    0F2B: 51 54    MOV   A,[tmp_ptr]
    0F2D: 08       PUSH  A
    0F2E: 51 55    MOV   A,[tmp_ptr+1]
    0F30: 08       PUSH  A
    0F31: 52 04    MOV   A,[X+4]
    0F33: 08       PUSH  A
    0F34: 52 05    MOV   A,[X+5]
    0F36: 08       PUSH  A
    0F37: 94 27    CALL  _itoa
    0F39: 38 F8    ADD   SP,0xF8
(0288) 
(0289) 				cstrcpy(str_buf, "Mic Mode - Stop");
    0F3B: 50 02    MOV   A,0x2
    0F3D: 08       PUSH  A
    0F3E: 50 57    MOV   A,0x57
    0F40: 08       PUSH  A
    0F41: 50 00    MOV   A,0x0
    0F43: 08       PUSH  A
    0F44: 50 56    MOV   A,0x56
    0F46: 08       PUSH  A
    0F47: 7C 17 73 LCALL _cstrcpy
(0290) 				LCD_line_print(str_buf, LCD_LINE_2);
    0F4A: 50 01    MOV   A,0x1
    0F4C: 08       PUSH  A
    0F4D: 50 00    MOV   A,0x0
    0F4F: 08       PUSH  A
    0F50: 50 56    MOV   A,0x56
    0F52: 08       PUSH  A
    0F53: 95 19    CALL  _LCD_line_print
    0F55: 38 F9    ADD   SP,0xF9
(0291) 				break;
    0F57: 84 00    JMP   0x1358
(0292) 			case mic_running:
(0293) 				// display mic level
(0294) 				tmp_ptr = tmp_ptr + strlen(tmp_ptr);
    0F59: 51 54    MOV   A,[tmp_ptr]
    0F5B: 08       PUSH  A
    0F5C: 51 55    MOV   A,[tmp_ptr+1]
    0F5E: 08       PUSH  A
    0F5F: 7C 17 A0 LCALL _strlen
    0F62: 51 36    MOV   A,[__r1]
    0F64: 02 55    ADD   A,[tmp_ptr+1]
    0F66: 53 55    MOV   [tmp_ptr+1],A
    0F68: 51 37    MOV   A,[__r0]
    0F6A: 0A 54    ADC   A,[tmp_ptr]
    0F6C: 53 54    MOV   [tmp_ptr],A
(0295) 				*tmp_ptr++ = ' ';
    0F6E: 5F 36 55 MOV   [__r1],[tmp_ptr+1]
    0F71: 5F 37 54 MOV   [__r0],[tmp_ptr]
    0F74: 51 36    MOV   A,[__r1]
    0F76: 01 01    ADD   A,0x1
    0F78: 53 55    MOV   [tmp_ptr+1],A
    0F7A: 51 37    MOV   A,[__r0]
    0F7C: 09 00    ADC   A,0x0
    0F7E: 53 54    MOV   [tmp_ptr],A
    0F80: 50 20    MOV   A,0x20
    0F82: 3F 36    MVI   [__r1],A
(0296) 				itoa(MicValue, tmp_ptr, 10);
    0F84: 50 00    MOV   A,0x0
    0F86: 08       PUSH  A
    0F87: 50 0A    MOV   A,0xA
    0F89: 08       PUSH  A
    0F8A: 51 54    MOV   A,[tmp_ptr]
    0F8C: 08       PUSH  A
    0F8D: 51 55    MOV   A,[tmp_ptr+1]
    0F8F: 08       PUSH  A
    0F90: 52 04    MOV   A,[X+4]
    0F92: 08       PUSH  A
    0F93: 52 05    MOV   A,[X+5]
    0F95: 08       PUSH  A
    0F96: 93 C8    CALL  _itoa
    0F98: 38 F8    ADD   SP,0xF8
(0297) 
(0298) 				cstrcpy(str_buf, "Mic Mode - Run");
    0F9A: 50 02    MOV   A,0x2
    0F9C: 08       PUSH  A
    0F9D: 50 48    MOV   A,0x48
    0F9F: 08       PUSH  A
    0FA0: 50 00    MOV   A,0x0
    0FA2: 08       PUSH  A
    0FA3: 50 56    MOV   A,0x56
    0FA5: 08       PUSH  A
    0FA6: 7C 17 73 LCALL _cstrcpy
(0299) 				LCD_line_print(str_buf, LCD_LINE_2);
    0FA9: 50 01    MOV   A,0x1
    0FAB: 08       PUSH  A
    0FAC: 50 00    MOV   A,0x0
    0FAE: 08       PUSH  A
    0FAF: 50 56    MOV   A,0x56
    0FB1: 08       PUSH  A
    0FB2: 94 BA    CALL  _LCD_line_print
    0FB4: 38 F9    ADD   SP,0xF9
(0300) 				break;
(0301) 			}
(0302) 			break;
    0FB6: 83 A1    JMP   0x1358
(0303) 		case statistic:
(0304) 			tmp_ptr = str_buf;
    0FB8: 55 55 56 MOV   [tmp_ptr+1],0x56
    0FBB: 55 54 00 MOV   [tmp_ptr],0x0
(0305) 			switch(stat_show) {
    0FBE: 51 2F    MOV   A,[stat_show]
    0FC0: 54 0D    MOV   [X+13],A
    0FC2: 56 0C 00 MOV   [X+12],0x0
    0FC5: 3D 0C 00 CMP   [X+12],0x0
    0FC8: B0 06    JNZ   0x0FCF
    0FCA: 3D 0D 00 CMP   [X+13],0x0
    0FCD: A0 17    JZ    0x0FE5
    0FCF: 3D 0C 00 CMP   [X+12],0x0
    0FD2: B0 06    JNZ   0x0FD9
    0FD4: 3D 0D 01 CMP   [X+13],0x1
    0FD7: A0 86    JZ    0x105E
    0FD9: 3D 0C 00 CMP   [X+12],0x0
    0FDC: B0 06    JNZ   0x0FE3
    0FDE: 3D 0D 02 CMP   [X+13],0x2
    0FE1: A0 FA    JZ    0x10DC
    0FE3: 81 79    JMP   0x115D
(0306) 			case 0:	// Average
(0307) 				cstrcpy(tmp_ptr, "Avg");
    0FE5: 50 02    MOV   A,0x2
    0FE7: 08       PUSH  A
    0FE8: 50 44    MOV   A,0x44
    0FEA: 08       PUSH  A
    0FEB: 51 54    MOV   A,[tmp_ptr]
    0FED: 08       PUSH  A
    0FEE: 51 55    MOV   A,[tmp_ptr+1]
    0FF0: 08       PUSH  A
    0FF1: 7C 17 73 LCALL _cstrcpy
(0308) 				tmp_ptr = tmp_ptr + strlen(tmp_ptr);
    0FF4: 51 54    MOV   A,[tmp_ptr]
    0FF6: 08       PUSH  A
    0FF7: 51 55    MOV   A,[tmp_ptr+1]
    0FF9: 08       PUSH  A
    0FFA: 7C 17 A0 LCALL _strlen
    0FFD: 38 FA    ADD   SP,0xFA
    0FFF: 51 36    MOV   A,[__r1]
    1001: 02 55    ADD   A,[tmp_ptr+1]
    1003: 53 55    MOV   [tmp_ptr+1],A
    1005: 51 37    MOV   A,[__r0]
    1007: 0A 54    ADC   A,[tmp_ptr]
    1009: 53 54    MOV   [tmp_ptr],A
(0309) 				*tmp_ptr++ = '-';
    100B: 5F 36 55 MOV   [__r1],[tmp_ptr+1]
    100E: 5F 37 54 MOV   [__r0],[tmp_ptr]
    1011: 51 36    MOV   A,[__r1]
    1013: 01 01    ADD   A,0x1
    1015: 53 55    MOV   [tmp_ptr+1],A
    1017: 51 37    MOV   A,[__r0]
    1019: 09 00    ADC   A,0x0
    101B: 53 54    MOV   [tmp_ptr],A
    101D: 50 2D    MOV   A,0x2D
    101F: 3F 36    MVI   [__r1],A
(0310) 				
(0311) 				stat_result = 0;
    1021: 55 30 00 MOV   [stat_result],0x0
(0312) 				for(i = 0; i<10; i++) {
    1024: 56 03 00 MOV   [X+3],0x0
    1027: 56 02 00 MOV   [X+2],0x0
(0313) 					stat_result += time_record[i];
    102A: 52 03    MOV   A,[X+3]
    102C: 64       ASL   A
    102D: 01 0F    ADD   A,0xF
    102F: 53 36    MOV   [__r1],A
    1031: 3E 36    MVI   A,[__r1]
    1033: 3E 36    MVI   A,[__r1]
    1035: 53 36    MOV   [__r1],A
    1037: 51 30    MOV   A,[stat_result]
    1039: 02 36    ADD   A,[__r1]
    103B: 53 30    MOV   [stat_result],A
(0314) 				}
    103D: 77 03    INC   [X+3]
    103F: 0F 02 00 ADC   [X+2],0x0
    1042: 52 03    MOV   A,[X+3]
    1044: 11 0A    SUB   A,0xA
    1046: 52 02    MOV   A,[X+2]
    1048: 31 80    XOR   A,0x80
    104A: 19 80    SBB   A,0x80
    104C: CF DD    JC    0x102A
(0315) 				stat_result /= 10;
    104E: 50 0A    MOV   A,0xA
    1050: 08       PUSH  A
    1051: 51 30    MOV   A,[stat_result]
    1053: 08       PUSH  A
    1054: 7C 16 87 LCALL 0x1687
    1057: 18       POP   A
    1058: 53 30    MOV   [stat_result],A
    105A: 38 FF    ADD   SP,0xFF
(0316) 				break;
    105C: 81 00    JMP   0x115D
(0317) 			case 1: // longest
(0318) 				cstrcpy(tmp_ptr, "Long");
    105E: 50 02    MOV   A,0x2
    1060: 08       PUSH  A
    1061: 50 3F    MOV   A,0x3F
    1063: 08       PUSH  A
    1064: 51 54    MOV   A,[tmp_ptr]
    1066: 08       PUSH  A
    1067: 51 55    MOV   A,[tmp_ptr+1]
    1069: 08       PUSH  A
    106A: 7C 17 73 LCALL _cstrcpy
(0319) 				tmp_ptr = tmp_ptr + strlen(tmp_ptr);
    106D: 51 54    MOV   A,[tmp_ptr]
    106F: 08       PUSH  A
    1070: 51 55    MOV   A,[tmp_ptr+1]
    1072: 08       PUSH  A
    1073: 7C 17 A0 LCALL _strlen
    1076: 38 FA    ADD   SP,0xFA
    1078: 51 36    MOV   A,[__r1]
    107A: 02 55    ADD   A,[tmp_ptr+1]
    107C: 53 55    MOV   [tmp_ptr+1],A
    107E: 51 37    MOV   A,[__r0]
    1080: 0A 54    ADC   A,[tmp_ptr]
    1082: 53 54    MOV   [tmp_ptr],A
(0320) 				*tmp_ptr++ = '-';
    1084: 5F 36 55 MOV   [__r1],[tmp_ptr+1]
    1087: 5F 37 54 MOV   [__r0],[tmp_ptr]
    108A: 51 36    MOV   A,[__r1]
    108C: 01 01    ADD   A,0x1
    108E: 53 55    MOV   [tmp_ptr+1],A
    1090: 51 37    MOV   A,[__r0]
    1092: 09 00    ADC   A,0x0
    1094: 53 54    MOV   [tmp_ptr],A
    1096: 50 2D    MOV   A,0x2D
    1098: 3F 36    MVI   [__r1],A
(0321) 
(0322) 				stat_result = 0;
    109A: 55 30 00 MOV   [stat_result],0x0
(0323) 				for(i = 0; i<10; i++) {
    109D: 56 03 00 MOV   [X+3],0x0
    10A0: 56 02 00 MOV   [X+2],0x0
(0324) 					if(stat_result < time_record[i]) {
    10A3: 52 03    MOV   A,[X+3]
    10A5: 64       ASL   A
    10A6: 01 0F    ADD   A,0xF
    10A8: 53 36    MOV   [__r1],A
    10AA: 3E 36    MVI   A,[__r1]
    10AC: 53 37    MOV   [__r0],A
    10AE: 3E 36    MVI   A,[__r1]
    10B0: 53 36    MOV   [__r1],A
    10B2: 51 30    MOV   A,[stat_result]
    10B4: 12 36    SUB   A,[__r1]
    10B6: 50 00    MOV   A,0x0
    10B8: 1A 37    SBB   A,[__r0]
    10BA: D0 0E    JNC   0x10C9
(0325) 						stat_result = time_record[i];
    10BC: 52 03    MOV   A,[X+3]
    10BE: 64       ASL   A
    10BF: 01 0F    ADD   A,0xF
    10C1: 53 36    MOV   [__r1],A
    10C3: 3E 36    MVI   A,[__r1]
    10C5: 3E 36    MVI   A,[__r1]
    10C7: 53 30    MOV   [stat_result],A
(0326) 					}
(0327) 				}
    10C9: 77 03    INC   [X+3]
    10CB: 0F 02 00 ADC   [X+2],0x0
    10CE: 52 03    MOV   A,[X+3]
    10D0: 11 0A    SUB   A,0xA
    10D2: 52 02    MOV   A,[X+2]
    10D4: 31 80    XOR   A,0x80
    10D6: 19 80    SBB   A,0x80
    10D8: CF CA    JC    0x10A3
(0328) 				break;
    10DA: 80 82    JMP   0x115D
(0329) 			case 2:	// shortest
(0330) 				cstrcpy(tmp_ptr, "Short");
    10DC: 50 02    MOV   A,0x2
    10DE: 08       PUSH  A
    10DF: 50 39    MOV   A,0x39
    10E1: 08       PUSH  A
    10E2: 51 54    MOV   A,[tmp_ptr]
    10E4: 08       PUSH  A
    10E5: 51 55    MOV   A,[tmp_ptr+1]
    10E7: 08       PUSH  A
    10E8: 7C 17 73 LCALL _cstrcpy
(0331) 				tmp_ptr = tmp_ptr + strlen(tmp_ptr);
    10EB: 51 54    MOV   A,[tmp_ptr]
    10ED: 08       PUSH  A
    10EE: 51 55    MOV   A,[tmp_ptr+1]
    10F0: 08       PUSH  A
    10F1: 7C 17 A0 LCALL _strlen
    10F4: 38 FA    ADD   SP,0xFA
    10F6: 51 36    MOV   A,[__r1]
    10F8: 02 55    ADD   A,[tmp_ptr+1]
    10FA: 53 55    MOV   [tmp_ptr+1],A
    10FC: 51 37    MOV   A,[__r0]
    10FE: 0A 54    ADC   A,[tmp_ptr]
    1100: 53 54    MOV   [tmp_ptr],A
(0332) 				*tmp_ptr++ = '-';
    1102: 5F 36 55 MOV   [__r1],[tmp_ptr+1]
    1105: 5F 37 54 MOV   [__r0],[tmp_ptr]
    1108: 51 36    MOV   A,[__r1]
    110A: 01 01    ADD   A,0x1
    110C: 53 55    MOV   [tmp_ptr+1],A
    110E: 51 37    MOV   A,[__r0]
    1110: 09 00    ADC   A,0x0
    1112: 53 54    MOV   [tmp_ptr],A
    1114: 50 2D    MOV   A,0x2D
    1116: 3F 36    MVI   [__r1],A
(0333) 				
(0334) 				stat_result = time_record[0];
    1118: 5F 37 10 MOV   [__r0],[time_record+1]
    111B: 5F 30 37 MOV   [stat_result],[__r0]
(0335) 				for(i = 0; i<10; i++) {
    111E: 56 03 00 MOV   [X+3],0x0
    1121: 56 02 00 MOV   [X+2],0x0
(0336) 					if(stat_result > time_record[i]) {
    1124: 52 03    MOV   A,[X+3]
    1126: 64       ASL   A
    1127: 01 0F    ADD   A,0xF
    1129: 53 36    MOV   [__r1],A
    112B: 3E 36    MVI   A,[__r1]
    112D: 53 37    MOV   [__r0],A
    112F: 3E 36    MVI   A,[__r1]
    1131: 5F 34 30 MOV   [__r3],[stat_result]
    1134: 55 35 00 MOV   [__r2],0x0
    1137: 12 34    SUB   A,[__r3]
    1139: 51 37    MOV   A,[__r0]
    113B: 1A 35    SBB   A,[__r2]
    113D: D0 0E    JNC   0x114C
(0337) 						stat_result = time_record[i];
    113F: 52 03    MOV   A,[X+3]
    1141: 64       ASL   A
    1142: 01 0F    ADD   A,0xF
    1144: 53 36    MOV   [__r1],A
    1146: 3E 36    MVI   A,[__r1]
    1148: 3E 36    MVI   A,[__r1]
    114A: 53 30    MOV   [stat_result],A
(0338) 					}
(0339) 				}
    114C: 77 03    INC   [X+3]
    114E: 0F 02 00 ADC   [X+2],0x0
    1151: 52 03    MOV   A,[X+3]
    1153: 11 0A    SUB   A,0xA
    1155: 52 02    MOV   A,[X+2]
    1157: 31 80    XOR   A,0x80
    1159: 19 80    SBB   A,0x80
    115B: CF C8    JC    0x1124
(0340) 				break;
(0341) 			}
(0342) 			time_displayed = stat_result;
    115D: 5F 36 30 MOV   [__r1],[stat_result]
    1160: 5F 6A 36 MOV   [time_displayed+1],[__r1]
    1163: 55 69 00 MOV   [time_displayed],0x0
(0343) 			ll = 0;
    1166: 55 2A 00 MOV   [ll+1],0x0
    1169: 55 29 00 MOV   [ll],0x0
(0344) 			ss = time_displayed % 60;
    116C: 50 00    MOV   A,0x0
    116E: 08       PUSH  A
    116F: 50 3C    MOV   A,0x3C
    1171: 08       PUSH  A
    1172: 51 69    MOV   A,[time_displayed]
    1174: 08       PUSH  A
    1175: 51 6A    MOV   A,[time_displayed+1]
    1177: 08       PUSH  A
    1178: 7C 16 80 LCALL 0x1680
    117B: 38 FE    ADD   SP,0xFE
    117D: 18       POP   A
    117E: 53 28    MOV   [ss+1],A
    1180: 18       POP   A
    1181: 53 27    MOV   [ss],A
(0345) 			time_displayed /= 60;
    1183: 50 00    MOV   A,0x0
    1185: 08       PUSH  A
    1186: 50 3C    MOV   A,0x3C
    1188: 08       PUSH  A
    1189: 51 69    MOV   A,[time_displayed]
    118B: 08       PUSH  A
    118C: 51 6A    MOV   A,[time_displayed+1]
    118E: 08       PUSH  A
    118F: 7C 16 80 LCALL 0x1680
    1192: 18       POP   A
    1193: 53 6A    MOV   [time_displayed+1],A
    1195: 18       POP   A
    1196: 53 69    MOV   [time_displayed],A
    1198: 38 FE    ADD   SP,0xFE
(0346) 			mm = time_displayed % 60;
    119A: 50 00    MOV   A,0x0
    119C: 08       PUSH  A
    119D: 50 3C    MOV   A,0x3C
    119F: 08       PUSH  A
    11A0: 51 69    MOV   A,[time_displayed]
    11A2: 08       PUSH  A
    11A3: 51 6A    MOV   A,[time_displayed+1]
    11A5: 08       PUSH  A
    11A6: 7C 16 80 LCALL 0x1680
    11A9: 38 FE    ADD   SP,0xFE
    11AB: 18       POP   A
    11AC: 53 26    MOV   [mm+1],A
    11AE: 18       POP   A
    11AF: 53 25    MOV   [mm],A
(0347) 			time_displayed /= 60;
    11B1: 50 00    MOV   A,0x0
    11B3: 08       PUSH  A
    11B4: 50 3C    MOV   A,0x3C
    11B6: 08       PUSH  A
    11B7: 51 69    MOV   A,[time_displayed]
    11B9: 08       PUSH  A
    11BA: 51 6A    MOV   A,[time_displayed+1]
    11BC: 08       PUSH  A
    11BD: 7C 16 80 LCALL 0x1680
    11C0: 18       POP   A
    11C1: 53 6A    MOV   [time_displayed+1],A
    11C3: 18       POP   A
    11C4: 53 69    MOV   [time_displayed],A
    11C6: 38 FE    ADD   SP,0xFE
(0348) 			hh = time_displayed;
    11C8: 5F 24 6A MOV   [hh+1],[time_displayed+1]
    11CB: 5F 23 69 MOV   [hh],[time_displayed]
(0349) 
(0350) 			// display time
(0351) 			itoa(hh, tmp_ptr, 10);
    11CE: 50 00    MOV   A,0x0
    11D0: 08       PUSH  A
    11D1: 50 0A    MOV   A,0xA
    11D3: 08       PUSH  A
    11D4: 51 54    MOV   A,[tmp_ptr]
    11D6: 08       PUSH  A
    11D7: 51 55    MOV   A,[tmp_ptr+1]
    11D9: 08       PUSH  A
    11DA: 51 23    MOV   A,[hh]
    11DC: 08       PUSH  A
    11DD: 51 24    MOV   A,[hh+1]
    11DF: 08       PUSH  A
    11E0: 91 7E    CALL  _itoa
(0352) 			tmp_ptr = tmp_ptr + strlen(tmp_ptr);
    11E2: 51 54    MOV   A,[tmp_ptr]
    11E4: 08       PUSH  A
    11E5: 51 55    MOV   A,[tmp_ptr+1]
    11E7: 08       PUSH  A
    11E8: 7C 17 A0 LCALL _strlen
    11EB: 38 F8    ADD   SP,0xF8
    11ED: 51 36    MOV   A,[__r1]
    11EF: 02 55    ADD   A,[tmp_ptr+1]
    11F1: 53 55    MOV   [tmp_ptr+1],A
    11F3: 51 37    MOV   A,[__r0]
    11F5: 0A 54    ADC   A,[tmp_ptr]
    11F7: 53 54    MOV   [tmp_ptr],A
(0353) 			*tmp_ptr++ = ':';
    11F9: 5F 36 55 MOV   [__r1],[tmp_ptr+1]
    11FC: 5F 37 54 MOV   [__r0],[tmp_ptr]
    11FF: 51 36    MOV   A,[__r1]
    1201: 01 01    ADD   A,0x1
    1203: 53 55    MOV   [tmp_ptr+1],A
    1205: 51 37    MOV   A,[__r0]
    1207: 09 00    ADC   A,0x0
    1209: 53 54    MOV   [tmp_ptr],A
    120B: 50 3A    MOV   A,0x3A
    120D: 3F 36    MVI   [__r1],A
(0354) 			itoa(mm, tmp_ptr, 10);
    120F: 50 00    MOV   A,0x0
    1211: 08       PUSH  A
    1212: 50 0A    MOV   A,0xA
    1214: 08       PUSH  A
    1215: 51 54    MOV   A,[tmp_ptr]
    1217: 08       PUSH  A
    1218: 51 55    MOV   A,[tmp_ptr+1]
    121A: 08       PUSH  A
    121B: 51 25    MOV   A,[mm]
    121D: 08       PUSH  A
    121E: 51 26    MOV   A,[mm+1]
    1220: 08       PUSH  A
    1221: 91 3D    CALL  _itoa
(0355) 			tmp_ptr = tmp_ptr + strlen(tmp_ptr);
    1223: 51 54    MOV   A,[tmp_ptr]
    1225: 08       PUSH  A
    1226: 51 55    MOV   A,[tmp_ptr+1]
    1228: 08       PUSH  A
    1229: 7C 17 A0 LCALL _strlen
    122C: 38 F8    ADD   SP,0xF8
    122E: 51 36    MOV   A,[__r1]
    1230: 02 55    ADD   A,[tmp_ptr+1]
    1232: 53 55    MOV   [tmp_ptr+1],A
    1234: 51 37    MOV   A,[__r0]
    1236: 0A 54    ADC   A,[tmp_ptr]
    1238: 53 54    MOV   [tmp_ptr],A
(0356) 			*tmp_ptr++ = ':';
    123A: 5F 36 55 MOV   [__r1],[tmp_ptr+1]
    123D: 5F 37 54 MOV   [__r0],[tmp_ptr]
    1240: 51 36    MOV   A,[__r1]
    1242: 01 01    ADD   A,0x1
    1244: 53 55    MOV   [tmp_ptr+1],A
    1246: 51 37    MOV   A,[__r0]
    1248: 09 00    ADC   A,0x0
    124A: 53 54    MOV   [tmp_ptr],A
    124C: 50 3A    MOV   A,0x3A
    124E: 3F 36    MVI   [__r1],A
(0357) 			itoa(ss, tmp_ptr, 10);
    1250: 50 00    MOV   A,0x0
    1252: 08       PUSH  A
    1253: 50 0A    MOV   A,0xA
    1255: 08       PUSH  A
    1256: 51 54    MOV   A,[tmp_ptr]
    1258: 08       PUSH  A
    1259: 51 55    MOV   A,[tmp_ptr+1]
    125B: 08       PUSH  A
    125C: 51 27    MOV   A,[ss]
    125E: 08       PUSH  A
    125F: 51 28    MOV   A,[ss+1]
    1261: 08       PUSH  A
    1262: 90 FC    CALL  _itoa
(0358) 			LCD_line_print(str_buf, LCD_LINE_1);
    1264: 50 00    MOV   A,0x0
    1266: 08       PUSH  A
    1267: 50 00    MOV   A,0x0
    1269: 08       PUSH  A
    126A: 50 56    MOV   A,0x56
    126C: 08       PUSH  A
    126D: 91 FF    CALL  _LCD_line_print
    126F: 38 F7    ADD   SP,0xF7
(0359) 			
(0360) 			cstrcpy(str_buf, "Memory");
    1271: 50 02    MOV   A,0x2
    1273: 08       PUSH  A
    1274: 50 32    MOV   A,0x32
    1276: 08       PUSH  A
    1277: 50 00    MOV   A,0x0
    1279: 08       PUSH  A
    127A: 50 56    MOV   A,0x56
    127C: 08       PUSH  A
    127D: 7C 17 73 LCALL _cstrcpy
(0361) 			LCD_line_print(str_buf, LCD_LINE_2);
    1280: 50 01    MOV   A,0x1
    1282: 08       PUSH  A
    1283: 50 00    MOV   A,0x0
    1285: 08       PUSH  A
    1286: 50 56    MOV   A,0x56
    1288: 08       PUSH  A
    1289: 91 E3    CALL  _LCD_line_print
    128B: 38 F9    ADD   SP,0xF9
(0362) 			break;
    128D: 80 CA    JMP   0x1358
(0363) 		case accuracy:
(0364) 			switch(TimeAccuracy) {
    128F: 51 2E    MOV   A,[TimeAccuracy]
    1291: 54 0F    MOV   [X+15],A
    1293: 56 0E 00 MOV   [X+14],0x0
    1296: 3D 0E 00 CMP   [X+14],0x0
    1299: B0 06    JNZ   0x12A0
    129B: 3D 0F 00 CMP   [X+15],0x0
    129E: A0 17    JZ    0x12B6
    12A0: 3D 0E 00 CMP   [X+14],0x0
    12A3: B0 06    JNZ   0x12AA
    12A5: 3D 0F 01 CMP   [X+15],0x1
    12A8: A0 20    JZ    0x12C9
    12AA: 3D 0E 00 CMP   [X+14],0x0
    12AD: B0 06    JNZ   0x12B4
    12AF: 3D 0F 02 CMP   [X+15],0x2
    12B2: A0 29    JZ    0x12DC
    12B4: 80 38    JMP   0x12ED
(0365) 			case 0:
(0366) 				cstrcpy(str_buf, "1 Sec");
    12B6: 50 02    MOV   A,0x2
    12B8: 08       PUSH  A
    12B9: 50 2C    MOV   A,0x2C
    12BB: 08       PUSH  A
    12BC: 50 00    MOV   A,0x0
    12BE: 08       PUSH  A
    12BF: 50 56    MOV   A,0x56
    12C1: 08       PUSH  A
    12C2: 7C 17 73 LCALL _cstrcpy
    12C5: 38 FC    ADD   SP,0xFC
(0367) 				break;
    12C7: 80 25    JMP   0x12ED
(0368) 			case 1:
(0369) 				cstrcpy(str_buf, "1/2 Sec");
    12C9: 50 02    MOV   A,0x2
    12CB: 08       PUSH  A
    12CC: 50 24    MOV   A,0x24
    12CE: 08       PUSH  A
    12CF: 50 00    MOV   A,0x0
    12D1: 08       PUSH  A
    12D2: 50 56    MOV   A,0x56
    12D4: 08       PUSH  A
    12D5: 7C 17 73 LCALL _cstrcpy
    12D8: 38 FC    ADD   SP,0xFC
(0370) 				break;
    12DA: 80 12    JMP   0x12ED
(0371) 			case 2:
(0372) 				cstrcpy(str_buf, "1/10 Sec");
    12DC: 50 02    MOV   A,0x2
    12DE: 08       PUSH  A
    12DF: 50 1B    MOV   A,0x1B
    12E1: 08       PUSH  A
    12E2: 50 00    MOV   A,0x0
    12E4: 08       PUSH  A
    12E5: 50 56    MOV   A,0x56
    12E7: 08       PUSH  A
    12E8: 7C 17 73 LCALL _cstrcpy
    12EB: 38 FC    ADD   SP,0xFC
(0373) 				break;
(0374) 			}
(0375) 			LCD_line_print(str_buf, LCD_LINE_1);
    12ED: 50 00    MOV   A,0x0
    12EF: 08       PUSH  A
    12F0: 50 00    MOV   A,0x0
    12F2: 08       PUSH  A
    12F3: 50 56    MOV   A,0x56
    12F5: 08       PUSH  A
    12F6: 91 76    CALL  _LCD_line_print
    12F8: 38 FD    ADD   SP,0xFD
(0376) 				
(0377) 			cstrcpy(str_buf, "Accu Setting");
    12FA: 50 02    MOV   A,0x2
    12FC: 08       PUSH  A
    12FD: 50 0E    MOV   A,0xE
    12FF: 08       PUSH  A
    1300: 50 00    MOV   A,0x0
    1302: 08       PUSH  A
    1303: 50 56    MOV   A,0x56
    1305: 08       PUSH  A
    1306: 7C 17 73 LCALL _cstrcpy
(0378) 			LCD_line_print(str_buf, LCD_LINE_2);
    1309: 50 01    MOV   A,0x1
    130B: 08       PUSH  A
    130C: 50 00    MOV   A,0x0
    130E: 08       PUSH  A
    130F: 50 56    MOV   A,0x56
    1311: 08       PUSH  A
    1312: 91 5A    CALL  _LCD_line_print
    1314: 38 F9    ADD   SP,0xF9
(0379) 			break;
    1316: 80 41    JMP   0x1358
(0380) 		case sensitivity:
(0381) 			itoa(MicSensitivity, str_buf, 10);
    1318: 50 00    MOV   A,0x0
    131A: 08       PUSH  A
    131B: 50 0A    MOV   A,0xA
    131D: 08       PUSH  A
    131E: 50 00    MOV   A,0x0
    1320: 08       PUSH  A
    1321: 50 56    MOV   A,0x56
    1323: 08       PUSH  A
    1324: 5F 36 2B MOV   [__r1],[MicSensitivity]
    1327: 50 00    MOV   A,0x0
    1329: 08       PUSH  A
    132A: 51 36    MOV   A,[__r1]
    132C: 08       PUSH  A
    132D: 90 31    CALL  _itoa
(0382) 			LCD_line_print(str_buf, LCD_LINE_1);
    132F: 50 00    MOV   A,0x0
    1331: 08       PUSH  A
    1332: 50 00    MOV   A,0x0
    1334: 08       PUSH  A
    1335: 50 56    MOV   A,0x56
    1337: 08       PUSH  A
    1338: 91 34    CALL  _LCD_line_print
    133A: 38 F7    ADD   SP,0xF7
(0383) 			
(0384) 			cstrcpy(str_buf, "Sens Setting");
    133C: 50 02    MOV   A,0x2
    133E: 08       PUSH  A
    133F: 50 01    MOV   A,0x1
    1341: 08       PUSH  A
    1342: 50 00    MOV   A,0x0
    1344: 08       PUSH  A
    1345: 50 56    MOV   A,0x56
    1347: 08       PUSH  A
    1348: 7C 17 73 LCALL _cstrcpy
(0385) 			LCD_line_print(str_buf, LCD_LINE_2);
    134B: 50 01    MOV   A,0x1
    134D: 08       PUSH  A
    134E: 50 00    MOV   A,0x0
    1350: 08       PUSH  A
    1351: 50 56    MOV   A,0x56
    1353: 08       PUSH  A
    1354: 91 18    CALL  _LCD_line_print
    1356: 38 F9    ADD   SP,0xF9
(0386) 			break;
(0387) 		}
(0388) 	}
    1358: 7D 0B 3D LJMP  0x0B3D
    135B: 38 F0    ADD   SP,0xF0
    135D: 20       POP   X
    135E: 8F FF    JMP   0x135E
(0389) }
(0390) 
(0391) 
(0392) /*******************************************************************************
(0393)  * Output-related functions
(0394)  ******************************************************************************/
(0395) void itoa(unsigned short input, char *str, int base){
_itoa:
  digit                --> X+4
  n                    --> X+2
  d                    --> X+0
  base                 --> X-9
  str                  --> X-7
  input                --> X-5
    1360: 10       PUSH  X
    1361: 4F       MOV   X,SP
    1362: 38 08    ADD   SP,0x8
(0396) 	int n = 0;
    1364: 56 03 00 MOV   [X+3],0x0
    1367: 56 02 00 MOV   [X+2],0x0
(0397) 	unsigned int d = 1;
    136A: 56 01 01 MOV   [X+1],0x1
    136D: 56 00 00 MOV   [X+0],0x0
    1370: 80 1A    JMP   0x138B
(0398) 	
(0399) 	while ((input / d) >= base) {
(0400) 		d *= base;
    1372: 52 F7    MOV   A,[X-9]
    1374: 08       PUSH  A
    1375: 52 F8    MOV   A,[X-8]
    1377: 08       PUSH  A
    1378: 52 00    MOV   A,[X+0]
    137A: 08       PUSH  A
    137B: 52 01    MOV   A,[X+1]
    137D: 08       PUSH  A
    137E: 7C 16 DB LCALL 0x16DB
    1381: 38 FC    ADD   SP,0xFC
    1383: 51 33    MOV   A,[__rX]
    1385: 54 01    MOV   [X+1],A
    1387: 51 32    MOV   A,[__rY]
    1389: 54 00    MOV   [X+0],A
(0401) 	}
    138B: 52 00    MOV   A,[X+0]
    138D: 08       PUSH  A
    138E: 52 01    MOV   A,[X+1]
    1390: 08       PUSH  A
    1391: 52 FB    MOV   A,[X-5]
    1393: 08       PUSH  A
    1394: 52 FC    MOV   A,[X-4]
    1396: 08       PUSH  A
    1397: 7C 16 80 LCALL 0x1680
    139A: 18       POP   A
    139B: 53 36    MOV   [__r1],A
    139D: 18       POP   A
    139E: 53 37    MOV   [__r0],A
    13A0: 38 FE    ADD   SP,0xFE
    13A2: 51 36    MOV   A,[__r1]
    13A4: 13 F8    SUB   A,[X-8]
    13A6: 51 37    MOV   A,[__r0]
    13A8: 1B F7    SBB   A,[X-9]
    13AA: DF C7    JNC   0x1372
    13AC: 80 AB    JMP   0x1458
(0402) 	while (d != 0) {
(0403) 		int digit = input / d;
    13AE: 52 00    MOV   A,[X+0]
    13B0: 08       PUSH  A
    13B1: 52 01    MOV   A,[X+1]
    13B3: 08       PUSH  A
    13B4: 52 FB    MOV   A,[X-5]
    13B6: 08       PUSH  A
    13B7: 52 FC    MOV   A,[X-4]
    13B9: 08       PUSH  A
    13BA: 7C 16 80 LCALL 0x1680
    13BD: 18       POP   A
    13BE: 53 36    MOV   [__r1],A
    13C0: 18       POP   A
    13C1: 53 37    MOV   [__r0],A
    13C3: 38 FE    ADD   SP,0xFE
    13C5: 51 36    MOV   A,[__r1]
    13C7: 54 05    MOV   [X+5],A
    13C9: 51 37    MOV   A,[__r0]
    13CB: 54 04    MOV   [X+4],A
(0404) 		input %= d;
    13CD: 52 00    MOV   A,[X+0]
    13CF: 08       PUSH  A
    13D0: 52 01    MOV   A,[X+1]
    13D2: 08       PUSH  A
    13D3: 52 FB    MOV   A,[X-5]
    13D5: 08       PUSH  A
    13D6: 52 FC    MOV   A,[X-4]
    13D8: 08       PUSH  A
    13D9: 7C 16 80 LCALL 0x1680
    13DC: 38 FE    ADD   SP,0xFE
    13DE: 18       POP   A
    13DF: 54 FC    MOV   [X-4],A
    13E1: 18       POP   A
    13E2: 54 FB    MOV   [X-5],A
(0405) 		d /= base;
    13E4: 52 F7    MOV   A,[X-9]
    13E6: 08       PUSH  A
    13E7: 52 F8    MOV   A,[X-8]
    13E9: 08       PUSH  A
    13EA: 52 00    MOV   A,[X+0]
    13EC: 08       PUSH  A
    13ED: 52 01    MOV   A,[X+1]
    13EF: 08       PUSH  A
    13F0: 7C 16 80 LCALL 0x1680
    13F3: 18       POP   A
    13F4: 54 01    MOV   [X+1],A
    13F6: 18       POP   A
    13F7: 54 00    MOV   [X+0],A
    13F9: 38 FE    ADD   SP,0xFE
(0406) 		if (n || digit > 0 || d == 0){
    13FB: 3D 02 00 CMP   [X+2],0x0
    13FE: B0 20    JNZ   0x141F
    1400: 3D 03 00 CMP   [X+3],0x0
    1403: B0 1B    JNZ   0x141F
    1405: 50 00    MOV   A,0x0
    1407: 13 05    SUB   A,[X+5]
    1409: 52 04    MOV   A,[X+4]
    140B: 31 80    XOR   A,0x80
    140D: 53 33    MOV   [__rX],A
    140F: 50 80    MOV   A,0x80
    1411: 1A 33    SBB   A,[__rX]
    1413: C0 0B    JC    0x141F
    1415: 3D 00 00 CMP   [X+0],0x0
    1418: B0 3F    JNZ   0x1458
    141A: 3D 01 00 CMP   [X+1],0x0
    141D: B0 3A    JNZ   0x1458
(0407) 			*str++ = digit + ((digit < 10)? '0': 'a' - 10);
    141F: 52 FA    MOV   A,[X-6]
    1421: 53 36    MOV   [__r1],A
    1423: 52 F9    MOV   A,[X-7]
    1425: 53 37    MOV   [__r0],A
    1427: 51 36    MOV   A,[__r1]
    1429: 01 01    ADD   A,0x1
    142B: 54 FA    MOV   [X-6],A
    142D: 51 37    MOV   A,[__r0]
    142F: 09 00    ADC   A,0x0
    1431: 54 F9    MOV   [X-7],A
    1433: 52 05    MOV   A,[X+5]
    1435: 11 0A    SUB   A,0xA
    1437: 52 04    MOV   A,[X+4]
    1439: 31 80    XOR   A,0x80
    143B: 19 80    SBB   A,0x80
    143D: D0 09    JNC   0x1447
    143F: 56 07 30 MOV   [X+7],0x30
    1442: 56 06 00 MOV   [X+6],0x0
    1445: 80 07    JMP   0x144D
    1447: 56 07 57 MOV   [X+7],0x57
    144A: 56 06 00 MOV   [X+6],0x0
    144D: 52 05    MOV   A,[X+5]
    144F: 03 07    ADD   A,[X+7]
    1451: 3F 36    MVI   [__r1],A
(0408) 			n++;
    1453: 77 03    INC   [X+3]
    1455: 0F 02 00 ADC   [X+2],0x0
(0409) 		}
(0410) 	}
    1458: 3D 00 00 CMP   [X+0],0x0
    145B: BF 52    JNZ   0x13AE
    145D: 3D 01 00 CMP   [X+1],0x0
    1460: BF 4D    JNZ   0x13AE
(0411) 	*str = '\0';
    1462: 52 FA    MOV   A,[X-6]
    1464: 53 36    MOV   [__r1],A
    1466: 50 00    MOV   A,0x0
    1468: 3F 36    MVI   [__r1],A
    146A: 38 F8    ADD   SP,0xF8
    146C: 20       POP   X
    146D: 7F       RET   
(0412) }
(0413) 
(0414) void LCD_line_print(char *str, unsigned char line){
_LCD_line_print:
  line                 --> X-6
  str                  --> X-5
    146E: 10       PUSH  X
    146F: 4F       MOV   X,SP
(0415) 	static char buffer[17];
(0416) 	memset(buffer, ' ', 16);
    1470: 50 00    MOV   A,0x0
    1472: 08       PUSH  A
    1473: 50 10    MOV   A,0x10
    1475: 08       PUSH  A
    1476: 50 00    MOV   A,0x0
    1478: 08       PUSH  A
    1479: 50 20    MOV   A,0x20
    147B: 08       PUSH  A
    147C: 50 00    MOV   A,0x0
    147E: 08       PUSH  A
    147F: 50 43    MOV   A,0x43
    1481: 08       PUSH  A
    1482: 7C 17 45 LCALL _memset
    1485: 38 FA    ADD   SP,0xFA
(0417) 	memcpy(buffer, str, strlen(str));
    1487: 52 FB    MOV   A,[X-5]
    1489: 08       PUSH  A
    148A: 52 FC    MOV   A,[X-4]
    148C: 08       PUSH  A
    148D: 7C 17 A0 LCALL _strlen
    1490: 51 37    MOV   A,[__r0]
    1492: 08       PUSH  A
    1493: 51 36    MOV   A,[__r1]
    1495: 08       PUSH  A
    1496: 52 FB    MOV   A,[X-5]
    1498: 08       PUSH  A
    1499: 52 FC    MOV   A,[X-4]
    149B: 08       PUSH  A
    149C: 50 00    MOV   A,0x0
    149E: 08       PUSH  A
    149F: 50 43    MOV   A,0x43
    14A1: 08       PUSH  A
    14A2: 7C 17 1B LCALL _memcpy
    14A5: 38 F8    ADD   SP,0xF8
(0418) 	buffer[17] = '\0';
    14A7: 55 54 00 MOV   [tmp_ptr],0x0
(0419) 	LCD_Position(line, 0);
    14AA: 10       PUSH  X
    14AB: 50 00    MOV   A,0x0
    14AD: 08       PUSH  A
    14AE: 52 FA    MOV   A,[X-6]
    14B0: 20       POP   X
    14B1: 7C 08 1C LCALL _LCD_Position
(0420) 	LCD_PrString(buffer);
    14B4: 50 00    MOV   A,0x0
    14B6: 08       PUSH  A
    14B7: 50 43    MOV   A,0x43
    14B9: 5C       MOV   X,A
    14BA: 18       POP   A
    14BB: 7C 06 E7 LCALL _LCD_PrString
    14BE: 20       POP   X
    14BF: 20       POP   X
    14C0: 7F       RET   
(0421) }
(0422) 
(0423) 
(0424) /*******************************************************************************
(0425)  * FSM/Timer related functions
(0426)  ******************************************************************************/
(0427) void do_nothing(void) {
(0428) 	return;
_do_nothing:
    14C1: 7F       RET   
(0429) }
(0430) void start_timer(void) {
(0431) 	time = 0;
_start_timer:
    14C2: 55 6C 00 MOV   [time+1],0x0
    14C5: 55 6B 00 MOV   [time],0x0
(0432) 	StopTimer_Start();
    14C8: 10       PUSH  X
    14C9: 7C 05 30 LCALL _StopTimer_Start
    14CC: 20       POP   X
    14CD: 7F       RET   
(0433) }
(0434) void stop_timer_record(void) {
_stop_timer_record:
    14CE: 10       PUSH  X
    14CF: 4F       MOV   X,SP
    14D0: 38 04    ADD   SP,0x4
(0435) 	StopTimer_Stop();
    14D2: 10       PUSH  X
    14D3: 7C 05 34 LCALL _StopTimer_Stop
    14D6: 20       POP   X
(0436) 	
(0437) 	// move and then record
(0438) 	memmove(time_record + 1, time_record, sizeof (time)*9);
    14D7: 50 00    MOV   A,0x0
    14D9: 08       PUSH  A
    14DA: 50 12    MOV   A,0x12
    14DC: 08       PUSH  A
    14DD: 50 00    MOV   A,0x0
    14DF: 08       PUSH  A
    14E0: 50 0F    MOV   A,0xF
    14E2: 08       PUSH  A
    14E3: 50 00    MOV   A,0x0
    14E5: 08       PUSH  A
    14E6: 50 11    MOV   A,0x11
    14E8: 08       PUSH  A
    14E9: 7C 17 C7 LCALL _memmove
    14EC: 38 FA    ADD   SP,0xFA
(0439) 	
(0440) 	// record according to resolution
(0441) 	switch(TimeAccuracy) {
    14EE: 51 2E    MOV   A,[TimeAccuracy]
    14F0: 54 01    MOV   [X+1],A
    14F2: 56 00 00 MOV   [X+0],0x0
    14F5: 3D 00 00 CMP   [X+0],0x0
    14F8: B0 06    JNZ   0x14FF
    14FA: 3D 01 00 CMP   [X+1],0x0
    14FD: A0 17    JZ    0x1515
    14FF: 3D 00 00 CMP   [X+0],0x0
    1502: B0 06    JNZ   0x1509
    1504: 3D 01 01 CMP   [X+1],0x1
    1507: A0 15    JZ    0x151D
    1509: 3D 00 00 CMP   [X+0],0x0
    150C: B0 06    JNZ   0x1513
    150E: 3D 01 02 CMP   [X+1],0x2
    1511: A0 1F    JZ    0x1531
    1513: 80 34    JMP   0x1548
(0442) 	case 0: // 1 sec
(0443) 		time_record[0] = time;
    1515: 5F 10 6C MOV   [time_record+1],[time+1]
    1518: 5F 0F 6B MOV   [time_record],[time]
(0444) 		break;
    151B: 80 2C    JMP   0x1548
(0445) 	case 1: // 1/2 sec
(0446) 		time_record[0] = time >>1; // division by 2
    151D: 5F 36 6C MOV   [__r1],[time+1]
    1520: 5F 37 6B MOV   [__r0],[time]
    1523: 70 FB    AND   F,0xFB
    1525: 6E 37    RRC   [__r0]
    1527: 6E 36    RRC   [__r1]
    1529: 5F 10 36 MOV   [time_record+1],[__r1]
    152C: 5F 0F 37 MOV   [time_record],[__r0]
(0447) 		break;
    152F: 80 18    JMP   0x1548
(0448) 	case 2: // 1/10 sec
(0449) 		time_record[0] = time / 10; // division by 10
    1531: 50 00    MOV   A,0x0
    1533: 08       PUSH  A
    1534: 50 0A    MOV   A,0xA
    1536: 08       PUSH  A
    1537: 51 6B    MOV   A,[time]
    1539: 08       PUSH  A
    153A: 51 6C    MOV   A,[time+1]
    153C: 08       PUSH  A
    153D: 7C 16 80 LCALL 0x1680
    1540: 18       POP   A
    1541: 53 10    MOV   [time_record+1],A
    1543: 18       POP   A
    1544: 53 0F    MOV   [time_record],A
    1546: 38 FE    ADD   SP,0xFE
(0450) 		break;
(0451) 	}
(0452) 	
(0453) 	// Stop for 3 seconds
(0454) 	time = 0;
    1548: 55 6C 00 MOV   [time+1],0x0
    154B: 55 6B 00 MOV   [time],0x0
(0455) 	StopTimer_WritePeriod(3200);	// set the resolution by 1/10 sec
    154E: 10       PUSH  X
    154F: 57 0C    MOV   X,0xC
    1551: 50 80    MOV   A,0x80
    1553: 7C 05 38 LCALL _StopTimer_WritePeriod
(0456) 	StopTimer_Start();
    1556: 7C 05 30 LCALL _StopTimer_Start
    1559: 20       POP   X
(0457) 	while(time < 30) {
(0458) 		// Just wait
(0459) 	}
    155A: 51 6C    MOV   A,[time+1]
    155C: 11 1E    SUB   A,0x1E
    155E: 51 6B    MOV   A,[time]
    1560: 19 00    SBB   A,0x0
    1562: CF F7    JC    0x155A
(0460) 	StopTimer_Stop();
    1564: 10       PUSH  X
    1565: 7C 05 34 LCALL _StopTimer_Stop
    1568: 20       POP   X
(0461) 	
(0462) 	// restore resolution
(0463) 	switch(TimeAccuracy) {
    1569: 51 2E    MOV   A,[TimeAccuracy]
    156B: 54 03    MOV   [X+3],A
    156D: 56 02 00 MOV   [X+2],0x0
    1570: 3D 02 00 CMP   [X+2],0x0
    1573: B0 06    JNZ   0x157A
    1575: 3D 03 00 CMP   [X+3],0x0
    1578: A0 17    JZ    0x1590
    157A: 3D 02 00 CMP   [X+2],0x0
    157D: B0 06    JNZ   0x1584
    157F: 3D 03 01 CMP   [X+3],0x1
    1582: A0 18    JZ    0x159B
    1584: 3D 02 00 CMP   [X+2],0x0
    1587: B0 06    JNZ   0x158E
    1589: 3D 03 02 CMP   [X+3],0x2
    158C: A0 19    JZ    0x15A6
    158E: 80 20    JMP   0x15AF
(0464) 	case 0:
(0465) 		StopTimer_WritePeriod(32000);	// 1 sec
    1590: 10       PUSH  X
    1591: 57 7D    MOV   X,0x7D
    1593: 50 00    MOV   A,0x0
    1595: 7C 05 38 LCALL _StopTimer_WritePeriod
    1598: 20       POP   X
(0466) 		break;
    1599: 80 15    JMP   0x15AF
(0467) 	case 1:
(0468) 		StopTimer_WritePeriod(16000);	// 1/2 sec
    159B: 10       PUSH  X
    159C: 57 3E    MOV   X,0x3E
    159E: 50 80    MOV   A,0x80
    15A0: 7C 05 38 LCALL _StopTimer_WritePeriod
    15A3: 20       POP   X
(0469) 		break;
    15A4: 80 0A    JMP   0x15AF
(0470) 	case 2:
(0471) 		StopTimer_WritePeriod(3200);	// 1/10 sec
    15A6: 10       PUSH  X
    15A7: 57 0C    MOV   X,0xC
    15A9: 50 80    MOV   A,0x80
    15AB: 7C 05 38 LCALL _StopTimer_WritePeriod
    15AE: 20       POP   X
(0472) 		break;
(0473) 	}
(0474) 	time = 0;
    15AF: 55 6C 00 MOV   [time+1],0x0
    15B2: 55 6B 00 MOV   [time],0x0
    15B5: 38 FC    ADD   SP,0xFC
    15B7: 20       POP   X
    15B8: 7F       RET   
(0475) }
(0476) 
(0477) void show_next_record(void) {
(0478) 	if(stat_show < 2) {
_show_next_record:
    15B9: 3C 2F 02 CMP   [stat_show],0x2
    15BC: D0 05    JNC   0x15C2
(0479) 		stat_show += 1;
    15BE: 76 2F    INC   [stat_show]
(0480) 	} else {
    15C0: 80 04    JMP   0x15C5
(0481) 		stat_show = 0;
    15C2: 55 2F 00 MOV   [stat_show],0x0
(0482) 	}
(0483) 	return;
    15C5: 7F       RET   
(0484) }
(0485) 
(0486) void inc_accuracy(void) {
_inc_accuracy:
    15C6: 10       PUSH  X
    15C7: 4F       MOV   X,SP
    15C8: 38 02    ADD   SP,0x2
(0487) 	if(TimeAccuracy < 2) {
    15CA: 3C 2E 02 CMP   [TimeAccuracy],0x2
    15CD: D0 05    JNC   0x15D3
(0488) 		TimeAccuracy += 1;
    15CF: 76 2E    INC   [TimeAccuracy]
(0489) 	} else {
    15D1: 80 04    JMP   0x15D6
(0490) 		TimeAccuracy = 0;
    15D3: 55 2E 00 MOV   [TimeAccuracy],0x0
(0491) 	}
(0492) 	switch(TimeAccuracy) {
    15D6: 51 2E    MOV   A,[TimeAccuracy]
    15D8: 54 01    MOV   [X+1],A
    15DA: 56 00 00 MOV   [X+0],0x0
    15DD: 3D 00 00 CMP   [X+0],0x0
    15E0: B0 06    JNZ   0x15E7
    15E2: 3D 01 00 CMP   [X+1],0x0
    15E5: A0 17    JZ    0x15FD
    15E7: 3D 00 00 CMP   [X+0],0x0
    15EA: B0 06    JNZ   0x15F1
    15EC: 3D 01 01 CMP   [X+1],0x1
    15EF: A0 18    JZ    0x1608
    15F1: 3D 00 00 CMP   [X+0],0x0
    15F4: B0 06    JNZ   0x15FB
    15F6: 3D 01 02 CMP   [X+1],0x2
    15F9: A0 19    JZ    0x1613
    15FB: 80 20    JMP   0x161C
(0493) 	case 0:
(0494) 		StopTimer_WritePeriod(32000);	// 1 sec
    15FD: 10       PUSH  X
    15FE: 57 7D    MOV   X,0x7D
    1600: 50 00    MOV   A,0x0
    1602: 7C 05 38 LCALL _StopTimer_WritePeriod
    1605: 20       POP   X
(0495) 		break;
    1606: 80 15    JMP   0x161C
(0496) 	case 1:
(0497) 		StopTimer_WritePeriod(16000);	// 1/2 sec
    1608: 10       PUSH  X
    1609: 57 3E    MOV   X,0x3E
    160B: 50 80    MOV   A,0x80
    160D: 7C 05 38 LCALL _StopTimer_WritePeriod
    1610: 20       POP   X
(0498) 		break;
    1611: 80 0A    JMP   0x161C
(0499) 	case 2:
(0500) 		StopTimer_WritePeriod(3200);	// 1/10 sec
    1613: 10       PUSH  X
    1614: 57 0C    MOV   X,0xC
    1616: 50 80    MOV   A,0x80
    1618: 7C 05 38 LCALL _StopTimer_WritePeriod
    161B: 20       POP   X
(0501) 		break;
    161C: 38 FE    ADD   SP,0xFE
    161E: 20       POP   X
    161F: 7F       RET   
(0502) 	}
(0503) }
(0504) 
(0505) void inc_sensitivity(void) {
(0506) 	if(MicSensitivity < 10) {
_inc_sensitivity:
    1620: 3C 2B 0A CMP   [MicSensitivity],0xA
    1623: D0 05    JNC   0x1629
(0507) 		MicSensitivity += 1;
    1625: 76 2B    INC   [MicSensitivity]
(0508) 	} else {
    1627: 80 04    JMP   0x162C
(0509) 		MicSensitivity = 1;
    1629: 55 2B 01 MOV   [MicSensitivity],0x1
(0510) 	}
(0511) 	MicSenseValue = 300 + MicSensitivity * 50;
    162C: 5F 36 2B MOV   [__r1],[MicSensitivity]
    162F: 50 00    MOV   A,0x0
    1631: 08       PUSH  A
    1632: 51 36    MOV   A,[__r1]
    1634: 08       PUSH  A
    1635: 50 00    MOV   A,0x0
    1637: 08       PUSH  A
    1638: 50 32    MOV   A,0x32
    163A: 08       PUSH  A
    163B: 7C 16 DB LCALL 0x16DB
    163E: 38 FC    ADD   SP,0xFC
    1640: 5F 36 33 MOV   [__r1],[__rX]
    1643: 5F 37 32 MOV   [__r0],[__rY]
    1646: 51 36    MOV   A,[__r1]
    1648: 01 2C    ADD   A,0x2C
    164A: 53 2D    MOV   [MicSenseValue|statistic_transitions+1],A
    164C: 51 37    MOV   A,[__r0]
    164E: 09 01    ADC   A,0x1
    1650: 53 2C    MOV   [MicSenseValue|statistic_transitions],A
    1652: 7F       RET   
(0512) }
(0513) 
(0514) void show_detected(void) {
(0515) 	cstrcpy(str_buf, "Mic detected");
_show_detected:
    1653: 50 01    MOV   A,0x1
    1655: 08       PUSH  A
    1656: 50 F4    MOV   A,0xF4
    1658: 08       PUSH  A
    1659: 50 00    MOV   A,0x0
    165B: 08       PUSH  A
    165C: 50 56    MOV   A,0x56
    165E: 08       PUSH  A
    165F: 7C 17 73 LCALL _cstrcpy
(0516) 	LCD_line_print(str_buf, LCD_LINE_2);
    1662: 50 01    MOV   A,0x1
    1664: 08       PUSH  A
    1665: 50 00    MOV   A,0x0
    1667: 08       PUSH  A
    1668: 50 56    MOV   A,0x56
    166A: 08       PUSH  A
    166B: 9E 01    CALL  _LCD_line_print
    166D: 38 F9    ADD   SP,0xF9
    166F: 7F       RET   
(0517) }
(0518) 
(0519) 
(0520) /*******************************************************************************
(0521)  * ISRs
(0522)  ******************************************************************************/
(0523) #pragma interrupt_handler StopTimer_ISR
(0524) void StopTimer_ISR(void){
_StopTimer_ISR:
    1670: 08       PUSH  A
(0525) 	time += 1;
    1671: 76 6C    INC   [time+1]
    1673: 0E 6B 00 ADC   [time],0x0
    1676: 18       POP   A
    1677: 7E       RETI  
(0526) }
(0527) 
(0528) #pragma interrupt_handler MuteTimer_ISR
(0529) void MuteTimer_ISR(void){	// This is triggered at 200 Hz
_MuteTimer_ISR:
    1678: 08       PUSH  A
(0530) 	MuteTime += 1;
    1679: 76 68    INC   [MuteTime+1]
    167B: 0E 67 00 ADC   [MuteTime],0x0
    167E: 18       POP   A
    167F: 7E       RETI  
