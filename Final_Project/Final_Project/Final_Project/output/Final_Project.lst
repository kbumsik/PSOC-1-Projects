FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 06 11 LJMP  _DUALADC_1_CNT1_ISR(0149)     ljmp	_DUALADC_1_CNT1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 06 17 LJMP  _DUALADC_1_PWM16_ISR(0157)     ljmp	_DUALADC_1_PWM16_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 14 LJMP  _DUALADC_1_CNT2_ISR(0161)     ljmp	_DUALADC_1_CNT2_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     ;ljmp	_StopTimer_ISR
0034: 7D 0A 55 LJMP  _StopTimer_ISR     (0170)     ljmp _StopTimer_ISR
0037: 7E       RETI                     (0171) 	reti
                                        (0172) 
                                        (0173)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0174)     // call	void_handler
0038: 7E       RETI                     (0175)     reti
                                        (0176) 
                                        (0177)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0178)     // call	void_handler
003C: 7E       RETI                     (0179)     reti
                                        (0180) 
                                        (0181)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0182)     // call	void_handler
0060: 7E       RETI                     (0183)     reti
                                        (0184) 
                                        (0185)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0186)     // call	void_handler
0064: 7E       RETI                     (0187)     reti
0068: 71 10    OR    F,0x10             
                                        (0188)     ;---------------------------------------------------
                                        (0189)     ; Insert your custom code above this banner
                                        (0190)     ;---------------------------------------------------
                                        (0191)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0192) 
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;  Start of Execution.
                                        (0195) ;-----------------------------------------------------------------------------
                                        (0196) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0197) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0198) ;
                                        (0199) 
                                        (0200) IF	(TOOLCHAIN & HITECH)
                                        (0201)  	AREA PD_startup(CODE, REL, CON)
                                        (0202) ELSE
                                        (0203)     org 68h
                                        (0204) ENDIF
                                        (0205) __Start:
                                        (0206) 
                                        (0207)     ; initialize SMP values for voltage stabilization, if required,
                                        (0208)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0209)     ; least for now. 
                                        (0210)     ;
                                        (0211)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0212)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0213)     M8C_SetBank0
                                        (0214) 
                                        (0215) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0216) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0217)     M8C_EnableWatchDog
                                        (0218) ENDIF
                                        (0219) 
                                        (0220) IF ( SELECT_32K )
                                        (0221)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0222) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0223)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0224) ENDIF
                                        (0225) 
                                        (0226) IF	(TOOLCHAIN & HITECH) 
                                        (0227)     ;---------------------------
                                        (0228)     ; Set up the Temporary stack
                                        (0229)     ;---------------------------
                                        (0230)     ; A temporary stack is set up for the SSC instructions.
                                        (0231)     ; The real stack start will be assigned later.
                                        (0232)     ;
                                        (0233) 	global		__Lstackps
                                        (0234) 	mov     a,low __Lstackps
                                        (0235) 	swap    a,sp
                                        (0236) ELSE
                                        (0237)     ;------------------
                                        (0238)     ; Set up the stack
                                        (0239)     ;------------------
0075: 50 2C    MOV   A,0x2C             (0240)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0241)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0242) ENDIF
                                        (0243) 
                                        (0244)     ;-----------------------------------------------
                                        (0245)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0246)     ;-----------------------------------------------
                                        (0247) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0248) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0249)  IF ( AGND_BYPASS )
                                        (0250)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0251)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0252)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0253)     ; value using the proper trim values.
                                        (0254)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0255)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0256)  ENDIF
                                        (0257) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0258)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0259) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0260) 
007B: 55 F8 00 MOV   [_ramareas_end+204],0x0(0261)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+205],0x0(0262)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0263) 
                                        (0264)     ;---------------------------------------
                                        (0265)     ; Initialize Crystal Oscillator and PLL
                                        (0266)     ;---------------------------------------
                                        (0267) 
                                        (0268) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0269)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0270)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0271)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0272)     ; the ECO to stabilize.
                                        (0273)     ;
                                        (0274)     M8C_SetBank1
                                        (0275)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0276)     M8C_SetBank0
                                        (0277)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0278)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0279)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0280) .WaitFor1s:
                                        (0281)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0282)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0283)                                           ;   since interrupts are not globally enabled
                                        (0284) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0285)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0286)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0287)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0288)     M8C_SetBank0
                                        (0289)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0290) 
                                        (0291) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0292) 
                                        (0293) IF ( PLL_MODE )
                                        (0294)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0295)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0296)     ;
                                        (0297)     M8C_SetBank1
                                        (0298)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0299)     M8C_SetBank0
                                        (0300)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0301)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0302) 
                                        (0303) .WaitFor16ms:
                                        (0304)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0305)     jz   .WaitFor16ms
                                        (0306)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0307)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0308)     M8C_SetBank0
                                        (0309) 
                                        (0310) IF      ( WAIT_FOR_32K )
                                        (0311) ELSE ; !( WAIT_FOR_32K )
                                        (0312)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0313)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0314) ENDIF ;(WAIT_FOR_32K)
                                        (0315) ENDIF ;(PLL_MODE)
                                        (0316) 
                                        (0317) 	;-------------------------------------------------------
                                        (0318)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0319)     ;-------------------------------------------------------
                                        (0320) 
                                        (0321)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0322) 
                                        (0323) IF (SYSCLK_SOURCE)
                                        (0324)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0325) ENDIF
                                        (0326)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0327) 
                                        (0328)     ;------------------------
                                        (0329)     ; Close CT leakage path.
                                        (0330)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0331)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0332)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0333)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0334)     mov   reg[ACB03CR0], 05h
                                        (0335) 
                                        (0336)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0337)     ;---------------------------------------------------
                                        (0338)     ; Insert your custom code below this banner
                                        (0339)     ;---------------------------------------------------
                                        (0340) 
                                        (0341)     ;---------------------------------------------------
                                        (0342)     ; Insert your custom code above this banner
                                        (0343)     ;---------------------------------------------------
                                        (0344)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0345) 
                                        (0346)     ;-------------------------
                                        (0347)     ; Load Base Configuration
                                        (0348)     ;-------------------------
                                        (0349)     ; Load global parameter settings and load the user modules in the
                                        (0350)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0351)     ; to minimize start up time; (2) We may still need to play with the
                                        (0352)     ; Sleep Timer.
                                        (0353)     ;
0097: 7C 03 A1 LCALL 0x03A1             (0354)     lcall LoadConfigInit
                                        (0355) 
                                        (0356)     ;-----------------------------------
                                        (0357)     ; Initialize C Run-Time Environment
                                        (0358)     ;-----------------------------------
                                        (0359) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0360)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 0D 19 MOV   [__r0],0x19        (0361)     mov  [__r0],<__bss_start
                                        (0362) BssLoop:
009F: 3C 0D 2C CMP   [__r0],0x2C        (0363)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0364)     jz   BssDone
00A4: 3F 0D    MVI   [__r0],A           (0365)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0366)     jmp  BssLoop
                                        (0367) BssDone:
00A8: 50 02    MOV   A,0x2              (0368)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 CD    MOV   X,0xCD             (0369)     mov  X,<__idata_start
00AC: 55 0D 00 MOV   [__r0],0x0         (0370)     mov  [__r0],<__data_start
                                        (0371) IDataLoop:
00AF: 3C 0D 07 CMP   [__r0],0x7         (0372)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0373)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0374)     push A
00B5: 28       ROMX                     (0375)     romx
00B6: 3F 0D    MVI   [__r0],A           (0376)     mvi  [__r0],A
00B8: 18       POP   A                  (0377)     pop  A
00B9: 75       INC   X                  (0378)     inc  X
00BA: 09 00    ADC   A,0x0              (0379)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0380)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0381) 
                                        (0382) C_RTE_Done:
                                        (0383) 
                                        (0384) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0385) 
                                        (0386)     ;-------------------------------
                                        (0387)     ; Voltage Stabilization for SMP
                                        (0388)     ;-------------------------------
                                        (0389) 
                                        (0390) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0391) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0392)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0393)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0394)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0395)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0396)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0397)     M8C_SetBank1
                                        (0398)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0399)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0400)     M8C_SetBank0
                                        (0401)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0402)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0403) .WaitFor2ms:
                                        (0404)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0405)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0406) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0407) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0408) 
                                        (0409)     ;-------------------------------
                                        (0410)     ; Set Power-On Reset (POR) Level
                                        (0411)     ;-------------------------------
                                        (0412)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0413)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0414)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0415)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0416)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0417) 
                                        (0418)     M8C_SetBank1
                                        (0419) 
                                        (0420) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0421)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0422)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0423)  ELSE ; 24HMz                               ;
                                        (0424)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0425)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0426) ENDIF ; 5V
                                        (0427) 
                                        (0428)     M8C_SetBank0
                                        (0429) 
                                        (0430)     ;----------------------------
                                        (0431)     ; Wrap up and invoke "main"
                                        (0432)     ;----------------------------
                                        (0433) 
                                        (0434)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0435)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0436)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0437)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0438) 
                                        (0439)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0440)     ;
                                        (0441)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0442)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0443)     M8C_SetBank0
                                        (0444) 
                                        (0445)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0446)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0447)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0448)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0449)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0450)                                    ; have been set during the boot process.
                                        (0451) IF	(TOOLCHAIN & HITECH)
                                        (0452) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0453) ELSE
                                        (0454) IF ENABLE_LJMP_TO_MAIN
                                        (0455)     ljmp  _main                    ; goto main (no return)
                                        (0456) ELSE
00CF: 7C 07 BD LCALL _main              (0457)     lcall _main                    ; call main
                                        (0458) .Exit:
00D2: 8F FF    JMP   0x00D2             (0459)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0460) ENDIF
                                        (0461) ENDIF ; TOOLCHAIN
                                        (0462) 
                                        (0463)     ;---------------------------------
                                        (0464)     ; Library Access to Global Parms
                                        (0465)     ;---------------------------------
                                        (0466)     ;
                                        (0467)  bGetPowerSetting:
                                        (0468) _bGetPowerSetting:
                                        (0469)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0470)     ; Returns value of POWER_SETTING in the A register.
                                        (0471)     ; No inputs. No Side Effects.
                                        (0472)     ;
                                        (0473) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0474)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0475) ELSE        
                                        (0476)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0477) ENDIF
00D6: 7F       RET                      (0478)     ret
                                        (0479) 
                                        (0480) IF	(TOOLCHAIN & HITECH)
                                        (0481) ELSE
                                        (0482)     ;---------------------------------
                                        (0483)     ; Order Critical RAM & ROM AREAs
                                        (0484)     ;---------------------------------
                                        (0485)     ;  'TOP' is all that has been defined so far...
                                        (0486) 
                                        (0487)     ;  ROM AREAs for C CONST, static & global items
                                        (0488)     ;
                                        (0489)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0490)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0491) __idata_start:
                                        (0492) 
                                        (0493)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0494) __func_lit_start:
                                        (0495) 
                                        (0496)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0497)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0498) 
                                        (0499)     ; CODE segment for general use
                                        (0500)     ;
                                        (0501)     AREA text (ROM, REL, CON)
                                        (0502) __text_start:
                                        (0503) 
                                        (0504)     ; RAM area usage
                                        (0505)     ;
                                        (0506)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0507) __data_start:
                                        (0508) 
                                        (0509)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0510)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0511)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0512) __bss_start:
                                        (0513) 
                                        (0514) ENDIF ; TOOLCHAIN
                                        (0515) 
                                        (0516) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
02DC: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_project1_Bank1
                                        (0019) export LoadConfigTBL_project1_Bank0
                                        (0020) export LoadConfigTBL_project1_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_project1_Bank0:
                                        (0023) ;  Instance name DUALADC_1, User Module DUALADC
                                        (0024) ;       Instance name DUALADC_1, Block Name ADC1(ASD20)
                                        (0025) 	db		90h, 90h		;DUALADC_1_bfADC1cr0(ASD20CR0)
                                        (0026) 	db		91h, a0h		;DUALADC_1_bfADC1cr1(ASD20CR1)
                                        (0027) 	db		92h, 61h		;DUALADC_1_bfADC1cr2(ASD20CR2)
                                        (0028) 	db		93h, f0h		;DUALADC_1_bfADC1cr3(ASD20CR3)
                                        (0029) ;       Instance name DUALADC_1, Block Name ADC2(ASD22)
                                        (0030) 	db		98h, 90h		;DUALADC_1_bfADC2cr0(ASD22CR0)
                                        (0031) 	db		99h, a0h		;DUALADC_1_bfADC2cr1(ASD22CR1)
                                        (0032) 	db		9ah, 60h		;DUALADC_1_bfADC2cr2(ASD22CR2)
                                        (0033) 	db		9bh, f0h		;DUALADC_1_bfADC2cr3(ASD22CR3)
                                        (0034) ;       Instance name DUALADC_1, Block Name CNT1(DBB00)
                                        (0035) 	db		23h, 00h		;DUALADC_1_bCounter1_CR0(DBB00CR0)
                                        (0036) 	db		21h, 00h		;DUALADC_1_bPeriod1(DBB00DR1)
                                        (0037) 	db		22h, 00h		;DUALADC_1_bCompare1(DBB00DR2)
                                        (0038) ;       Instance name DUALADC_1, Block Name CNT2(DCB03)
                                        (0039) 	db		2fh, 00h		;DUALADC_1_bCounter2_CR0(DCB03CR0)
                                        (0040) 	db		2dh, 00h		;DUALADC_1_bPeriod2(DCB03DR1)
                                        (0041) 	db		2eh, 00h		;DUALADC_1_bCompare2(DCB03DR2)
                                        (0042) ;       Instance name DUALADC_1, Block Name PWM16_LSB(DBB01)
                                        (0043) 	db		27h, 00h		;DUALADC_1_fPWM_LSB_CR0(DBB01CR0)
                                        (0044) 	db		25h, 00h		;DUALADC_1_bPWM_Period_LSB(DBB01DR1)
                                        (0045) 	db		26h, 00h		;DUALADC_1_bPWM_IntTime_LSB(DBB01DR2)
                                        (0046) ;       Instance name DUALADC_1, Block Name PWM16_MSB(DCB02)
                                        (0047) 	db		2bh, 00h		;DUALADC_1_fPWM_MSB_CR0(DCB02CR0)
                                        (0048) 	db		29h, 00h		;DUALADC_1_bPWM_Period_MSB(DCB02DR1)
                                        (0049) 	db		2ah, 00h		;DUALADC_1_bPWM_IntTime_MSB(DCB02DR2)
                                        (0050) ;  Instance name LCD, User Module LCD
                                        (0051) ;  Instance name LPF2_1, User Module LPF2
                                        (0052) ;       Instance name LPF2_1, Block Name FLIN(ASC10)
                                        (0053) 	db		80h, 94h		;LPF2_1_FLIN_CR0(ASC10CR0)
                                        (0054) 	db		81h, 88h		;LPF2_1_FLIN_CR1(ASC10CR1)
                                        (0055) 	db		82h, 00h		;LPF2_1_FLIN_CR2(ASC10CR2)
                                        (0056) 	db		83h, 24h		;LPF2_1_FLIN_CR3(ASC10CR3)
                                        (0057) ;       Instance name LPF2_1, Block Name FLOUT(ASD11)
                                        (0058) 	db		84h, 92h		;LPF2_1_FLOUT_CR0(ASD11CR0)
                                        (0059) 	db		85h, 40h		;LPF2_1_FLOUT_CR1(ASD11CR1)
                                        (0060) 	db		86h, 9fh		;LPF2_1_FLOUT_CR2(ASD11CR2)
                                        (0061) 	db		87h, 20h		;LPF2_1_FLOUT_CR3(ASD11CR3)
                                        (0062) ;  Instance name LPF2_2, User Module LPF2
                                        (0063) ;       Instance name LPF2_2, Block Name FLIN(ASC12)
                                        (0064) 	db		88h, 94h		;LPF2_2_FLIN_CR0(ASC12CR0)
                                        (0065) 	db		89h, 88h		;LPF2_2_FLIN_CR1(ASC12CR1)
                                        (0066) 	db		8ah, 00h		;LPF2_2_FLIN_CR2(ASC12CR2)
                                        (0067) 	db		8bh, 24h		;LPF2_2_FLIN_CR3(ASC12CR3)
                                        (0068) ;       Instance name LPF2_2, Block Name FLOUT(ASD13)
                                        (0069) 	db		8ch, 92h		;LPF2_2_FLOUT_CR0(ASD13CR0)
                                        (0070) 	db		8dh, 40h		;LPF2_2_FLOUT_CR1(ASD13CR1)
                                        (0071) 	db		8eh, 9fh		;LPF2_2_FLOUT_CR2(ASD13CR2)
                                        (0072) 	db		8fh, 20h		;LPF2_2_FLOUT_CR3(ASD13CR3)
                                        (0073) ;  Instance name PGA_1, User Module PGA
                                        (0074) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0075) 	db		71h, fdh		;PGA_1_GAIN_CR0(ACB00CR0)
                                        (0076) 	db		72h, a3h		;PGA_1_GAIN_CR1(ACB00CR1)
                                        (0077) 	db		73h, 20h		;PGA_1_GAIN_CR2(ACB00CR2)
                                        (0078) 	db		70h, 00h		;PGA_1_GAIN_CR3(ACB00CR3)
                                        (0079) ;  Instance name PGA_2, User Module PGA
                                        (0080) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0081) 	db		75h, 1dh		;PGA_2_GAIN_CR0(ACB01CR0)
                                        (0082) 	db		76h, 21h		;PGA_2_GAIN_CR1(ACB01CR1)
                                        (0083) 	db		77h, 20h		;PGA_2_GAIN_CR2(ACB01CR2)
                                        (0084) 	db		74h, 01h		;PGA_2_GAIN_CR3(ACB01CR3)
                                        (0085) ;  Instance name PGA_3, User Module PGA
                                        (0086) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0087) 	db		79h, fdh		;PGA_3_GAIN_CR0(ACB02CR0)
                                        (0088) 	db		7ah, a3h		;PGA_3_GAIN_CR1(ACB02CR1)
                                        (0089) 	db		7bh, 20h		;PGA_3_GAIN_CR2(ACB02CR2)
                                        (0090) 	db		78h, 00h		;PGA_3_GAIN_CR3(ACB02CR3)
                                        (0091) ;  Instance name PGA_4, User Module PGA
                                        (0092) ;       Instance name PGA_4, Block Name GAIN(ACB03)
                                        (0093) 	db		7dh, 1dh		;PGA_4_GAIN_CR0(ACB03CR0)
                                        (0094) 	db		7eh, 21h		;PGA_4_GAIN_CR1(ACB03CR1)
                                        (0095) 	db		7fh, 20h		;PGA_4_GAIN_CR2(ACB03CR2)
                                        (0096) 	db		7ch, 01h		;PGA_4_GAIN_CR3(ACB03CR3)
                                        (0097) ;  Instance name StopTimer, User Module Timer16
                                        (0098) ;       Instance name StopTimer, Block Name TIMER16_LSB(DBB10)
                                        (0099) 	db		33h, 00h		;StopTimer_CONTROL_LSB_REG(DBB10CR0)
                                        (0100) 	db		31h, 80h		;StopTimer_PERIOD_LSB_REG(DBB10DR1)
                                        (0101) 	db		32h, e8h		;StopTimer_COMPARE_LSB_REG(DBB10DR2)
                                        (0102) ;       Instance name StopTimer, Block Name TIMER16_MSB(DBB11)
                                        (0103) 	db		37h, 04h		;StopTimer_CONTROL_MSB_REG(DBB11CR0)
                                        (0104) 	db		35h, 0ch		;StopTimer_PERIOD_MSB_REG(DBB11DR1)
                                        (0105) 	db		36h, 03h		;StopTimer_COMPARE_MSB_REG(DBB11DR2)
                                        (0106) ;  Global Register values Bank 0
                                        (0107) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0108) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0109) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0110) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0111) 	db		e6h, 50h		; DecimatorControl_0 register (DEC_CR0)
                                        (0112) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0113) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0114) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0115) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0116) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0117) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0118) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0119) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0120) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0121) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0122) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0123) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0124) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0125) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0126) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0127) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0128) 	db		ffh
                                        (0129) LoadConfigTBL_project1_Bank1:
                                        (0130) ;  Instance name DUALADC_1, User Module DUALADC
                                        (0131) ;       Instance name DUALADC_1, Block Name ADC1(ASD20)
                                        (0132) ;       Instance name DUALADC_1, Block Name ADC2(ASD22)
                                        (0133) ;       Instance name DUALADC_1, Block Name CNT1(DBB00)
                                        (0134) 	db		20h, 21h		;DUALADC_1_fCounter1FN(DBB00FN)
                                        (0135) 	db		21h, 45h		;DUALADC_1_fCounter1SL(DBB00IN)
                                        (0136) 	db		22h, 40h		;DUALADC_1_fCounter1OS(DBB00OU)
                                        (0137) ;       Instance name DUALADC_1, Block Name CNT2(DCB03)
                                        (0138) 	db		2ch, 21h		;DUALADC_1_fCounter2FN(DCB03FN)
                                        (0139) 	db		2dh, 65h		;DUALADC_1_fCounter2SL(DCB03IN)
                                        (0140) 	db		2eh, 40h		;DUALADC_1_fCounter2OS(DCB03OU)
                                        (0141) ;       Instance name DUALADC_1, Block Name PWM16_LSB(DBB01)
                                        (0142) 	db		24h, 01h		;DUALADC_1_bfPWM_LSB_FN(DBB01FN)
                                        (0143) 	db		25h, 15h		;DUALADC_1_(DBB01IN)
                                        (0144) 	db		26h, 40h		;DUALADC_1_(DBB01OU)
                                        (0145) ;       Instance name DUALADC_1, Block Name PWM16_MSB(DCB02)
                                        (0146) 	db		28h, 21h		;DUALADC_1_bfPWM_MSB_FN(DCB02FN)
                                        (0147) 	db		29h, 35h		;DUALADC_1_(DCB02IN)
                                        (0148) 	db		2ah, 40h		;DUALADC_1_(DCB02OU)
                                        (0149) ;  Instance name LCD, User Module LCD
                                        (0150) ;  Instance name LPF2_1, User Module LPF2
                                        (0151) ;       Instance name LPF2_1, Block Name FLIN(ASC10)
                                        (0152) ;       Instance name LPF2_1, Block Name FLOUT(ASD11)
                                        (0153) ;  Instance name LPF2_2, User Module LPF2
                                        (0154) ;       Instance name LPF2_2, Block Name FLIN(ASC12)
                                        (0155) ;       Instance name LPF2_2, Block Name FLOUT(ASD13)
                                        (0156) ;  Instance name PGA_1, User Module PGA
                                        (0157) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0158) ;  Instance name PGA_2, User Module PGA
                                        (0159) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0160) ;  Instance name PGA_3, User Module PGA
                                        (0161) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0162) ;  Instance name PGA_4, User Module PGA
                                        (0163) ;       Instance name PGA_4, Block Name GAIN(ACB03)
                                        (0164) ;  Instance name StopTimer, User Module Timer16
                                        (0165) ;       Instance name StopTimer, Block Name TIMER16_LSB(DBB10)
                                        (0166) 	db		30h, 00h		;StopTimer_FUNC_LSB_REG(DBB10FN)
                                        (0167) 	db		31h, 17h		;StopTimer_INPUT_LSB_REG(DBB10IN)
                                        (0168) 	db		32h, 40h		;StopTimer_OUTPUT_LSB_REG(DBB10OU)
                                        (0169) ;       Instance name StopTimer, Block Name TIMER16_MSB(DBB11)
                                        (0170) 	db		34h, 20h		;StopTimer_FUNC_MSB_REG(DBB11FN)
                                        (0171) 	db		35h, 37h		;StopTimer_INPUT_MSB_REG(DBB11IN)
                                        (0172) 	db		36h, 40h		;StopTimer_OUTPUT_MSB_REG(DBB11OU)
                                        (0173) ;  Global Register values Bank 1
                                        (0174) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0175) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0176) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0177) 	db		62h, bch		; AnalogIOControl_0 register (ABF_CR0)
                                        (0178) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0179) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0180) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0181) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0182) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0183) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0184) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0185) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0186) 	db		e1h, 27h		; OscillatorControl_1 register (OSC_CR1)
                                        (0187) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0188) 	db		dfh, 19h		; OscillatorControl_3 register (OSC_CR3)
                                        (0189) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0190) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0191) 	db		ffh
                                        (0192) AREA psoc_config(rom, rel)
                                        (0193) LoadConfigTBL_project1_Ordered:
                                        (0194) ;  Ordered Global Register values
                                        (0195) 	M8C_SetBank0
02DE: 62 00 00 MOV   REG[0x0],0x0       (0196) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
02E1: 71 10    OR    F,0x10             
                                        (0197) 	M8C_SetBank1
02E3: 62 00 00 MOV   REG[0x0],0x0       (0198) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
02E6: 62 01 FF MOV   REG[0x1],0xFF      (0199) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
02E9: 70 EF    AND   F,0xEF             
                                        (0200) 	M8C_SetBank0
02EB: 62 03 FF MOV   REG[0x3],0xFF      (0201) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
02EE: 62 02 00 MOV   REG[0x2],0x0       (0202) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
02F1: 71 10    OR    F,0x10             
                                        (0203) 	M8C_SetBank1
02F3: 62 02 00 MOV   REG[0x2],0x0       (0204) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02F6: 62 03 00 MOV   REG[0x3],0x0       (0205) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02F9: 70 EF    AND   F,0xEF             
                                        (0206) 	M8C_SetBank0
02FB: 62 01 00 MOV   REG[0x1],0x0       (0207) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
02FE: 62 04 00 MOV   REG[0x4],0x0       (0208) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0301: 71 10    OR    F,0x10             
                                        (0209) 	M8C_SetBank1
0303: 62 04 00 MOV   REG[0x4],0x0       (0210) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0306: 62 05 FE MOV   REG[0x5],0xFE      (0211) 	mov	reg[05h], feh		; Port_1_DriveMode_1 register (PRT1DM1)
0309: 70 EF    AND   F,0xEF             
                                        (0212) 	M8C_SetBank0
030B: 62 07 FE MOV   REG[0x7],0xFE      (0213) 	mov	reg[07h], feh		; Port_1_DriveMode_2 register (PRT1DM2)
030E: 62 06 00 MOV   REG[0x6],0x0       (0214) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0311: 71 10    OR    F,0x10             
                                        (0215) 	M8C_SetBank1
0313: 62 06 00 MOV   REG[0x6],0x0       (0216) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0316: 62 07 00 MOV   REG[0x7],0x0       (0217) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0319: 70 EF    AND   F,0xEF             
                                        (0218) 	M8C_SetBank0
031B: 62 05 00 MOV   REG[0x5],0x0       (0219) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
031E: 62 08 00 MOV   REG[0x8],0x0       (0220) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0321: 71 10    OR    F,0x10             
                                        (0221) 	M8C_SetBank1
0323: 62 08 7F MOV   REG[0x8],0x7F      (0222) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0326: 62 09 80 MOV   REG[0x9],0x80      (0223) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0329: 70 EF    AND   F,0xEF             
                                        (0224) 	M8C_SetBank0
032B: 62 0B 80 MOV   REG[0xB],0x80      (0225) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
032E: 62 0A 00 MOV   REG[0xA],0x0       (0226) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0331: 71 10    OR    F,0x10             
                                        (0227) 	M8C_SetBank1
0333: 62 0A 00 MOV   REG[0xA],0x0       (0228) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0336: 62 0B 00 MOV   REG[0xB],0x0       (0229) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0339: 70 EF    AND   F,0xEF             
                                        (0230) 	M8C_SetBank0
033B: 62 09 00 MOV   REG[0x9],0x0       (0231) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
033E: 62 0C 00 MOV   REG[0xC],0x0       (0232) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0341: 71 10    OR    F,0x10             
                                        (0233) 	M8C_SetBank1
0343: 62 0C 00 MOV   REG[0xC],0x0       (0234) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0346: 62 0D 00 MOV   REG[0xD],0x0       (0235) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0349: 70 EF    AND   F,0xEF             
                                        (0236) 	M8C_SetBank0
034B: 62 0F 00 MOV   REG[0xF],0x0       (0237) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
034E: 62 0E 00 MOV   REG[0xE],0x0       (0238) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0351: 71 10    OR    F,0x10             
                                        (0239) 	M8C_SetBank1
0353: 62 0E 00 MOV   REG[0xE],0x0       (0240) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0356: 62 0F 00 MOV   REG[0xF],0x0       (0241) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0359: 70 EF    AND   F,0xEF             
                                        (0242) 	M8C_SetBank0
035B: 62 0D 00 MOV   REG[0xD],0x0       (0243) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
035E: 62 10 00 MOV   REG[0x10],0x0      (0244) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0361: 71 10    OR    F,0x10             
                                        (0245) 	M8C_SetBank1
0363: 62 10 00 MOV   REG[0x10],0x0      (0246) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0366: 62 11 00 MOV   REG[0x11],0x0      (0247) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0369: 70 EF    AND   F,0xEF             
                                        (0248) 	M8C_SetBank0
036B: 62 13 00 MOV   REG[0x13],0x0      (0249) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
036E: 62 12 00 MOV   REG[0x12],0x0      (0250) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0371: 71 10    OR    F,0x10             
                                        (0251) 	M8C_SetBank1
0373: 62 12 00 MOV   REG[0x12],0x0      (0252) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0376: 62 13 00 MOV   REG[0x13],0x0      (0253) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0379: 70 EF    AND   F,0xEF             
                                        (0254) 	M8C_SetBank0
037B: 62 11 00 MOV   REG[0x11],0x0      (0255) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
037E: 62 14 00 MOV   REG[0x14],0x0      (0256) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0381: 71 10    OR    F,0x10             
                                        (0257) 	M8C_SetBank1
0383: 62 14 00 MOV   REG[0x14],0x0      (0258) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0386: 62 15 00 MOV   REG[0x15],0x0      (0259) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0389: 70 EF    AND   F,0xEF             
                                        (0260) 	M8C_SetBank0
038B: 62 17 00 MOV   REG[0x17],0x0      (0261) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
038E: 62 16 00 MOV   REG[0x16],0x0      (0262) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0391: 71 10    OR    F,0x10             
                                        (0263) 	M8C_SetBank1
0393: 62 16 00 MOV   REG[0x16],0x0      (0264) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0396: 62 17 00 MOV   REG[0x17],0x0      (0265) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0399: 70 EF    AND   F,0xEF             
                                        (0266) 	M8C_SetBank0
039B: 62 15 00 MOV   REG[0x15],0x0      (0267) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
039E: 70 EF    AND   F,0xEF             
                                        (0268) 	M8C_SetBank0
03A0: 7F       RET                      (0269) 	ret
                                        (0270) 
                                        (0271) 
                                        (0272) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_project1
                                        (0026) export _LoadConfig_project1
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
03A1: 55 0E 00 MOV   [0xE],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
03A4: 55 0F 7F MOV   [0xF],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
03A7: 55 10 80 MOV   [paused_transitions],0x80(0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
03AA: 7C 03 B1 LCALL 0x03B1             (0069) 	lcall	LoadConfig_project1
03AD: 7C 02 DC LCALL 0x02DC             (0070) 	lcall	LoadConfigTBL_project1_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
03B0: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration project1
                                        (0078) ;
                                        (0079) ;    Load configuration registers for project1.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_project1:
                                        (0096)  LoadConfig_project1:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
03B1: 10       PUSH  X                  (0099) 	push	x
03B2: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
03B4: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
03B6: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
03B7: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_project1_Bank0
03B9: 57 E7    MOV   X,0xE7             (0105)     mov     X, <LoadConfigTBL_project1_Bank0
03BB: 7C 03 CC LCALL 0x03CC             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
03BE: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
03C0: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
03C1: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_project1_Bank1
03C3: 57 86    MOV   X,0x86             (0112)     mov     X, <LoadConfigTBL_project1_Bank1
03C5: 7C 03 CC LCALL 0x03CC             (0113)     lcall   LoadConfig              ; Load the bank 1 values
03C8: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
03CA: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
03CB: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
03CC: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
03CE: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
03CF: 08       PUSH  A                  (0143)     push    A
03D0: 4F       MOV   X,SP               (0144)     mov     X, SP
03D1: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
03D4: D0 04    JNC   0x03D9             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03D6: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
03D9: 18       POP   A                  (0149)     pop     A
03DA: 20       POP   X                  (0150)     pop     X
03DB: 70 EF    AND   F,0xEF             
03DD: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03E0: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
03E1: 08       PUSH  A                  (0156)     push    A
03E2: 28       ROMX                     (0157)     romx                            ; Load register address from table
03E3: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
03E5: A0 1F    JZ    0x0405             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
03E7: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
03E8: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
03EB: A0 03    JZ    0x03EF             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03ED: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
03EF: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
03F1: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
03F2: 20       POP   X                  (0167)     pop     X
03F3: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
03F4: 09 00    ADC   A,0x0              (0169)     adc     A, 0
03F6: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
03F7: 08       PUSH  A                  (0171)     push    A
03F8: 28       ROMX                     (0172)     romx                            ; load config data from the table
03F9: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
03FA: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
03FC: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
03FE: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
03FF: 20       POP   X                  (0177)     pop     X
0400: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0401: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0403: 8F D7    JMP   0x03DB             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0405: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
0407: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\stoptimer.asm                 (0001) ;;*****************************************************************************
0408: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: StopTimer.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "StopTimer.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  StopTimer_EnableInt
                                        (0030) export _StopTimer_EnableInt
                                        (0031) export  StopTimer_DisableInt
                                        (0032) export _StopTimer_DisableInt
                                        (0033) export  StopTimer_Start
                                        (0034) export _StopTimer_Start
                                        (0035) export  StopTimer_Stop
                                        (0036) export _StopTimer_Stop
                                        (0037) export  StopTimer_WritePeriod
                                        (0038) export _StopTimer_WritePeriod
                                        (0039) export  StopTimer_WriteCompareValue
                                        (0040) export _StopTimer_WriteCompareValue
                                        (0041) export  StopTimer_wReadCompareValue
                                        (0042) export _StopTimer_wReadCompareValue
                                        (0043) export  StopTimer_wReadTimer
                                        (0044) export _StopTimer_wReadTimer
                                        (0045) export  StopTimer_wReadTimerSaveCV
                                        (0046) export _StopTimer_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wStopTimer_ReadCompareValue  ; deprecated
                                        (0051) export _wStopTimer_ReadCompareValue  ; deprecated
                                        (0052) export  wStopTimer_ReadTimer         ; deprecated
                                        (0053) export _wStopTimer_ReadTimer         ; deprecated
                                        (0054) export  wStopTimer_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wStopTimer_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wStopTimer_ReadCounter       ; obsolete
                                        (0058) export _wStopTimer_ReadCounter       ; obsolete
                                        (0059) export  wStopTimer_CaptureCounter    ; obsolete
                                        (0060) export _wStopTimer_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA project1_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: StopTimer_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  StopTimer_EnableInt:
                                        (0098) _StopTimer_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    StopTimer_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
040B: 7F       RET                      (0102)    ret
040C: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: StopTimer_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  StopTimer_DisableInt:
                                        (0126) _StopTimer_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    StopTimer_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
040F: 7F       RET                      (0130)    ret
0410: 43 33 01 OR    REG[0x33],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: StopTimer_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  StopTimer_Start:
                                        (0154) _StopTimer_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    StopTimer_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0413: 7F       RET                      (0158)    ret
0414: 41 33 FE AND   REG[0x33],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: StopTimer_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  StopTimer_Stop:
                                        (0182) _StopTimer_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    StopTimer_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0417: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: StopTimer_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  StopTimer_WritePeriod:
                                        (0211) _StopTimer_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0418: 60 31    MOV   REG[0x31],A        (0213)    mov   reg[StopTimer_PERIOD_LSB_REG], A
041A: 5B       MOV   A,X                (0214)    mov   A, X
041B: 60 35    MOV   REG[0x35],A        (0215)    mov   reg[StopTimer_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
041D: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: StopTimer_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call StopTimer_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  StopTimer_WriteCompareValue:
                                        (0243) _StopTimer_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
041E: 60 32    MOV   REG[0x32],A        (0245)    mov   reg[StopTimer_COMPARE_LSB_REG], A
0420: 5B       MOV   A,X                (0246)    mov   A, X
0421: 60 36    MOV   REG[0x36],A        (0247)    mov   reg[StopTimer_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0423: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: StopTimer_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  StopTimer_wReadCompareValue:
                                        (0272) _StopTimer_wReadCompareValue:
                                        (0273)  wStopTimer_ReadCompareValue:                    ; this name deprecated
                                        (0274) _wStopTimer_ReadCompareValue:                    ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0424: 5D 36    MOV   A,REG[0x36]        (0276)    mov   A, reg[StopTimer_COMPARE_MSB_REG]
0426: 5C       MOV   X,A                (0277)    mov   X, A
0427: 5D 32    MOV   A,REG[0x32]        (0278)    mov   A, reg[StopTimer_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
0429: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: StopTimer_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  StopTimer_wReadTimerSaveCV:
                                        (0321) _StopTimer_wReadTimerSaveCV:
                                        (0322)  wStopTimer_ReadTimerSaveCV:                     ; this name deprecated
                                        (0323) _wStopTimer_ReadTimerSaveCV:                     ; this name deprecated
                                        (0324)  wStopTimer_ReadCounter:                         ; this name deprecated
                                        (0325) _wStopTimer_ReadCounter:                         ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
042A: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
042B: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
042D: 5D 33    MOV   A,REG[0x33]        (0334)    mov   A, reg[StopTimer_CONTROL_LSB_REG]       ; save the Control register
042F: 08       PUSH  A                  (0335)    push  A
0430: 5D 32    MOV   A,REG[0x32]        (0336)    mov   A, reg[StopTimer_COMPARE_LSB_REG]       ; save the Compare register
0432: 08       PUSH  A                  (0337)    push  A
0433: 5D 36    MOV   A,REG[0x36]        (0338)    mov   A, reg[StopTimer_COMPARE_MSB_REG]
0435: 08       PUSH  A                  (0339)    push  A
0436: 5D 30    MOV   A,REG[0x30]        (0340)    mov   A, reg[StopTimer_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
0438: 5D 36    MOV   A,REG[0x36]        (0342)    mov   A, reg[StopTimer_COMPARE_MSB_REG]       ; Now grab DR2 (DR0) and save
043A: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
043C: 5D 32    MOV   A,REG[0x32]        (0344)    mov   A, reg[StopTimer_COMPARE_LSB_REG]
043E: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0440: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0442: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0445: A0 03    JZ    0x0449             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0447: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
0449: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
044B: 70 FE    AND   F,0xFE             
044D: 41 33 FE AND   REG[0x33],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    StopTimer_Stop_M                              ; Disable (stop) the timer
0450: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0451: 60 36    MOV   REG[0x36],A        (0355)    mov   reg[StopTimer_COMPARE_MSB_REG], A
0453: 18       POP   A                  (0356)    pop   A
0454: 60 32    MOV   REG[0x32],A        (0357)    mov   reg[StopTimer_COMPARE_LSB_REG], A
0456: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
0457: 60 33    MOV   REG[0x33],A        (0359)    mov   reg[StopTimer_CONTROL_LSB_REG], A
0459: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
045A: 20       POP   X                  (0361)    pop   X
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
045B: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: StopTimer_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  StopTimer_wReadTimer:
                                        (0397) _StopTimer_wReadTimer:
                                        (0398)  wStopTimer_ReadTimer:                           ; this name deprecated
                                        (0399) _wStopTimer_ReadTimer:                           ; this name deprecated
                                        (0400)  wStopTimer_CaptureCounter:                      ; this name deprecated
                                        (0401) _wStopTimer_CaptureCounter:                      ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
045C: 5D 30    MOV   A,REG[0x30]        (0404)    mov   A, reg[StopTimer_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
045E: 5D 36    MOV   A,REG[0x36]        (0407)    mov   A, reg[StopTimer_COMPARE_MSB_REG]       ; Return DR2 (actually DR0)
0460: 5C       MOV   X,A                (0408)    mov   X, A
0461: 5D 32    MOV   A,REG[0x32]        (0409)    mov   A, reg[StopTimer_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0463: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File StopTimer.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0464: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0465: 10       PUSH  X                  (0209)     push  X
0466: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0467: B0 04    JNZ   0x046C             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0469: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
046A: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
046B: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
046C: 90 3C    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
046E: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
046F: 18       POP   A                  (0220)     pop   A
0470: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0471: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0473: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0474: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0486: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0487: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0488: 67       ASR   A                  (0262)     asr   A
0489: 67       ASR   A                  (0263)     asr   A
048A: 67       ASR   A                  (0264)     asr   A
048B: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
048D: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
048F: 90 19    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
0491: 18       POP   A                  (0268)     pop   A                            ; Restore value
0492: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0494: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0496: 90 12    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0498: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0499: 4B       SWAP  A,X                (0305)     swap  A,X
049A: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
049C: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
049D: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
049F: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
04A0: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
04A2: A0 06    JZ    0x04A9             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
04A4: 90 04    CALL  LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data|LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
04A6: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
04A7: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
04A9: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
04AA: 90 5F    CALL  0x050B             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
04AC: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
04AD: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
04AE: 67       ASR   A                  (0390)     asr   A
04AF: 67       ASR   A                  (0391)     asr   A
04B0: 67       ASR   A                  (0392)     asr   A
04B1: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
04B3: 90 38    CALL  0x04ED             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
04B5: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
04B6: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
04B8: 40       NOP                      (0397)     nop
04B9: 40       NOP                      (0398)     nop
04BA: 40       NOP                      (0399)     nop
04BB: 90 30    CALL  0x04ED             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
04BD: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
04BE: 90 4B    CALL  0x050B             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
04C0: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
04C1: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
04C2: 67       ASR   A                  (0436)     asr   A
04C3: 67       ASR   A                  (0437)     asr   A
04C4: 67       ASR   A                  (0438)     asr   A
04C5: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
04C7: 90 09    CALL  0x04D2             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
04C9: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
04CA: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
04CC: 40       NOP                      (0443)     nop
04CD: 40       NOP                      (0444)     nop
04CE: 40       NOP                      (0445)     nop
04CF: 90 01    CALL  0x04D2             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
04D1: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
04D2: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
04D3: 26 0E 80 AND   [0xE],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
04D6: 51 0E    MOV   A,[0xE]            (0480)     mov   A,[Port_2_Data_SHADE]
04D8: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
04DA: 18       POP   A                  (0483)     pop   A
04DB: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
04DD: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
04DF: 2A 0E    OR    A,[0xE]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
04E1: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
04E3: 53 0E    MOV   [0xE],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
04E5: 40       NOP                      (0489)     nop
04E6: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
04E8: 53 0E    MOV   [0xE],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
04EA: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
04EC: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
04ED: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
04EE: 26 0E 80 AND   [0xE],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
04F1: 2E 0E 20 OR    [0xE],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
04F4: 51 0E    MOV   A,[0xE]            (0527)     mov   A,[Port_2_Data_SHADE]
04F6: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
04F8: 18       POP   A                  (0530)     pop   A
04F9: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
04FB: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
04FD: 2A 0E    OR    A,[0xE]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
04FF: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0501: 53 0E    MOV   [0xE],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0503: 40       NOP                      (0536)     NOP
0504: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0506: 53 0E    MOV   [0xE],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0508: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
050A: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
050B: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
050C: 26 0E 80 AND   [0xE],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
050F: 51 0E    MOV   A,[0xE]            (0574)     mov   A,[Port_2_Data_SHADE]
0511: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0513: 26 0F F0 AND   [0xF],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0516: 51 0F    MOV   A,[0xF]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0518: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
051A: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
051C: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
051E: 2E 0E 40 OR    [0xE],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0521: 51 0E    MOV   A,[0xE]            (0584)     mov   A,[Port_2_Data_SHADE]
0523: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0525: 40       NOP                      (0586)     NOP
                                        (0587) 
0526: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0527: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0529: 2E 0E 50 OR    [0xE],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
052C: 51 0E    MOV   A,[0xE]            (0593)     mov   A,[Port_2_Data_SHADE]
052E: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0530: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0531: 40       NOP                      (0597)     nop
0532: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0534: 08       PUSH  A                  (0610)     push  A
0535: 26 0E C0 AND   [0xE],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0538: 51 0E    MOV   A,[0xE]            (0612)     mov   A,[Port_2_Data_SHADE]
053A: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
053C: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
053D: 40       NOP                      (0616)     nop                                    ; fastest PSoC
053E: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
053F: 2E 0E 50 OR    [0xE],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0542: 51 0E    MOV   A,[0xE]            (0620)     mov   A,[Port_2_Data_SHADE]
0544: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0546: 40       NOP                      (0623)     nop
0547: 40       NOP                      (0624)     nop
                                        (0625) 
0548: 26 0E C0 AND   [0xE],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
054B: 51 0E    MOV   A,[0xE]            (0627)     mov   A,[Port_2_Data_SHADE]
054D: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
054F: 18       POP   A                  (0630)     pop   A
0550: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0552: A0 04    JZ    0x0557             (0633)     jz    .UNLOCK
0554: 79       DEC   X                  (0634)     dec   X
0555: BF D3    JNZ   0x0529             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0557: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0558: 2E 0F 7F OR    [0xF],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
055B: 51 0F    MOV   A,[0xF]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
055D: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
055F: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0561: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0563: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0564: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0565: 26 0F 80 AND   [0xF],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0568: 2E 0F 7F OR    [0xF],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
056B: 26 10 80 AND   [paused_transitions],0x80(0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
056E: 51 0F    MOV   A,[0xF]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0570: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0572: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0574: 51 10    MOV   A,[paused_transitions](0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0576: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0578: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
057A: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
057C: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
057E: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0580: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0582: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0584: 9F 4C    CALL  0x04D2             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0586: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0588: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
058A: 50 03    MOV   A,0x3              (0707)     mov   A,03h
058C: 9F 44    CALL  0x04D2             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
058E: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0590: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0592: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0594: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0596: 9F 3A    CALL  0x04D2             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0598: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
059A: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
059C: 50 02    MOV   A,0x2              (0720)     mov   A,02h
059E: 9F 32    CALL  0x04D2             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
05A0: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05A2: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
05A4: 50 08    MOV   A,0x8              (0726)     mov   A,08h
05A6: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
05A8: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05AA: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
05AC: 50 01    MOV   A,0x1              (0731)     mov   A,01h
05AE: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
05B0: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05B2: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
05B4: 50 06    MOV   A,0x6              (0736)     mov   A,06h
05B6: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
05B8: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
05BA: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
05BC: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
05BE: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
05C0: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
05C2: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
05C4: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
05C6: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
05C8: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
05CA: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
05CC: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05CE: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
05D0: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
05D5: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
05D7: 10       PUSH  X                  (0791)     push  X                            ; Store COL
05D8: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
05DA: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
05DB: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
05DD: 20       POP   X                  (0795)     pop   X
                                        (0796) 
05DE: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
05E0: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
05E1: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
05E3: 78       DEC   A                  (0828)     dec   A
05E4: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
05E6: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
05EF: 08       PUSH  A                  (0871)     push  A
05F0: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
05F2: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
05F4: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
05F6: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
05F8: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
05FA: D0 06    JNC   0x0601             (0877)     jnc   .Delay50u_End
05FC: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
05FE: 78       DEC   A                  (0880)     dec   A                              ; [4]
05FF: BF FE    JNZ   0x05FE             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0601: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0602: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\dualadc_1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   DUALADC_1INT.asm
                                        (0004) ;;  Version: 2.30, Updated on 2015/3/4 at 22:26:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC Interrupt Service Routines.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "DUALADC_1.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export _DUALADC_1_CNT1_ISR
                                        (0022) export _DUALADC_1_CNT2_ISR
                                        (0023) export _DUALADC_1_PWM16_ISR
                                        (0024) 
                                        (0025) export  DUALADC_1_cCounter1U
                                        (0026) export  DUALADC_1_cCounter2U
                                        (0027) export _DUALADC_1_iResult1
                                        (0028) export  DUALADC_1_iResult1
                                        (0029) export _DUALADC_1_iResult2
                                        (0030) export  DUALADC_1_iResult2
                                        (0031) export _DUALADC_1_bfStatus
                                        (0032) export  DUALADC_1_bfStatus
                                        (0033) export  DUALADC_1_bSampC
                                        (0034) 
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM, REL, CON)
                                        (0040) 
                                        (0041)  DUALADC_1_cCounter1U:     BLK   1  ;The Upper byte of the Counter
                                        (0042)  DUALADC_1_cCounter2U:     BLK   1  ;The Upper byte of the Counter
                                        (0043) _DUALADC_1_iResult1:
                                        (0044)  DUALADC_1_iResult1:       BLK   2  ;A/D value
                                        (0045) _DUALADC_1_iResult2:
                                        (0046)  DUALADC_1_iResult2:       BLK   2  ;A/D value
                                        (0047) _DUALADC_1_bfStatus:
                                        (0048)  DUALADC_1_bfStatus:       BLK   1  ;Data Valid Flag
                                        (0049)  DUALADC_1_bSampC:         BLK   1  ;# of times to run A/D
                                        (0050) 
                                        (0051) 
                                        (0052) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0053) ;---------------------------------------------------
                                        (0054) ; Insert your custom declarations below this banner
                                        (0055) ;---------------------------------------------------
                                        (0056) 
                                        (0057) ;------------------------
                                        (0058) ; Includes
                                        (0059) ;------------------------
                                        (0060) 
                                        (0061) 	
                                        (0062) ;------------------------
                                        (0063) ;  Constant Definitions
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 
                                        (0072) ;---------------------------------------------------
                                        (0073) ; Insert your custom declarations above this banner
                                        (0074) ;---------------------------------------------------
                                        (0075) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0076) 
                                        (0077) 
                                        (0078) ;-----------------------------------------------
                                        (0079) ;  EQUATES and TABLES
                                        (0080) ;-----------------------------------------------
                                        (0081) ; Constant Definitions
                                        (0082) LowByte:   equ 1
                                        (0083) HighByte:  equ 0
                                        (0084) 
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) 
                                        (0088) 
                                        (0089) .LITERAL
                                        (0090) DUALADC_1MaxNegX4Table:
                                        (0091) ; Bits  7    8    9   10   11   12   13
                                        (0092)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0093) 
                                        (0094) DUALADC_1MaxPosX4Table:
                                        (0095) IF (DUALADC_1_DATA_FORMAT)
                                        (0096) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0097)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0098) ELSE
                                        (0099) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0100)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0101) 
                                        (0102) ENDIF
                                        (0103) .ENDLITERAL
                                        (0104) 
                                        (0105) 
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: _DUALADC_1_CNT1_ISR (Counter8 Interrupt)
                                        (0108) ;
                                        (0109) ;
                                        (0110) ;  DESCRIPTION:
                                        (0111) ;    Increment the upper (software) half on the counter whenever the
                                        (0112) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0113) ;    should start out at the most negative value (0xFF).
                                        (0114) ;
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;
                                        (0117) _DUALADC_1_CNT1_ISR:
0611: 76 11    INC   [paused_transitions+1](0118)    inc [DUALADC_1_cCounter1U]
                                        (0119)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0120)    ;---------------------------------------------------
                                        (0121)    ; Insert your custom code below this banner
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ;   NOTE: interrupt service routines must preserve
                                        (0124)    ;   the values of the A and X CPU registers.
                                        (0125) 
                                        (0126)    ;---------------------------------------------------
                                        (0127)    ; Insert your custom code above this banner
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ;@PSoC_UserCode_END@ (Do not change this line.)
0613: 7E       RETI                     (0130)    reti
                                        (0131) 
                                        (0132) 
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;  FUNCTION NAME: _DUALADC_1_CNT2_ISR (Counter8 Interrupt)
                                        (0135) ;
                                        (0136) ;
                                        (0137) ;  DESCRIPTION:
                                        (0138) ;  Increment the upper (software) half on the counter whenever the
                                        (0139) ;  lower (hardware) half of the counter underflows.  This counter
                                        (0140) ;  should start out at the most negative value (0xFF).
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) _DUALADC_1_CNT2_ISR:
0614: 76 12    INC   [paused_transitions+2](0145)    inc [DUALADC_1_cCounter2U]
                                        (0146)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0147)    ;---------------------------------------------------
                                        (0148)    ; Insert your custom code below this banner
                                        (0149)    ;---------------------------------------------------
                                        (0150)    ;   NOTE: interrupt service routines must preserve
                                        (0151)    ;   the values of the A and X CPU registers.
                                        (0152) 
                                        (0153)    ;---------------------------------------------------
                                        (0154)    ; Insert your custom code above this banner
                                        (0155)    ;---------------------------------------------------
                                        (0156)    ;@PSoC_UserCode_END@ (Do not change this line.)
0616: 7E       RETI                     (0157)    reti
                                        (0158) 
                                        (0159) 
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) ;  FUNCTION NAME: _DUALADC_1_PWM16_ISR  (PWM16 Interrupt)
                                        (0162) ;
                                        (0163) ;  DESCRIPTION:
                                        (0164) ;  This ISR is called when the ADC has completed and integrate cycle.
                                        (0165) ;  The ADC value is calculated and stored in a global location before
                                        (0166) ;  the end of the ISR.
                                        (0167) ;
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) _DUALADC_1_PWM16_ISR:
0617: 41 23 FE AND   REG[0x23],0xFE     (0171)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE  ; Disable Counter
061A: 41 2F FE AND   REG[0x2F],0xFE     (0172)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE  ; Disable Counter
                                        (0173) IF DUALADC_1_NoAZ
061D: 43 92 20 OR    REG[0x92],0x20     (0174)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero     ; Put Integrator in AutoZero
0620: 43 9A 20 OR    REG[0x9A],0x20     (0175)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero     ; Put Integrator in AutoZero
                                        (0176) ENDIF
0623: 43 93 10 OR    REG[0x93],0x10     (0177)    or   reg[DUALADC_1_bfADC1cr3],DUALADC_1_fFSW0           ; Put Integrator in reset
0626: 43 9B 10 OR    REG[0x9B],0x10     (0178)    or   reg[DUALADC_1_bfADC2cr3],DUALADC_1_fFSW0           ; Put Integrator in reset
0629: 71 01    OR    F,0x1              
                                        (0179) 
                                        (0180)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0181)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0182)    M8C_EnableGInt
062B: 40       NOP                      (0183)    nop                                                     ; Wait a couple cycles
062C: 70 FE    AND   F,0xFE             
                                        (0184)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
062E: 08       PUSH  A                  (0185)    push  A                                                 ; Save the Accumulator
                                        (0186) 
                                        (0187) 
                                        (0188)    ; Get ADC1 result
062F: 5D 20    MOV   A,REG[0x20]        (0189)    mov   A,reg[DUALADC_1_bCount1]                          ; Read counter value  (Bogus read puts value in Period register)
0631: 5D 22    MOV   A,REG[0x22]        (0190)    mov   A,reg[DUALADC_1_bCompare1]                        ; Read counter value
0633: 78       DEC   A                  (0191)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0634: 73       CPL   A                  (0192)    cpl   A                                                 ; Invert the value
0635: D0 03    JNC   0x0639             (0193)    jnc   DUALADC_1_INT_CALCV1                              ; if carry, then inc MSB as well
0637: 76 11    INC   [paused_transitions+1](0194)    inc   [DUALADC_1_cCounter1U]
                                        (0195) DUALADC_1_INT_CALCV1:
0639: 53 14    MOV   [paused_transitions+4],A(0196)    mov   [(DUALADC_1_iResult1 + LowByte)],A                ; Store LSB value
063B: 51 11    MOV   A,[paused_transitions+1](0197)    mov   A, [DUALADC_1_cCounter1U]                         ; Store MSB from temp counter
063D: 53 13    MOV   [paused_transitions+3],A(0198)    mov   [(DUALADC_1_iResult1 + HighByte)],A
                                        (0199) 
                                        (0200)    ; Get ADC2 result
063F: 5D 2C    MOV   A,REG[0x2C]        (0201)    mov   A,reg[DUALADC_1_bCount2]                          ; Read counter value  (Bogus read puts value in Period register)
0641: 5D 2E    MOV   A,REG[0x2E]        (0202)    mov   A,reg[DUALADC_1_bCompare2]                        ; Read counter value
0643: 78       DEC   A                  (0203)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0644: 73       CPL   A                  (0204)    cpl   A                                                 ; Invert the value
0645: D0 03    JNC   0x0649             (0205)    jnc   DUALADC_1_INT_CALCV2                              ; if carry, then inc MSB as well
0647: 76 12    INC   [paused_transitions+2](0206)    inc   [DUALADC_1_cCounter2U]
                                        (0207) DUALADC_1_INT_CALCV2:
0649: 53 16    MOV   [paused_transitions+6],A(0208)    mov   [(DUALADC_1_iResult2 + LowByte)],A                ; Store LSB value
064B: 51 12    MOV   A,[paused_transitions+2](0209)    mov   A, [DUALADC_1_cCounter2U]                         ; Store MSB from temp counter
064D: 53 15    MOV   [paused_transitions+5],A(0210)    mov   [(DUALADC_1_iResult2 + HighByte)],A
                                        (0211) 
                                        (0212)                                                            ; The new value has been stored,
                                        (0213)                                                            ; so get counters ready for next reading first.
064F: 62 21 FF MOV   REG[0x21],0xFF     (0214)    mov   reg[DUALADC_1_bPeriod1], ffh                      ; Initialize counter1 to FF - Set to overflow after 256 counts
0652: 62 2D FF MOV   REG[0x2D],0xFF     (0215)    mov   reg[DUALADC_1_bPeriod2], ffh                      ; Initialize counter2 to FF - Set to overflow after 256 counts
0655: 43 23 01 OR    REG[0x23],0x1      (0216)    or    reg[DUALADC_1_bCounter1_CR0],DUALADC_1_fDBLK_ENABLE  ; Enable Counter1
0658: 43 2F 01 OR    REG[0x2F],0x1      (0217)    or    reg[DUALADC_1_bCounter2_CR0],DUALADC_1_fDBLK_ENABLE  ; Enable Counter2
                                        (0218) 
                                        (0219) 
                                        (0220) IF (DUALADC_1_DATA_FORMAT)                                 ; Only check for Negative numbers if SIGNED result
                                        (0221)    mov   A, [DUALADC_1_bfStatus]                           ; Get Status with Resolution
                                        (0222)    and   A, DUALADC_1_bRES_MASK                            ; Mask of resolution
                                        (0223)    index DUALADC_1MaxNegX4Table                            ; Get Maximum negative value from table
                                        (0224)    mov   [DUALADC_1_cCounter1U], A                         ; Place result back into MSB of counter
                                        (0225)    mov   [DUALADC_1_cCounter2U], A                         ; Place result back into MSB of counter
                                        (0226) ELSE
065B: 55 11 00 MOV   [paused_transitions+1],0x0(0227)    mov   [DUALADC_1_cCounter1U], 00h                       ; Place result back into MSB of counter
065E: 55 12 00 MOV   [paused_transitions+2],0x0(0228)    mov   [DUALADC_1_cCounter2U], 00h                       ; Place result back into MSB of counter
                                        (0229) ENDIF
                                        (0230) 
                                        (0231)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0232)    ;---------------------------------------------------
                                        (0233)    ; If the input is muxed with multiple inputs
                                        (0234)    ; this is a good place to change inputs.
                                        (0235)    ; Insert your custom code below this banner
                                        (0236)    ;---------------------------------------------------
                                        (0237)    ;   NOTE: interrupt service routines must preserve
                                        (0238)    ;   the values of the A and X CPU registers. At this
                                        (0239)    ;   point A has been preserved on the stack and will
                                        (0240)    ;   be restored before the return from interrupt.
                                        (0241)    ;   However, if you use the X register, you must
                                        (0242)    ;   preserve its value and restore it here.
                                        (0243) 
                                        (0244) 
                                        (0245)    ;---------------------------------------------------
                                        (0246)    ; Insert your custom code above this banner
                                        (0247)    ;---------------------------------------------------
                                        (0248)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0249) 
0661: 41 93 EF AND   REG[0x93],0xEF     (0250)    and   reg[DUALADC_1_bfADC1cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
0664: 41 9B EF AND   REG[0x9B],0xEF     (0251)    and   reg[DUALADC_1_bfADC2cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
                                        (0252) IF DUALADC_1_NoAZ
0667: 41 92 DF AND   REG[0x92],0xDF     (0253)    and   reg[DUALADC_1_bfADC1cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
066A: 41 9A DF AND   REG[0x9A],0xDF     (0254)    and   reg[DUALADC_1_bfADC2cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
                                        (0255) ENDIF
                                        (0256) 
                                        (0257) 
                                        (0258)    ;****************************************************************************
                                        (0259)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0260)    ;                          ; if stack space isn't at a premium.
                                        (0261)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0262)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0263)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0264)    ;        successful acquisition of the next byte.
                                        (0265)    ;****************************************************************************
                                        (0266) 
                                        (0267) ; ADC1
                                        (0268) IF (DUALADC_1_DATA_FORMAT)                       ; Only check for Negative numbers if SIGNED result
                                        (0269)                                                  ; Negative Overflow Check
                                        (0270)    tst   [(DUALADC_1_iResult1 + HighByte)],80h
                                        (0271)    jnz   DUALADC_1_NOT_2POVFL1
                                        (0272) 
                                        (0273) ENDIF
                                        (0274)                                                  ; Postive Overflow Check
                                        (0275)                                                  ; Get MSB of Max Positive value x4 + 1
066D: 51 17    MOV   A,[paused_transitions+7](0276)    mov   A,[DUALADC_1_bfStatus]                  ; Get Status with Resolution
066F: 21 0F    AND   A,0xF              (0277)    and   A,DUALADC_1_bRES_MASK                   ; Mask of resolution normalized to 0
0671: FF 97    INDEX 0x060A             (0278)    index DUALADC_1MaxPosX4Table                  ; Get Maximum positive value x4 + 1 from table
0673: 08       PUSH  A                  (0279)    push  A
0674: 22 13    AND   A,[paused_transitions+3](0280)    and   A, [(DUALADC_1_iResult1 + HighByte)]
0676: A0 0B    JZ    0x0682             (0281)    jz    DUALADC_1_NOT_POVFL1
                                        (0282)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0678: 18       POP   A                  (0283)    pop   A
0679: 11 01    SUB   A,0x1              (0284)    sub   A, 01h
                                        (0285)                                                  ; Force most positive * 4 into result
067B: 53 13    MOV   [paused_transitions+3],A(0286)    mov   [(DUALADC_1_iResult1 + HighByte)], A
067D: 55 14 FF MOV   [paused_transitions+4],0xFF(0287)    mov   [(DUALADC_1_iResult1 + LowByte)], ffh
0680: 80 02    JMP   0x0683             (0288)    jmp   DUALADC_1_NOT_2POVFL1
                                        (0289) DUALADC_1_NOT_POVFL1:
0682: 18       POP   A                  (0290)    pop   A
                                        (0291) 
                                        (0292) DUALADC_1_NOT_2POVFL1:
0683: 68 13    ASR   [paused_transitions+3](0293)    asr   [(DUALADC_1_iResult1 + HighByte)]       ; Shift MSB and LSB right twice to divide by four
0685: 6E 14    RRC   [paused_transitions+4](0294)    rrc   [(DUALADC_1_iResult1 + LowByte)]        ; Remember digital clock 4 times analog clock
0687: 68 13    ASR   [paused_transitions+3](0295)    asr   [(DUALADC_1_iResult1 + HighByte)]
0689: 6E 14    RRC   [paused_transitions+4](0296)    rrc   [(DUALADC_1_iResult1 + LowByte)]
                                        (0297) 
                                        (0298) ; ADC2
                                        (0299) IF (DUALADC_1_DATA_FORMAT)                       ; Only check for Negative numbers if SIGNED result
                                        (0300)                                                  ; Negative Overflow Check
                                        (0301)    tst   [(DUALADC_1_iResult2 + HighByte)],80h
                                        (0302)    jnz   DUALADC_1_NOT_2POVFL2
                                        (0303) 
                                        (0304) ENDIF
                                        (0305)                                                  ; Postive Overflow Check
                                        (0306)                                                  ; Get MSB of Max Positive value x4 + 1
068B: 51 17    MOV   A,[paused_transitions+7](0307)    mov   A,[DUALADC_1_bfStatus]                  ; Get Status with Resolution
068D: 21 0F    AND   A,0xF              (0308)    and   A,DUALADC_1_bRES_MASK                   ; Mask of resolution normalized to 0
068F: FF 79    INDEX 0x060A             (0309)    index DUALADC_1MaxPosX4Table                  ; Get Maximum positive value x4 + 1 from table
0691: 08       PUSH  A                  (0310)    push  A
0692: 22 15    AND   A,[paused_transitions+5](0311)    and   A, [(DUALADC_1_iResult2 + HighByte)]
0694: A0 0B    JZ    0x06A0             (0312)    jz    DUALADC_1_NOT_POVFL2
                                        (0313)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0696: 18       POP   A                  (0314)    pop   A
0697: 11 01    SUB   A,0x1              (0315)    sub   A, 01h
                                        (0316)                                                  ; Force most positive * 4 into result
0699: 53 15    MOV   [paused_transitions+5],A(0317)    mov   [(DUALADC_1_iResult2 + HighByte)], A
069B: 55 16 FF MOV   [paused_transitions+6],0xFF(0318)    mov   [(DUALADC_1_iResult2 + LowByte)], ffh
069E: 80 02    JMP   0x06A1             (0319)    jmp   DUALADC_1_NOT_2POVFL2
                                        (0320) DUALADC_1_NOT_POVFL2:
06A0: 18       POP   A                  (0321)    pop   A
                                        (0322) 
                                        (0323) DUALADC_1_NOT_2POVFL2:
06A1: 68 15    ASR   [paused_transitions+5](0324)    asr   [(DUALADC_1_iResult2 + HighByte)]       ; Shift MSB and LSB right twice to divide by four
06A3: 6E 16    RRC   [paused_transitions+6](0325)    rrc   [(DUALADC_1_iResult2 + LowByte)]        ; Remember digital clock 4 times analog clock
06A5: 68 15    ASR   [paused_transitions+5](0326)    asr   [(DUALADC_1_iResult2 + HighByte)]
06A7: 6E 16    RRC   [paused_transitions+6](0327)    rrc   [(DUALADC_1_iResult2 + LowByte)]
                                        (0328) 
                                        (0329)    ;**********************************************
                                        (0330)    ; Data is ready at this point.
                                        (0331)    ; If processing Data at Interrupt level - add
                                        (0332)    ;     User Code to handle the data
                                        (0333)    ;**********************************************
                                        (0334)    ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
                                        (0335)    ;---------------------------------------------------
                                        (0336)    ; Insert your custom code below this banner
                                        (0337)    ;---------------------------------------------------
                                        (0338)    ;   NOTE: interrupt service routines must preserve
                                        (0339)    ;   the values of the A and X CPU registers. At this
                                        (0340)    ;   point A has been preserved on the stack and wil
                                        (0341)    ;   be restored later. However, if you use X, be
                                        (0342)    ;   sure to take care of it yourself!
                                        (0343) 
                                        (0344) 
                                        (0345)    ;---------------------------------------------------
                                        (0346)    ; Insert your custom code above this banner
                                        (0347)    ;---------------------------------------------------
                                        (0348)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0349) 
06A9: 18       POP   A                  (0350)    pop   A                                       ; Restore A, not used any more
                                        (0351) 
06AA: 2E 17 10 OR    [paused_transitions+7],0x10(0352)    or    [DUALADC_1_bfStatus],DUALADC_1_fDATA_READY  ; Set Data ready bit
                                        (0353) 
06AD: 47 18 FF TST   [paused_transitions+8],0xFF(0354)    tst   [DUALADC_1_bSampC], ffh                 ; If sample_counter == 0 -->> continuous data collection
06B0: A0 23    JZ    0x06D4             (0355)    jz    DUALADC_1_END_PWM16_ISR
                                        (0356) 
06B2: 7A 18    DEC   [paused_transitions+8](0357)    dec   [DUALADC_1_bSampC]                      ; Dec sample counter and check for zero
06B4: B0 1F    JNZ   0x06D4             (0358)    jnz   DUALADC_1_END_PWM16_ISR
                                        (0359) 
06B6: 41 27 FE AND   REG[0x27],0xFE     (0360)    and   reg[DUALADC_1_fPWM_LSB_CR0], ~DUALADC_1_fDBLK_ENABLE     ; Disable the PWM
                                        (0361) 
06B9: 41 23 FE AND   REG[0x23],0xFE     (0362)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
06BC: 41 2F FE AND   REG[0x2F],0xFE     (0363)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
                                        (0364) 
                                        (0365) IF DUALADC_1_NoAZ
06BF: 43 92 20 OR    REG[0x92],0x20     (0366)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
06C2: 43 9A 20 OR    REG[0x9A],0x20     (0367)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
                                        (0368) ENDIF
                                        (0369) 
06C5: 43 93 10 OR    REG[0x93],0x10     (0370)    or    reg[DUALADC_1_bfADC1cr3], DUALADC_1_fFSW0             ; Put Integrator into reset
06C8: 43 9B 10 OR    REG[0x9B],0x10     (0371)    or    reg[DUALADC_1_bfADC2cr3], DUALADC_1_fFSW0             ; Put Integrator into reset
                                        (0372) 
06CB: 41 E1 FB AND   REG[0xE1],0xFB     (0373)    and   reg[DUALADC_1_bfPWM16_INT_REG], ~DUALADC_1_bfPWM16_Mask      ; Disable interrupts
06CE: 41 E1 FE AND   REG[0xE1],0xFE     (0374)    and   reg[DUALADC_1_bfCounter1_INT_REG], ~DUALADC_1_bfCounter1_Mask
06D1: 41 E1 F7 AND   REG[0xE1],0xF7     (0375)    and   reg[DUALADC_1_bfCounter2_INT_REG], ~DUALADC_1_bfCounter2_Mask
                                        (0376) 
                                        (0377) DUALADC_1_END_PWM16_ISR:
06D4: 7E       RETI                     (0378)    reti
                                        (0379) 
                                        (0380) DUALADC_1_APIINT_END:
FILE: C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\FINAL_~1\FINAL_~1\FINAL_~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include <string.h>
(0008) #include <stddef.h>
(0009) 
(0010) // Output-related functions
(0011) void itoa(unsigned short input, char *str, int base);
(0012) void LCD_line_print(char *str, unsigned char line);
(0013) #define LCD_LINE_1 0
(0014) #define LCD_LINE_2 1
(0015) 
(0016) // FSM/timer-related functions
(0017) void do_nothing(void);
(0018) void start_timer(void);
(0019) void pause_timer(void);
(0020) void reset_timer(void);
(0021) 
(0022) // Timer global variable
(0023) unsigned short time;
(0024) 
(0025) /*******************************************************************************
(0026)  * State machine definitions
(0027)  ******************************************************************************/
(0028) 
(0029) // event enum
(0030) typedef enum {
(0031) 	short_pressed, long_pressed, eol
(0032) } event;
(0033) 
(0034) // state enum
(0035) typedef enum {
(0036) 	stopped, running, paused
(0037) } state;
(0038) 
(0039) // transition and table
(0040) typedef struct {
(0041) 	event event_val;
(0042) 	void (*task) (void);
(0043) 	state next_state;
(0044) } transition;
(0045) 
(0046) // fsm function
(0047) void stopwatch_fsm(event event_input){
__UserModules_end|__text_start|_stopwatch_fsm|_stopwatch_fsm:
  i                    --> X+0
  event_input          --> X-4
    06D5: 10       PUSH  X
    06D6: 4F       MOV   X,SP
    06D7: 38 02    ADD   SP,0x2
(0048) 	static const transition stopped_transitions[] = {
(0049) 	//	Event			Task		Next_state
(0050) 		{short_pressed, start_timer, running},
(0051) 		{eol,			do_nothing,	stopped}
(0052) 	};
(0053) 	static const transition running_transitions[] = {
(0054) 	//	Event			Task		Next_state
(0055) 		{short_pressed, pause_timer, paused},
(0056) 		{eol,			do_nothing,	running}
(0057) 	};
(0058) 	static const transition paused_transitions[] = {
(0059) 	//	Event			Task		Next_state
(0060) 		{short_pressed, start_timer, running},
(0061) 		{long_pressed,	reset_timer, stopped},
(0062) 		{eol,			do_nothing,	paused}
(0063) 	};
(0064) 	// FSM table. Since it is const, it will be stored in FLASH
(0065) 	static const transition *fsm_table[3] = {
(0066) 		stopped_transitions,
(0067) 		running_transitions,
(0068) 		paused_transitions
(0069) 	};
(0070) 	// stopwatch current state
(0071) 	static state cs = stopped;
(0072) 
(0073) 	// search for signal
(0074) 	int i;
(0075) 	for (i = 0; (fsm_table[cs][i].event_val != event_input)
    06D9: 56 01 00 MOV   [X+1],0x0
    06DC: 56 00 00 MOV   [X+0],0x0
    06DF: 80 06    JMP   0x06E6
(0076) 		&& (fsm_table[cs][i].event_val != eol); i++){
(0077) 	};
    06E1: 77 01    INC   [X+1]
    06E3: 0F 00 00 ADC   [X+0],0x0
    06E6: 5F 0C 06 MOV   [__r1],[cs]
    06E9: 65 0C    ASL   [__r1]
    06EB: 06 0C 00 ADD   [__r1],0x0
    06EE: 3E 0C    MVI   A,[__r1]
    06F0: 53 0D    MOV   [__r0],A
    06F2: 3E 0C    MVI   A,[__r1]
    06F4: 53 0C    MOV   [__r1],A
    06F6: 52 01    MOV   A,[X+1]
    06F8: 53 0A    MOV   [__r3],A
    06FA: 52 00    MOV   A,[X+0]
    06FC: 53 0B    MOV   [__r2],A
    06FE: 65 0A    ASL   [__r3]
    0700: 6B 0B    RLC   [__r2]
    0702: 65 0A    ASL   [__r3]
    0704: 6B 0B    RLC   [__r2]
    0706: 51 0A    MOV   A,[__r3]
    0708: 02 0C    ADD   A,[__r1]
    070A: 53 0C    MOV   [__r1],A
    070C: 51 0B    MOV   A,[__r2]
    070E: 0A 0D    ADC   A,[__r0]
    0710: 10       PUSH  X
    0711: 58 0C    MOV   X,[__r1]
    0713: 28       ROMX  
    0714: 20       POP   X
    0715: 53 0C    MOV   [__r1],A
    0717: 55 0D 00 MOV   [__r0],0x0
    071A: 52 FC    MOV   A,[X-4]
    071C: 53 0A    MOV   [__r3],A
    071E: 55 0B 00 MOV   [__r2],0x0
    0721: 50 00    MOV   A,0x0
    0723: 3A 0B    CMP   A,[__r2]
    0725: B0 07    JNZ   0x072D
    0727: 51 0C    MOV   A,[__r1]
    0729: 3A 0A    CMP   A,[__r3]
    072B: A0 0B    JZ    0x0737
    072D: 3C 0D 00 CMP   [__r0],0x0
    0730: BF B0    JNZ   0x06E1
    0732: 3C 0C 02 CMP   [__r1],0x2
    0735: BF AB    JNZ   0x06E1
(0078) 	// call task function and than change state
(0079) 	fsm_table[cs][i].task();
    0737: 5F 0C 06 MOV   [__r1],[cs]
    073A: 65 0C    ASL   [__r1]
    073C: 06 0C 00 ADD   [__r1],0x0
    073F: 3E 0C    MVI   A,[__r1]
    0741: 53 0D    MOV   [__r0],A
    0743: 3E 0C    MVI   A,[__r1]
    0745: 53 0C    MOV   [__r1],A
    0747: 52 01    MOV   A,[X+1]
    0749: 53 0A    MOV   [__r3],A
    074B: 52 00    MOV   A,[X+0]
    074D: 53 0B    MOV   [__r2],A
    074F: 65 0A    ASL   [__r3]
    0751: 6B 0B    RLC   [__r2]
    0753: 65 0A    ASL   [__r3]
    0755: 6B 0B    RLC   [__r2]
    0757: 51 0A    MOV   A,[__r3]
    0759: 02 0C    ADD   A,[__r1]
    075B: 53 0C    MOV   [__r1],A
    075D: 51 0B    MOV   A,[__r2]
    075F: 0A 0D    ADC   A,[__r0]
    0761: 53 0D    MOV   [__r0],A
    0763: 06 0C 01 ADD   [__r1],0x1
    0766: 0E 0D 00 ADC   [__r0],0x0
    0769: 51 0D    MOV   A,[__r0]
    076B: 10       PUSH  X
    076C: 58 0C    MOV   X,[__r1]
    076E: 08       PUSH  A
    076F: 28       ROMX  
    0770: 53 0D    MOV   [__r0],A
    0772: 18       POP   A
    0773: 75       INC   X
    0774: 09 00    ADC   A,0x0
    0776: 28       ROMX  
    0777: 5C       MOV   X,A
    0778: 51 0D    MOV   A,[__r0]
    077A: 7C 0B 74 LCALL __plcall
    077D: 20       POP   X
(0080) 	cs = fsm_table[cs][i].next_state;
    077E: 5F 0C 06 MOV   [__r1],[cs]
    0781: 65 0C    ASL   [__r1]
    0783: 06 0C 00 ADD   [__r1],0x0
    0786: 3E 0C    MVI   A,[__r1]
    0788: 53 0D    MOV   [__r0],A
    078A: 3E 0C    MVI   A,[__r1]
    078C: 53 0C    MOV   [__r1],A
    078E: 52 01    MOV   A,[X+1]
    0790: 53 0A    MOV   [__r3],A
    0792: 52 00    MOV   A,[X+0]
    0794: 53 0B    MOV   [__r2],A
    0796: 65 0A    ASL   [__r3]
    0798: 6B 0B    RLC   [__r2]
    079A: 65 0A    ASL   [__r3]
    079C: 6B 0B    RLC   [__r2]
    079E: 51 0A    MOV   A,[__r3]
    07A0: 02 0C    ADD   A,[__r1]
    07A2: 53 0C    MOV   [__r1],A
    07A4: 51 0B    MOV   A,[__r2]
    07A6: 0A 0D    ADC   A,[__r0]
    07A8: 53 0D    MOV   [__r0],A
    07AA: 06 0C 03 ADD   [__r1],0x3
    07AD: 0E 0D 00 ADC   [__r0],0x0
    07B0: 51 0D    MOV   A,[__r0]
    07B2: 10       PUSH  X
    07B3: 58 0C    MOV   X,[__r1]
    07B5: 28       ROMX  
    07B6: 20       POP   X
    07B7: 53 06    MOV   [cs],A
(0081) 	return;
    07B9: 38 FE    ADD   SP,0xFE
    07BB: 20       POP   X
    07BC: 7F       RET   
(0082) }
(0083) 
(0084) 
(0085) /*******************************************************************************
(0086)  * Main function
(0087)  ******************************************************************************/
(0088) void main(void){
_main:
  PressedTime          --> X+18
  str_buf              --> X+1
  bSwitchState         --> X+0
    07BD: 10       PUSH  X
    07BE: 4F       MOV   X,SP
    07BF: 38 13    ADD   SP,0x13
(0089) 	char str_buf[17];
(0090) 	unsigned char bSwitchState = 0;
    07C1: 56 00 00 MOV   [X+0],0x0
(0091) 	unsigned char PressedTime = 0;
    07C4: 56 12 00 MOV   [X+18],0x0
(0092) 	
(0093) 	// initialize interrupt
(0094) 	M8C_EnableGInt;
    07C7: 71 01    OR    F,0x1
(0095) 	StopTimer_EnableInt();
    07C9: 10       PUSH  X
    07CA: 7C 04 08 LCALL _StopTimer_EnableInt
(0096) 	
(0097) 	// init LCD module
(0098) 	LCD_Start();
    07CD: 7C 05 65 LCALL _LCD_Init|LCD_Start|LCD_Init|_LCD_Start
    07D0: 20       POP   X
(0099) 	
(0100) 	// start PWM and LCD
(0101) 	cstrcpy(str_buf, "Hello?");
    07D1: 50 01    MOV   A,0x1
    07D3: 08       PUSH  A
    07D4: 50 E0    MOV   A,0xE0
    07D6: 08       PUSH  A
    07D7: 5A 0C    MOV   [__r1],X
    07D9: 06 0C 01 ADD   [__r1],0x1
    07DC: 51 0D    MOV   A,[__r0]
    07DE: 08       PUSH  A
    07DF: 51 0C    MOV   A,[__r1]
    07E1: 08       PUSH  A
    07E2: 7C 0B 2C LCALL _cstrcpy
(0102) 	LCD_line_print(str_buf, LCD_LINE_2);
    07E5: 50 01    MOV   A,0x1
    07E7: 08       PUSH  A
    07E8: 5A 0C    MOV   [__r1],X
    07EA: 06 0C 01 ADD   [__r1],0x1
    07ED: 51 0D    MOV   A,[__r0]
    07EF: 08       PUSH  A
    07F0: 51 0C    MOV   A,[__r1]
    07F2: 08       PUSH  A
    07F3: 91 F9    CALL  _LCD_line_print
    07F5: 38 F9    ADD   SP,0xF9
(0103) 	
(0104) 	// infinite loop with debouncing.
(0105) 	reset_timer();
    07F7: 92 55    CALL  _reset_timer
    07F9: 80 DF    JMP   0x08D9
(0106) 	while (1){
(0107) 		// debouncing		
(0108) 		bSwitchState <<= 1;
    07FB: 66 00    ASL   [X+0]
(0109) 		bSwitchState &= 0x0f;
    07FD: 27 00 0F AND   [X+0],0xF
(0110) 		bSwitchState |= (PRT1DR & 0x01);
    0800: 5D 04    MOV   A,REG[0x4]
    0802: 21 01    AND   A,0x1
    0804: 2D 00    OR    [X+0],A
(0111) 		if(bSwitchState == 0x0f){	// press detected 0x07
    0806: 3D 00 0F CMP   [X+0],0xF
    0809: B0 40    JNZ   0x084A
(0112) 			if (PressedTime < 200){
    080B: 3D 12 C8 CMP   [X+18],0xC8
    080E: D0 05    JNC   0x0814
(0113) 				PressedTime++;	// Time button being pressed counted
    0810: 77 12    INC   [X+18]
(0114) 			}else if (PressedTime == 200){
    0812: 80 9B    JMP   0x08AE
    0814: 3D 12 C8 CMP   [X+18],0xC8
    0817: B0 96    JNZ   0x08AE
(0115) 				// Long pressed Event
(0116) 				PressedTime++; // to prevent Repeated event
    0819: 77 12    INC   [X+18]
(0117) 				stopwatch_fsm(long_pressed);
    081B: 50 01    MOV   A,0x1
    081D: 08       PUSH  A
    081E: 9E B5    CALL  __UserModules_end|__text_start|_stopwatch_fsm|_stopwatch_fsm
    0820: 38 FF    ADD   SP,0xFF
(0118) 			
(0119) 				cstrcpy(str_buf, "Long Pressed");
    0822: 50 01    MOV   A,0x1
    0824: 08       PUSH  A
    0825: 50 D3    MOV   A,0xD3
    0827: 08       PUSH  A
    0828: 5A 0C    MOV   [__r1],X
    082A: 06 0C 01 ADD   [__r1],0x1
    082D: 51 0D    MOV   A,[__r0]
    082F: 08       PUSH  A
    0830: 51 0C    MOV   A,[__r1]
    0832: 08       PUSH  A
    0833: 7C 0B 2C LCALL _cstrcpy
(0120) 				LCD_line_print(str_buf, LCD_LINE_2);
    0836: 50 01    MOV   A,0x1
    0838: 08       PUSH  A
    0839: 5A 0C    MOV   [__r1],X
    083B: 06 0C 01 ADD   [__r1],0x1
    083E: 51 0D    MOV   A,[__r0]
    0840: 08       PUSH  A
    0841: 51 0C    MOV   A,[__r1]
    0843: 08       PUSH  A
    0844: 91 A8    CALL  _LCD_line_print
    0846: 38 F9    ADD   SP,0xF9
(0121) 			}else {
(0122) 				// to prevent Repeated event after long pressed event
(0123) 			}
(0124) 		}else {
    0848: 80 65    JMP   0x08AE
(0125) 			if (PressedTime == 0){
    084A: 3D 12 00 CMP   [X+18],0x0
    084D: B0 03    JNZ   0x0851
(0126) 				// Not pressed. No Event
(0127) 			}else if (PressedTime >= 200){
    084F: 80 5B    JMP   0x08AB
    0851: 3D 12 C8 CMP   [X+18],0xC8
    0854: C0 29    JC    0x087E
(0128) 				// Release after Long pressed Event
(0129) 				cstrcpy(str_buf, "Released");
    0856: 50 01    MOV   A,0x1
    0858: 08       PUSH  A
    0859: 50 CA    MOV   A,0xCA
    085B: 08       PUSH  A
    085C: 5A 0C    MOV   [__r1],X
    085E: 06 0C 01 ADD   [__r1],0x1
    0861: 51 0D    MOV   A,[__r0]
    0863: 08       PUSH  A
    0864: 51 0C    MOV   A,[__r1]
    0866: 08       PUSH  A
    0867: 7C 0B 2C LCALL _cstrcpy
(0130) 				LCD_line_print(str_buf, LCD_LINE_2);
    086A: 50 01    MOV   A,0x1
    086C: 08       PUSH  A
    086D: 5A 0C    MOV   [__r1],X
    086F: 06 0C 01 ADD   [__r1],0x1
    0872: 51 0D    MOV   A,[__r0]
    0874: 08       PUSH  A
    0875: 51 0C    MOV   A,[__r1]
    0877: 08       PUSH  A
    0878: 91 74    CALL  _LCD_line_print
    087A: 38 F9    ADD   SP,0xF9
(0131) 			}else {
    087C: 80 2E    JMP   0x08AB
(0132) 				// Short Pressed Event
(0133) 				stopwatch_fsm(short_pressed);
    087E: 50 00    MOV   A,0x0
    0880: 08       PUSH  A
    0881: 9E 52    CALL  __UserModules_end|__text_start|_stopwatch_fsm|_stopwatch_fsm
    0883: 38 FF    ADD   SP,0xFF
(0134) 			
(0135) 				cstrcpy(str_buf, "Short Pressed");
    0885: 50 01    MOV   A,0x1
    0887: 08       PUSH  A
    0888: 50 BC    MOV   A,0xBC
    088A: 08       PUSH  A
    088B: 5A 0C    MOV   [__r1],X
    088D: 06 0C 01 ADD   [__r1],0x1
    0890: 51 0D    MOV   A,[__r0]
    0892: 08       PUSH  A
    0893: 51 0C    MOV   A,[__r1]
    0895: 08       PUSH  A
    0896: 7C 0B 2C LCALL _cstrcpy
(0136) 				LCD_line_print(str_buf, LCD_LINE_2);
    0899: 50 01    MOV   A,0x1
    089B: 08       PUSH  A
    089C: 5A 0C    MOV   [__r1],X
    089E: 06 0C 01 ADD   [__r1],0x1
    08A1: 51 0D    MOV   A,[__r0]
    08A3: 08       PUSH  A
    08A4: 51 0C    MOV   A,[__r1]
    08A6: 08       PUSH  A
    08A7: 91 45    CALL  _LCD_line_print
    08A9: 38 F9    ADD   SP,0xF9
(0137) 			}
(0138) 			PressedTime = 0;
    08AB: 56 12 00 MOV   [X+18],0x0
(0139) 		}
(0140) 		
(0141) 		// main loop
(0142) 		itoa(time, str_buf, 10);
    08AE: 50 00    MOV   A,0x0
    08B0: 08       PUSH  A
    08B1: 50 0A    MOV   A,0xA
    08B3: 08       PUSH  A
    08B4: 5A 0C    MOV   [__r1],X
    08B6: 06 0C 01 ADD   [__r1],0x1
    08B9: 51 0D    MOV   A,[__r0]
    08BB: 08       PUSH  A
    08BC: 51 0C    MOV   A,[__r1]
    08BE: 08       PUSH  A
    08BF: 51 2A    MOV   A,[time]
    08C1: 08       PUSH  A
    08C2: 51 2B    MOV   A,[time+1]
    08C4: 08       PUSH  A
    08C5: 90 19    CALL  _itoa
(0143) 		LCD_line_print(str_buf, LCD_LINE_1);	
    08C7: 50 00    MOV   A,0x0
    08C9: 08       PUSH  A
    08CA: 5A 0C    MOV   [__r1],X
    08CC: 06 0C 01 ADD   [__r1],0x1
    08CF: 51 0D    MOV   A,[__r0]
    08D1: 08       PUSH  A
    08D2: 51 0C    MOV   A,[__r1]
    08D4: 08       PUSH  A
    08D5: 91 17    CALL  _LCD_line_print
    08D7: 38 F7    ADD   SP,0xF7
(0144) 	}
    08D9: 8F 21    JMP   0x07FB
    08DB: 38 ED    ADD   SP,0xED
    08DD: 20       POP   X
    08DE: 8F FF    JMP   0x08DE
(0145) }
(0146) 
(0147) 
(0148) /*******************************************************************************
(0149)  * Output-related functions
(0150)  ******************************************************************************/
(0151) void itoa(unsigned short input, char *str, int base){
_itoa:
  digit                --> X+4
  n                    --> X+2
  d                    --> X+0
  base                 --> X-9
  str                  --> X-7
  input                --> X-5
    08E0: 10       PUSH  X
    08E1: 4F       MOV   X,SP
    08E2: 38 08    ADD   SP,0x8
(0152) 	int n = 0;
    08E4: 56 03 00 MOV   [X+3],0x0
    08E7: 56 02 00 MOV   [X+2],0x0
(0153) 	unsigned int d = 1;
    08EA: 56 01 01 MOV   [X+1],0x1
    08ED: 56 00 00 MOV   [X+0],0x0
    08F0: 80 1A    JMP   0x090B
(0154) 	
(0155) 	while ((input / d) >= base){
(0156) 		d *= base;
    08F2: 52 F7    MOV   A,[X-9]
    08F4: 08       PUSH  A
    08F5: 52 F8    MOV   A,[X-8]
    08F7: 08       PUSH  A
    08F8: 52 00    MOV   A,[X+0]
    08FA: 08       PUSH  A
    08FB: 52 01    MOV   A,[X+1]
    08FD: 08       PUSH  A
    08FE: 7C 0A 94 LCALL 0x0A94
    0901: 38 FC    ADD   SP,0xFC
    0903: 51 09    MOV   A,[__rX]
    0905: 54 01    MOV   [X+1],A
    0907: 51 08    MOV   A,[__rY|running_transitions]
    0909: 54 00    MOV   [X+0],A
(0157) 	}
    090B: 52 00    MOV   A,[X+0]
    090D: 08       PUSH  A
    090E: 52 01    MOV   A,[X+1]
    0910: 08       PUSH  A
    0911: 52 FB    MOV   A,[X-5]
    0913: 08       PUSH  A
    0914: 52 FC    MOV   A,[X-4]
    0916: 08       PUSH  A
    0917: 7C 0A 5D LCALL 0x0A5D
    091A: 18       POP   A
    091B: 53 0C    MOV   [__r1],A
    091D: 18       POP   A
    091E: 53 0D    MOV   [__r0],A
    0920: 38 FE    ADD   SP,0xFE
    0922: 51 0C    MOV   A,[__r1]
    0924: 13 F8    SUB   A,[X-8]
    0926: 51 0D    MOV   A,[__r0]
    0928: 1B F7    SBB   A,[X-9]
    092A: DF C7    JNC   0x08F2
    092C: 80 AB    JMP   0x09D8
(0158) 	while (d != 0){
(0159) 		int digit = input / d;
    092E: 52 00    MOV   A,[X+0]
    0930: 08       PUSH  A
    0931: 52 01    MOV   A,[X+1]
    0933: 08       PUSH  A
    0934: 52 FB    MOV   A,[X-5]
    0936: 08       PUSH  A
    0937: 52 FC    MOV   A,[X-4]
    0939: 08       PUSH  A
    093A: 7C 0A 5D LCALL 0x0A5D
    093D: 18       POP   A
    093E: 53 0C    MOV   [__r1],A
    0940: 18       POP   A
    0941: 53 0D    MOV   [__r0],A
    0943: 38 FE    ADD   SP,0xFE
    0945: 51 0C    MOV   A,[__r1]
    0947: 54 05    MOV   [X+5],A
    0949: 51 0D    MOV   A,[__r0]
    094B: 54 04    MOV   [X+4],A
(0160) 		input %= d;
    094D: 52 00    MOV   A,[X+0]
    094F: 08       PUSH  A
    0950: 52 01    MOV   A,[X+1]
    0952: 08       PUSH  A
    0953: 52 FB    MOV   A,[X-5]
    0955: 08       PUSH  A
    0956: 52 FC    MOV   A,[X-4]
    0958: 08       PUSH  A
    0959: 7C 0A 5D LCALL 0x0A5D
    095C: 38 FE    ADD   SP,0xFE
    095E: 18       POP   A
    095F: 54 FC    MOV   [X-4],A
    0961: 18       POP   A
    0962: 54 FB    MOV   [X-5],A
(0161) 		d /= base;
    0964: 52 F7    MOV   A,[X-9]
    0966: 08       PUSH  A
    0967: 52 F8    MOV   A,[X-8]
    0969: 08       PUSH  A
    096A: 52 00    MOV   A,[X+0]
    096C: 08       PUSH  A
    096D: 52 01    MOV   A,[X+1]
    096F: 08       PUSH  A
    0970: 7C 0A 5D LCALL 0x0A5D
    0973: 18       POP   A
    0974: 54 01    MOV   [X+1],A
    0976: 18       POP   A
    0977: 54 00    MOV   [X+0],A
    0979: 38 FE    ADD   SP,0xFE
(0162) 		if (n || digit > 0 || d == 0){
    097B: 3D 02 00 CMP   [X+2],0x0
    097E: B0 20    JNZ   0x099F
    0980: 3D 03 00 CMP   [X+3],0x0
    0983: B0 1B    JNZ   0x099F
    0985: 50 00    MOV   A,0x0
    0987: 13 05    SUB   A,[X+5]
    0989: 52 04    MOV   A,[X+4]
    098B: 31 80    XOR   A,0x80
    098D: 53 09    MOV   [__rX],A
    098F: 50 80    MOV   A,0x80
    0991: 1A 09    SBB   A,[__rX]
    0993: C0 0B    JC    0x099F
    0995: 3D 00 00 CMP   [X+0],0x0
    0998: B0 3F    JNZ   0x09D8
    099A: 3D 01 00 CMP   [X+1],0x0
    099D: B0 3A    JNZ   0x09D8
(0163) 			*str++ = digit + ((digit < 10)? '0': 'a' - 10);
    099F: 52 FA    MOV   A,[X-6]
    09A1: 53 0C    MOV   [__r1],A
    09A3: 52 F9    MOV   A,[X-7]
    09A5: 53 0D    MOV   [__r0],A
    09A7: 51 0C    MOV   A,[__r1]
    09A9: 01 01    ADD   A,0x1
    09AB: 54 FA    MOV   [X-6],A
    09AD: 51 0D    MOV   A,[__r0]
    09AF: 09 00    ADC   A,0x0
    09B1: 54 F9    MOV   [X-7],A
    09B3: 52 05    MOV   A,[X+5]
    09B5: 11 0A    SUB   A,0xA
    09B7: 52 04    MOV   A,[X+4]
    09B9: 31 80    XOR   A,0x80
    09BB: 19 80    SBB   A,0x80
    09BD: D0 09    JNC   0x09C7
    09BF: 56 07 30 MOV   [X+7],0x30
    09C2: 56 06 00 MOV   [X+6],0x0
    09C5: 80 07    JMP   0x09CD
    09C7: 56 07 57 MOV   [X+7],0x57
    09CA: 56 06 00 MOV   [X+6],0x0
    09CD: 52 05    MOV   A,[X+5]
    09CF: 03 07    ADD   A,[X+7]
    09D1: 3F 0C    MVI   [__r1],A
(0164) 			n++;
    09D3: 77 03    INC   [X+3]
    09D5: 0F 02 00 ADC   [X+2],0x0
(0165) 		}
(0166) 	}
    09D8: 3D 00 00 CMP   [X+0],0x0
    09DB: BF 52    JNZ   0x092E
    09DD: 3D 01 00 CMP   [X+1],0x0
    09E0: BF 4D    JNZ   0x092E
(0167) 	*str = '\0';
    09E2: 52 FA    MOV   A,[X-6]
    09E4: 53 0C    MOV   [__r1],A
    09E6: 50 00    MOV   A,0x0
    09E8: 3F 0C    MVI   [__r1],A
    09EA: 38 F8    ADD   SP,0xF8
    09EC: 20       POP   X
    09ED: 7F       RET   
(0168) }
(0169) 
(0170) void LCD_line_print(char *str, unsigned char line){
_LCD_line_print:
  line                 --> X-6
  str                  --> X-5
    09EE: 10       PUSH  X
    09EF: 4F       MOV   X,SP
(0171) 	static char buffer[17];
(0172) 	memset(buffer, ' ', 16);
    09F0: 50 00    MOV   A,0x0
    09F2: 08       PUSH  A
    09F3: 50 10    MOV   A,0x10
    09F5: 08       PUSH  A
    09F6: 50 00    MOV   A,0x0
    09F8: 08       PUSH  A
    09F9: 50 20    MOV   A,0x20
    09FB: 08       PUSH  A
    09FC: 50 00    MOV   A,0x0
    09FE: 08       PUSH  A
    09FF: 50 19    MOV   A,0x19
    0A01: 08       PUSH  A
    0A02: 7C 0A FE LCALL _memset
    0A05: 38 FA    ADD   SP,0xFA
(0173) 	memcpy(buffer, str, strlen(str));
    0A07: 52 FB    MOV   A,[X-5]
    0A09: 08       PUSH  A
    0A0A: 52 FC    MOV   A,[X-4]
    0A0C: 08       PUSH  A
    0A0D: 7C 0B 59 LCALL _strlen
    0A10: 51 0D    MOV   A,[__r0]
    0A12: 08       PUSH  A
    0A13: 51 0C    MOV   A,[__r1]
    0A15: 08       PUSH  A
    0A16: 52 FB    MOV   A,[X-5]
    0A18: 08       PUSH  A
    0A19: 52 FC    MOV   A,[X-4]
    0A1B: 08       PUSH  A
    0A1C: 50 00    MOV   A,0x0
    0A1E: 08       PUSH  A
    0A1F: 50 19    MOV   A,0x19
    0A21: 08       PUSH  A
    0A22: 7C 0A D4 LCALL _memcpy
    0A25: 38 F8    ADD   SP,0xF8
(0174) 	buffer[17] = '\0';
    0A27: 55 2A 00 MOV   [time],0x0
(0175) 	LCD_Position(line, 0);
    0A2A: 10       PUSH  X
    0A2B: 50 00    MOV   A,0x0
    0A2D: 08       PUSH  A
    0A2E: 52 FA    MOV   A,[X-6]
    0A30: 20       POP   X
    0A31: 7C 05 D5 LCALL _LCD_Position
(0176) 	LCD_PrString(buffer);
    0A34: 50 00    MOV   A,0x0
    0A36: 08       PUSH  A
    0A37: 50 19    MOV   A,0x19
    0A39: 5C       MOV   X,A
    0A3A: 18       POP   A
    0A3B: 7C 04 A0 LCALL _LCD_PrString
    0A3E: 20       POP   X
    0A3F: 20       POP   X
    0A40: 7F       RET   
(0177) }
(0178) 
(0179) 
(0180) /*******************************************************************************
(0181)  * FSM/Timer related functions
(0182)  ******************************************************************************/
(0183) void do_nothing(void){
(0184) 	return;
_do_nothing:
    0A41: 7F       RET   
(0185) }
(0186) void start_timer(void){
(0187) 	StopTimer_Start();
_start_timer:
    0A42: 10       PUSH  X
    0A43: 7C 04 10 LCALL _StopTimer_Start
    0A46: 20       POP   X
    0A47: 7F       RET   
(0188) }
(0189) 
(0190) void pause_timer(void){
(0191) 	StopTimer_Stop();
_pause_timer:
    0A48: 10       PUSH  X
    0A49: 7C 04 14 LCALL _StopTimer_Stop
    0A4C: 20       POP   X
    0A4D: 7F       RET   
(0192) }
(0193) 
(0194) void reset_timer(void){
(0195) 	time = 0;
_reset_timer:
    0A4E: 55 2B 00 MOV   [time+1],0x0
    0A51: 55 2A 00 MOV   [time],0x0
    0A54: 7F       RET   
(0196) }
(0197) 
(0198) 
(0199) /*******************************************************************************
(0200)  * ISRs
(0201)  ******************************************************************************/
(0202) #pragma interrupt_handler StopTimer_ISR
(0203) void StopTimer_ISR(void){
_StopTimer_ISR:
    0A55: 08       PUSH  A
(0204) 	time += 1;
    0A56: 76 2B    INC   [time+1]
    0A58: 0E 2A 00 ADC   [time],0x0
    0A5B: 18       POP   A
    0A5C: 7E       RETI  
