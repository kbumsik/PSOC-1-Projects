                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _test2::
 0000                   .blkb 12
                        .area idata(rom,lit)
 0000 4974207475726E73204F6E00  .byte 'I,'t,32,'t,'u,'r,'n,'s,32,'O,'n,0
                        .area data(ram, con, rel)
 000C                   .dbfile ./main.c
 000C                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7B\Lab7B\main.c
 000C                   .dbsym e test2 _test2 A[12:12]c
 000C           _buttonPressed::
 000C                   .blkb 1
                        .area idata(rom,lit)
 000C 00                .byte 0
                        .area data(ram, con, rel)
 000D                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7B\Lab7B\main.c
 000D                   .dbsym e buttonPressed _buttonPressed c
 000D           _buttonCount::
 000D                   .blkb 2
                        .area idata(rom,lit)
 000D 0000              .word 0
                        .area data(ram, con, rel)
 000F                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7B\Lab7B\main.c
 000F                   .dbsym e buttonCount _buttonCount I
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7B\Lab7B\main.c
 0000                   .dbfunc e main _main fV
 0000           ;          debug -> X+22
 0000           ;             o3 -> X+21
 0000           ;             o2 -> X+20
 0000           ;             o1 -> X+19
 0000           ;             oo -> X+2
 0000           ;           temp -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3827              add SP,39
 0004                   .dbline 17
 0004           ; //----------------------------------------------------------------------------
 0004           ; // Lab7B
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include <string.h>
 0004           ; 
 0004           ; void itoa(unsigned short input, char *str, int base);
 0004           ; void LCD_line_print(char *str, unsigned char line);
 0004           ; 
 0004           ; CONST char test2[] = "It turns On";
 0004           ; 
 0004           ; BOOL buttonPressed = FALSE; //holds if button pressed
 0004           ; int buttonCount = 0;
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 25
 0004           ;       unsigned char o1;
 0004           ;       unsigned char o2;
 0004           ;       unsigned char o3;
 0004           ;       unsigned char oo[17]; //setup lcd output array
 0004           ;       unsigned char *temp;
 0004           ;       char debug[17];
 0004           ;       
 0004           ;       LCD_1_Start(); //start lcd module
 0004 10                push X
 0005 7C0000            xcall _LCD_1_Start
 0008 20                pop X
 0009                   .dbline 29
 0009           ;       //LCD_1_Position(0,0); //initialize lcd cursor position
 0009           ;       //LCD_1_PrCString("Test?");
 0009           ;       
 0009           ;       strcpy(debug, test2);
 0009 5000              mov A,>_test2
 000B 08                push A
 000C 5000              mov A,<_test2
 000E 08                push A
 000F 5A00              mov [__r1],X
 0011 060016            add [__r1],22
 0014 5100              mov A,[__r0]
 0016 08                push A
 0017 5100              mov A,[__r1]
 0019 08                push A
 001A 7C0000            xcall _strcpy
 001D                   .dbline 31
 001D           ;       
 001D           ;       LCD_line_print(debug, 1);
 001D 5001              mov A,1
 001F 08                push A
 0020 5A00              mov [__r1],X
 0022 060016            add [__r1],22
 0025 5100              mov A,[__r0]
 0027 08                push A
 0028 5100              mov A,[__r1]
 002A 08                push A
 002B 920A              xcall _LCD_line_print
 002D 38F9              add SP,-7
 002F                   .dbline 33
 002F           ;       
 002F           ;       INT_MSK0 |= 0x40; //enable sleep interrupt
 002F 43E040            or REG[0xe0],64
 0032                   .dbline 34
 0032           ;       M8C_EnableGInt; //enable global interrupt
 0032 7101                      or  F, 01h
 0034           
 0034 80ED              xjmp L3
 0036           L2:
 0036                   .dbline 37
 0036           ; 
 0036           ;       
 0036           ;       while (1) {
 0036                   .dbline 38
 0036           ;               if (buttonPressed) { //waits until isr updates buttonPressed
 0036 3C0C00            cmp [_buttonPressed],0
 0039 A00A              jz L5
 003B                   .dbline 39
 003B           ;                       SCDAC_cr0 = SCDAC_cr0 + 1; //increment SCDAC control register
 003B                   .dbline 39
 003B 5D80              mov A,REG[0x80]
 003D 0101              add A,1
 003F 6080              mov REG[0x80],A
 0041                   .dbline 40
 0041           ;                       buttonPressed = FALSE; //clear buttonpress
 0041 550C00            mov [_buttonPressed],0
 0044                   .dbline 41
 0044           ;               }
 0044           L5:
 0044                   .dbline 43
 0044           ;               //lcd out masks for bit 7 of cr, then bits 4-0, then bit 5
 0044           ;               o1 = (SCDAC_cr0 & 0x80) >> 7; // FCAP
 0044 5D80              mov A,REG[0x80]
 0046 2180              and A,-128
 0048 67                asr A
 0049 67                asr A
 004A 67                asr A
 004B 67                asr A
 004C 67                asr A
 004D 67                asr A
 004E 67                asr A
 004F 2101              and A,1
 0051 5413              mov [X+19],A
 0053                   .dbline 44
 0053           ;               o2 = SCDAC_cr0 & 0x1F; // ACAP
 0053 5D80              mov A,REG[0x80]
 0055 211F              and A,31
 0057 5414              mov [X+20],A
 0059                   .dbline 45
 0059           ;               o3 = (SCDAC_cr0 & 0x20) >> 5; // ASign
 0059 5D80              mov A,REG[0x80]
 005B 2120              and A,32
 005D 67                asr A
 005E 67                asr A
 005F 67                asr A
 0060 67                asr A
 0061 67                asr A
 0062 2107              and A,7
 0064 5300              mov [__r0],A
 0066 5415              mov [X+21],A
 0068                   .dbline 46
 0068           ;               itoa(o1, oo, 16);
 0068 5000              mov A,0
 006A 08                push A
 006B 5010              mov A,16
 006D 08                push A
 006E 5A00              mov [__r1],X
 0070 060002            add [__r1],2
 0073 5100              mov A,[__r0]
 0075 08                push A
 0076 5100              mov A,[__r1]
 0078 08                push A
 0079 5213              mov A,[X+19]
 007B 5300              mov [__r1],A
 007D 5000              mov A,0
 007F 08                push A
 0080 5100              mov A,[__r1]
 0082 08                push A
 0083 90A4              xcall _itoa
 0085 38FA              add SP,-6
 0087                   .dbline 47
 0087           ;               temp = oo;
 0087 5A00              mov [__r0],X
 0089 060002            add [__r0],2
 008C 5100              mov A,[__r0]
 008E 5401              mov [X+1],A
 0090 8006              xjmp L8
 0092           L7:
 0092                   .dbline 49
 0092           ;               while (*temp != '\0')
 0092           ;                       temp++;
 0092 7701              inc [X+1]
 0094 0F0000            adc [X+0],0
 0097           L8:
 0097                   .dbline 48
 0097 5201              mov A,[X+1]
 0099 5300              mov [__r1],A
 009B 3E00              mvi A,[__r1]
 009D BFF4              jnz L7
 009F                   .dbline 50
 009F           ;               *temp++ = ' ';
 009F 5201              mov A,[X+1]
 00A1 5300              mov [__r1],A
 00A3 5200              mov A,[X+0]
 00A5 5300              mov [__r0],A
 00A7 5100              mov A,[__r1]
 00A9 0101              add A,1
 00AB 5401              mov [X+1],A
 00AD 5100              mov A,[__r0]
 00AF 0900              adc A,0
 00B1 5400              mov [X+0],A
 00B3 5020              mov A,32
 00B5 3F00              mvi [__r1],A
 00B7                   .dbline 51
 00B7           ;               itoa(o2, temp, 16);
 00B7 5000              mov A,0
 00B9 08                push A
 00BA 5010              mov A,16
 00BC 08                push A
 00BD 5200              mov A,[X+0]
 00BF 08                push A
 00C0 5201              mov A,[X+1]
 00C2 08                push A
 00C3 5214              mov A,[X+20]
 00C5 5300              mov [__r1],A
 00C7 5000              mov A,0
 00C9 08                push A
 00CA 5100              mov A,[__r1]
 00CC 08                push A
 00CD 905A              xcall _itoa
 00CF 38FA              add SP,-6
 00D1 8006              xjmp L11
 00D3           L10:
 00D3                   .dbline 53
 00D3           ;               while (*temp != '\0')
 00D3           ;                       temp++;
 00D3 7701              inc [X+1]
 00D5 0F0000            adc [X+0],0
 00D8           L11:
 00D8                   .dbline 52
 00D8 5201              mov A,[X+1]
 00DA 5300              mov [__r1],A
 00DC 3E00              mvi A,[__r1]
 00DE BFF4              jnz L10
 00E0                   .dbline 54
 00E0           ;               *temp++ = ' ';
 00E0 5201              mov A,[X+1]
 00E2 5300              mov [__r1],A
 00E4 5200              mov A,[X+0]
 00E6 5300              mov [__r0],A
 00E8 5100              mov A,[__r1]
 00EA 0101              add A,1
 00EC 5401              mov [X+1],A
 00EE 5100              mov A,[__r0]
 00F0 0900              adc A,0
 00F2 5400              mov [X+0],A
 00F4 5020              mov A,32
 00F6 3F00              mvi [__r1],A
 00F8                   .dbline 55
 00F8           ;               itoa(o3, temp, 16);
 00F8 5000              mov A,0
 00FA 08                push A
 00FB 5010              mov A,16
 00FD 08                push A
 00FE 5200              mov A,[X+0]
 0100 08                push A
 0101 5201              mov A,[X+1]
 0103 08                push A
 0104 5215              mov A,[X+21]
 0106 5300              mov [__r1],A
 0108 5000              mov A,0
 010A 08                push A
 010B 5100              mov A,[__r1]
 010D 08                push A
 010E 9019              xcall _itoa
 0110                   .dbline 57
 0110           ;               
 0110           ;               LCD_line_print(oo, 0);
 0110 5000              mov A,0
 0112 08                push A
 0113 5A00              mov [__r1],X
 0115 060002            add [__r1],2
 0118 5100              mov A,[__r0]
 011A 08                push A
 011B 5100              mov A,[__r1]
 011D 08                push A
 011E 9117              xcall _LCD_line_print
 0120 38F7              add SP,-9
 0122                   .dbline 58
 0122           ;       }
 0122           L3:
 0122                   .dbline 37
 0122 8F13              xjmp L2
 0124           X0:
 0124                   .dbline -2
 0124           L1:
 0124 38D9              add SP,-39
 0126 20                pop X
 0127                   .dbline 0 ; func end
 0127 8FFF              jmp .
 0129                   .dbsym l debug 22 A[17:17]c
 0129                   .dbsym l o3 21 c
 0129                   .dbsym l o2 20 c
 0129                   .dbsym l o1 19 c
 0129                   .dbsym l oo 2 A[17:17]c
 0129                   .dbsym l temp 0 pc
 0129                   .dbend
 0129                   .dbfunc e itoa _itoa fV
 0129           ;          digit -> X+4
 0129           ;              n -> X+2
 0129           ;              d -> X+0
 0129           ;           base -> X-9
 0129           ;            str -> X-7
 0129           ;          input -> X-5
 0129           _itoa::
 0129                   .dbline -1
 0129 10                push X
 012A 4F                mov X,SP
 012B 3808              add SP,8
 012D                   .dbline 62
 012D           ; }
 012D           ; 
 012D           ; void itoa(unsigned short input, char *str, int base)
 012D           ; {
 012D                   .dbline 63
 012D           ;       int n = 0;
 012D 560300            mov [X+3],0
 0130 560200            mov [X+2],0
 0133                   .dbline 64
 0133           ;       unsigned int d = 1;
 0133 560101            mov [X+1],1
 0136 560000            mov [X+0],0
 0139 801A              xjmp L15
 013B           L14:
 013B                   .dbline 67
 013B           ;       
 013B           ;       while ((input / d) >= base)
 013B           ;       {
 013B                   .dbline 68
 013B           ;               d *= base;
 013B 52F7              mov A,[X-9]
 013D 08                push A
 013E 52F8              mov A,[X-8]
 0140 08                push A
 0141 5200              mov A,[X+0]
 0143 08                push A
 0144 5201              mov A,[X+1]
 0146 08                push A
 0147 7C0000            xcall __mul16
 014A 38FC              add SP,-4
 014C 5100              mov A,[__rX]
 014E 5401              mov [X+1],A
 0150 5100              mov A,[__rY]
 0152 5400              mov [X+0],A
 0154                   .dbline 69
 0154           ;       }
 0154           L15:
 0154                   .dbline 66
 0154 5200              mov A,[X+0]
 0156 08                push A
 0157 5201              mov A,[X+1]
 0159 08                push A
 015A 52FB              mov A,[X-5]
 015C 08                push A
 015D 52FC              mov A,[X-4]
 015F 08                push A
 0160 7C0000            xcall __divmodu_16X16_16
 0163 18                pop A
 0164 5300              mov [__r1],A
 0166 18                pop A
 0167 5300              mov [__r0],A
 0169 38FE              add SP,-2
 016B 5100              mov A,[__r1]
 016D 13F8              sub A,[X-8]
 016F 5100              mov A,[__r0]
 0171 1BF7              sbb A,[X-9]
 0173 DFC7              jnc L14
 0175           X1:
 0175 80AB              xjmp L18
 0177           L17:
 0177                   .dbline 71
 0177           ;       while (d != 0)
 0177           ;       {
 0177                   .dbline 72
 0177           ;               int digit = input / d;
 0177 5200              mov A,[X+0]
 0179 08                push A
 017A 5201              mov A,[X+1]
 017C 08                push A
 017D 52FB              mov A,[X-5]
 017F 08                push A
 0180 52FC              mov A,[X-4]
 0182 08                push A
 0183 7C0000            xcall __divmodu_16X16_16
 0186 18                pop A
 0187 5300              mov [__r1],A
 0189 18                pop A
 018A 5300              mov [__r0],A
 018C 38FE              add SP,-2
 018E 5100              mov A,[__r1]
 0190 5405              mov [X+5],A
 0192 5100              mov A,[__r0]
 0194 5404              mov [X+4],A
 0196                   .dbline 73
 0196           ;               input %= d;
 0196 5200              mov A,[X+0]
 0198 08                push A
 0199 5201              mov A,[X+1]
 019B 08                push A
 019C 52FB              mov A,[X-5]
 019E 08                push A
 019F 52FC              mov A,[X-4]
 01A1 08                push A
 01A2 7C0000            xcall __divmodu_16X16_16
 01A5 38FE              add SP,-2
 01A7 18                pop A
 01A8 54FC              mov [X-4],A
 01AA 18                pop A
 01AB 54FB              mov [X-5],A
 01AD                   .dbline 74
 01AD           ;               d /= base;
 01AD 52F7              mov A,[X-9]
 01AF 08                push A
 01B0 52F8              mov A,[X-8]
 01B2 08                push A
 01B3 5200              mov A,[X+0]
 01B5 08                push A
 01B6 5201              mov A,[X+1]
 01B8 08                push A
 01B9 7C0000            xcall __divmodu_16X16_16
 01BC 18                pop A
 01BD 5401              mov [X+1],A
 01BF 18                pop A
 01C0 5400              mov [X+0],A
 01C2 38FE              add SP,-2
 01C4                   .dbline 75
 01C4           ;               if (n || digit > 0 || d == 0)
 01C4 3D0200            cmp [X+2],0
 01C7 B020              jnz L23
 01C9 3D0300            cmp [X+3],0
 01CC B01B              jnz L23
 01CE           X2:
 01CE 5000              mov A,0
 01D0 1305              sub A,[X+5]
 01D2 5204              mov A,[X+4]
 01D4 3180              xor A,-128
 01D6 5300              mov [__rX],A
 01D8 5080              mov A,(0 ^ 0x80)
 01DA 1A00              sbb A,[__rX]
 01DC C00B              jc L23
 01DE           X3:
 01DE 3D0000            cmp [X+0],0
 01E1 B03F              jnz L20
 01E3 3D0100            cmp [X+1],0
 01E6 B03A              jnz L20
 01E8           X4:
 01E8           L23:
 01E8                   .dbline 77
 01E8           ;               {
 01E8           ;                       *str++ = digit + ((digit < 10)? '0': 'a' - 10);
 01E8                   .dbline 77
 01E8 52FA              mov A,[X-6]
 01EA 5300              mov [__r1],A
 01EC 52F9              mov A,[X-7]
 01EE 5300              mov [__r0],A
 01F0 5100              mov A,[__r1]
 01F2 0101              add A,1
 01F4 54FA              mov [X-6],A
 01F6 5100              mov A,[__r0]
 01F8 0900              adc A,0
 01FA 54F9              mov [X-7],A
 01FC 5205              mov A,[X+5]
 01FE 110A              sub A,10
 0200 5204              mov A,[X+4]
 0202 3180              xor A,-128
 0204 1980              sbb A,(0 ^ 0x80)
 0206 D009              jnc L25
 0208           X5:
 0208 560730            mov [X+7],48
 020B 560600            mov [X+6],0
 020E 8007              xjmp L26
 0210           L25:
 0210 560757            mov [X+7],87
 0213 560600            mov [X+6],0
 0216           L26:
 0216 5205              mov A,[X+5]
 0218 0307              add A,[X+7]
 021A 3F00              mvi [__r1],A
 021C                   .dbline 78
 021C           ;                       n++;
 021C 7703              inc [X+3]
 021E 0F0200            adc [X+2],0
 0221                   .dbline 79
 0221           ;               }
 0221           L20:
 0221                   .dbline 80
 0221           ;       }
 0221           L18:
 0221                   .dbline 70
 0221 3D0000            cmp [X+0],0
 0224 BF52              jnz L17
 0226 3D0100            cmp [X+1],0
 0229 BF4D              jnz L17
 022B           X6:
 022B                   .dbline 81
 022B           ;       *str = '\0';
 022B 52FA              mov A,[X-6]
 022D 5300              mov [__r1],A
 022F 5000              mov A,0
 0231 3F00              mvi [__r1],A
 0233                   .dbline -2
 0233           L13:
 0233 38F8              add SP,-8
 0235 20                pop X
 0236                   .dbline 0 ; func end
 0236 7F                ret
 0237                   .dbsym l digit 4 I
 0237                   .dbsym l n 2 I
 0237                   .dbsym l d 0 i
 0237                   .dbsym l base -9 I
 0237                   .dbsym l str -7 pc
 0237                   .dbsym l input -5 s
 0237                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7B\Lab7B\main.c
 0000           L28:
 0000                   .blkb 17
                        .area text(rom, con, rel)
 0237                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7B\Lab7B\main.c
 0237                   .dbfunc e LCD_line_print _LCD_line_print fV
 0237                   .dbsym s buffer L28 A[17:17]c
 0237           ;           line -> X-6
 0237           ;            str -> X-5
 0237           _LCD_line_print::
 0237                   .dbline -1
 0237 10                push X
 0238 4F                mov X,SP
 0239                   .dbline 85
 0239           ; }
 0239           ; 
 0239           ; void LCD_line_print(char *str, unsigned char line)
 0239           ; {
 0239                   .dbline 87
 0239           ;       static char buffer[17];
 0239           ;       memset(buffer, ' ', 16);
 0239 5000              mov A,0
 023B 08                push A
 023C 5010              mov A,16
 023E 08                push A
 023F 5000              mov A,0
 0241 08                push A
 0242 5020              mov A,32
 0244 08                push A
 0245 5000              mov A,>L28
 0247 08                push A
 0248 5000              mov A,<L28
 024A 08                push A
 024B 7C0000            xcall _memset
 024E 38FA              add SP,-6
 0250                   .dbline 88
 0250           ;       memcpy(buffer, str, strlen(str));
 0250 52FB              mov A,[X-5]
 0252 08                push A
 0253 52FC              mov A,[X-4]
 0255 08                push A
 0256 7C0000            xcall _strlen
 0259 5100              mov A,[__r0]
 025B 08                push A
 025C 5100              mov A,[__r1]
 025E 08                push A
 025F 52FB              mov A,[X-5]
 0261 08                push A
 0262 52FC              mov A,[X-4]
 0264 08                push A
 0265 5000              mov A,>L28
 0267 08                push A
 0268 5000              mov A,<L28
 026A 08                push A
 026B 7C0000            xcall _memcpy
 026E 38F8              add SP,-8
 0270                   .dbline 89
 0270           ;       buffer[17] = '\0';
 0270 551100            mov [L28+17],0
 0273                   .dbline 90
 0273           ;       LCD_1_Position(line, 0);
 0273 10                push X
 0274 5000              mov A,0
 0276 08                push A
 0277 52FA              mov A,[X-6]
 0279 20                pop X
 027A 7C0000            xcall _LCD_1_Position
 027D                   .dbline 91
 027D           ;       LCD_1_PrString(buffer);
 027D 5000              mov A,>L28
 027F 08                push A
 0280 5000              mov A,<L28
 0282 5C                mov X,A
 0283 18                pop A
 0284 7C0000            xcall _LCD_1_PrString
 0287 20                pop X
 0288                   .dbline -2
 0288           L27:
 0288 20                pop X
 0289                   .dbline 0 ; func end
 0289 7F                ret
 028A                   .dbsym l line -6 c
 028A                   .dbsym l str -5 pc
 028A                   .dbend
 028A                   .dbfunc e SleepTimerISR _SleepTimerISR fV
 028A           _SleepTimerISR::
 028A                   .dbline -1
 028A 08                push A
 028B                   .dbline 95
 028B           ; }
 028B           ; 
 028B           ; #pragma interrupt_handler SleepTimerISR // use SleepTimerISR as ISR
 028B           ; void SleepTimerISR(void ) {
 028B                   .dbline 96
 028B           ;       if (PRT1DR == 1) { //if button pressed
 028B 5D04              mov A,REG[0x4]
 028D 3901              cmp A,1
 028F B01B              jnz L31
 0291                   .dbline 97
 0291           ;               if(buttonCount == 3) { //button is pressed
 0291                   .dbline 97
 0291 3C0D00            cmp [_buttonCount],0
 0294 B011              jnz L33
 0296 3C0E03            cmp [_buttonCount+1],3
 0299 B00C              jnz L33
 029B           X7:
 029B                   .dbline 98
 029B           ;                       buttonPressed = TRUE;
 029B                   .dbline 98
 029B 550C01            mov [_buttonPressed],1
 029E                   .dbline 99
 029E           ;                       buttonCount = 0;
 029E 550E00            mov [_buttonCount+1],0
 02A1 550D00            mov [_buttonCount],0
 02A4                   .dbline 100
 02A4           ;               }
 02A4 8006              xjmp L34
 02A6           L33:
 02A6                   .dbline 101
 02A6           ;               else { //add to debounce count
 02A6                   .dbline 102
 02A6           ;                       buttonCount++;
 02A6 760E              inc [_buttonCount+1]
 02A8 0E0D00            adc [_buttonCount],0
 02AB                   .dbline 103
 02AB           ;               }
 02AB           L34:
 02AB                   .dbline 104
 02AB           ;       }
 02AB           L31:
 02AB                   .dbline -2
 02AB           L30:
 02AB 18                pop A
 02AC                   .dbline 0 ; func end
 02AC 7E                reti
 02AD                   .dbend
