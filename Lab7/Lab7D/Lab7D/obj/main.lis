                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area lit(rom, con, rel, lit)
 0000           _SineTable::
 0000 8081              .byte 128,129
 0002 8282              .byte 130,130
 0004 8384              .byte 131,132
 0006 8585              .byte 133,133
 0008 8687              .byte 134,135
 000A 8888              .byte 136,136
 000C 898A              .byte 137,138
 000E 8A8B              .byte 138,139
 0010 8C8D              .byte 140,141
 0012 8D8E              .byte 141,142
 0014 8F8F              .byte 143,143
 0016 9091              .byte 144,145
 0018 9192              .byte 145,146
 001A 9293              .byte 146,147
 001C 9494              .byte 148,148
 001E 9595              .byte 149,149
 0020 9696              .byte 150,150
 0022 9797              .byte 151,151
 0024 9898              .byte 152,152
 0026 9999              .byte 153,153
 0028 9A9A              .byte 154,154
 002A 9B9B              .byte 155,155
 002C 9B9C              .byte 155,156
 002E 9C9C              .byte 156,156
 0030 9D9D              .byte 157,157
 0032 9D9D              .byte 157,157
 0034 9E9E              .byte 158,158
 0036 9E9E              .byte 158,158
 0038 9E9F              .byte 158,159
 003A 9F9F              .byte 159,159
 003C 9F9F              .byte 159,159
 003E 9F9F              .byte 159,159
 0040 9F9F              .byte 159,159
 0042 9F9F              .byte 159,159
 0044 9F9F              .byte 159,159
 0046 9F9F              .byte 159,159
 0048 9E9E              .byte 158,158
 004A 9E9E              .byte 158,158
 004C 9E9D              .byte 158,157
 004E 9D9D              .byte 157,157
 0050 9D9C              .byte 157,156
 0052 9C9C              .byte 156,156
 0054 9B9B              .byte 155,155
 0056 9B9A              .byte 155,154
 0058 9A99              .byte 154,153
 005A 9998              .byte 153,152
 005C 9897              .byte 152,151
 005E 9796              .byte 151,150
 0060 9695              .byte 150,149
 0062 9594              .byte 149,148
 0064 9493              .byte 148,147
 0066 9292              .byte 146,146
 0068 9191              .byte 145,145
 006A 908F              .byte 144,143
 006C 8F8E              .byte 143,142
 006E 8D8D              .byte 141,141
 0070 8C8B              .byte 140,139
 0072 8A8A              .byte 138,138
 0074 8988              .byte 137,136
 0076 8887              .byte 136,135
 0078 8685              .byte 134,133
 007A 8584              .byte 133,132
 007C 8382              .byte 131,130
 007E 8281              .byte 130,129
 0080 80A1              .byte 128,161
 0082 A2A2              .byte 162,162
 0084 A3A4              .byte 163,164
 0086 A5A5              .byte 165,165
 0088 A6A7              .byte 166,167
 008A A8A8              .byte 168,168
 008C A9AA              .byte 169,170
 008E AAAB              .byte 170,171
 0090 ACAD              .byte 172,173
 0092 ADAE              .byte 173,174
 0094 AFAF              .byte 175,175
 0096 B0B1              .byte 176,177
 0098 B1B2              .byte 177,178
 009A B2B3              .byte 178,179
 009C B4B4              .byte 180,180
 009E B5B5              .byte 181,181
 00A0 B6B6              .byte 182,182
 00A2 B7B7              .byte 183,183
 00A4 B8B8              .byte 184,184
 00A6 B9B9              .byte 185,185
 00A8 BABA              .byte 186,186
 00AA BBBB              .byte 187,187
 00AC BBBC              .byte 187,188
 00AE BCBC              .byte 188,188
 00B0 BDBD              .byte 189,189
 00B2 BDBD              .byte 189,189
 00B4 BEBE              .byte 190,190
 00B6 BEBE              .byte 190,190
 00B8 BEBF              .byte 190,191
 00BA BFBF              .byte 191,191
 00BC BFBF              .byte 191,191
 00BE BFBF              .byte 191,191
 00C0 BFBF              .byte 191,191
 00C2 BFBF              .byte 191,191
 00C4 BFBF              .byte 191,191
 00C6 BFBF              .byte 191,191
 00C8 BEBE              .byte 190,190
 00CA BEBE              .byte 190,190
 00CC BEBD              .byte 190,189
 00CE BDBD              .byte 189,189
 00D0 BDBC              .byte 189,188
 00D2 BCBC              .byte 188,188
 00D4 BBBB              .byte 187,187
 00D6 BBBA              .byte 187,186
 00D8 BAB9              .byte 186,185
 00DA B9B8              .byte 185,184
 00DC B8B7              .byte 184,183
 00DE B7B6              .byte 183,182
 00E0 B6B5              .byte 182,181
 00E2 B5B4              .byte 181,180
 00E4 B4B3              .byte 180,179
 00E6 B2B2              .byte 178,178
 00E8 B1B1              .byte 177,177
 00EA B0AF              .byte 176,175
 00EC AFAE              .byte 175,174
 00EE ADAD              .byte 173,173
 00F0 ACAB              .byte 172,171
 00F2 AAAA              .byte 170,170
 00F4 A9A8              .byte 169,168
 00F6 A8A7              .byte 168,167
 00F8 A6A5              .byte 166,165
 00FA A5A4              .byte 165,164
 00FC A3A2              .byte 163,162
 00FE A2A1              .byte 162,161
 0100                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0100                   .dbsym e SineTable _SineTable A[256:256]kc
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0000           _Phase::
 0000                   .blkb 1
                        .area idata(rom,lit)
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0001                   .dbsym e Phase _Phase c
 0001           _PhaseRate::
 0001                   .blkb 1
                        .area idata(rom,lit)
 0001 01                .byte 1
                        .area data(ram, con, rel)
 0002                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0002                   .dbsym e PhaseRate _PhaseRate c
 0002           _Gain::
 0002                   .blkb 1
                        .area idata(rom,lit)
 0002 30                .byte 48
                        .area data(ram, con, rel)
 0003                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0003                   .dbsym e Gain _Gain c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0000                   .dbfunc e main _main fV
 0000           ;         line_2 -> X+19
 0000           ;         line_1 -> X+2
 0000           ;            ptr -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3824              add SP,36
 0004                   .dbline 43
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include <string.h>
 0004           ; 
 0004           ; void itoa(unsigned short input, char *str, int base);
 0004           ; void LCD_line_print(char *str, unsigned char line);
 0004           ; 
 0004           ; // const keyword will let the string stored in Flash.
 0004           ; // So it does not take SRAM.
 0004           ; const unsigned char SineTable[256] = {
 0004           ;     128, 129, 130, 130, 131, 132, 133, 133, 134, 135, 136, 136, 137, 138, 138, 139,
 0004           ;     140, 141, 141, 142, 143, 143, 144, 145, 145, 146, 146, 147, 148, 148, 149, 149,
 0004           ;     150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 155, 156, 156, 156,
 0004           ;     157, 157, 157, 157, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 159,
 0004           ;     159, 159, 159, 159, 159, 159, 159, 159, 158, 158, 158, 158, 158, 157, 157, 157,
 0004           ;     157, 156, 156, 156, 155, 155, 155, 154, 154, 153, 153, 152, 152, 151, 151, 150,
 0004           ;     150, 149, 149, 148, 148, 147, 146, 146, 145, 145, 144, 143, 143, 142, 141, 141,
 0004           ;     140, 139, 138, 138, 137, 136, 136, 135, 134, 133, 133, 132, 131, 130, 130, 129,
 0004           ;     128, 161, 162, 162, 163, 164, 165, 165, 166, 167, 168, 168, 169, 170, 170, 171,
 0004           ;     172, 173, 173, 174, 175, 175, 176, 177, 177, 178, 178, 179, 180, 180, 181, 181,
 0004           ;     182, 182, 183, 183, 184, 184, 185, 185, 186, 186, 187, 187, 187, 188, 188, 188,
 0004           ;     189, 189, 189, 189, 190, 190, 190, 190, 190, 191, 191, 191, 191, 191, 191, 191,
 0004           ;     191, 191, 191, 191, 191, 191, 191, 191, 190, 190, 190, 190, 190, 189, 189, 189,
 0004           ;     189, 188, 188, 188, 187, 187, 187, 186, 186, 185, 185, 184, 184, 183, 183, 182,
 0004           ;     182, 181, 181, 180, 180, 179, 178, 178, 177, 177, 176, 175, 175, 174, 173, 173,
 0004           ;     172, 171, 170, 170, 169, 168, 168, 167, 166, 165, 165, 164, 163, 162, 162, 161
 0004           ; };
 0004           ; 
 0004           ; // sineTable index variable 
 0004           ; unsigned char Phase = 0; 
 0004           ; // sineTable step size – this is the variable you change  
 0004           ; // to get different output frequencies 
 0004           ; unsigned char PhaseRate = 1; 
 0004           ; // gain variable – this you change to experiment with different gains 
 0004           ; // note that the gain is set to some predefined values 
 0004           ; unsigned char Gain = 0x30; // should make gain = -1 
 0004           ; 
 0004           ; // main 
 0004           ; void main (void){
 0004                   .dbline 49
 0004           ;       char line_1[17];
 0004           ;       char line_2[17];
 0004           ;       char *ptr;
 0004           ; 
 0004           ;       // Start LCD
 0004           ;       LCD_1_Start();
 0004 10                push X
 0005 7C0000            xcall _LCD_1_Start
 0008 20                pop X
 0009                   .dbline 50
 0009           ;       cstrcpy(line_1, "Lab7D Test");
 0009 5014              mov A,>L2
 000B 08                push A
 000C 5014              mov A,<L2
 000E 08                push A
 000F 5A00              mov [__r1],X
 0011 060002            add [__r1],2
 0014 5100              mov A,[__r0]
 0016 08                push A
 0017 5100              mov A,[__r1]
 0019 08                push A
 001A 7C0000            xcall _cstrcpy
 001D                   .dbline 51
 001D           ;       LCD_line_print(line_1, 0);
 001D 5000              mov A,0
 001F 08                push A
 0020 5A00              mov [__r1],X
 0022 060002            add [__r1],2
 0025 5100              mov A,[__r0]
 0027 08                push A
 0028 5100              mov A,[__r1]
 002A 08                push A
 002B 926E              xcall _LCD_line_print
 002D 38F9              add SP,-7
 002F                   .dbline 59
 002F           ;       
 002F           ;     // add code to start the analog modules SCDAC and SCGain
 002F           ;     // if required (look at module datasheet) 
 002F           ;       //SCDAC_Start(SCDAC_LOWPOWER);
 002F           ;       //SCGain_Start(SCGain_LOWPOWER);
 002F           ;     
 002F           ;     // add code to enable VC3 interrupt and global interrupts
 002F           ;       M8C_EnableIntMask(INT_MSK0, INT_MSK0_VC3);
 002F 43E080            or REG[0xe0],-128
 0032                   .dbline 60
 0032           ;       M8C_EnableGInt; //enable global interrupt
 0032 7101                      or  F, 01h
 0034           
 0034                   .dbline 63
 0034           ; 
 0034           ;     // write gain value
 0034           ;     SCGain_cr0 = Gain; 
 0034 5102              mov A,[_Gain]
 0036 6090              mov REG[0x90],A
 0038 811C              xjmp L4
 003A           L3:
 003A                   .dbline 65
 003A           ;       
 003A           ;     while (1) {               
 003A                   .dbline 67
 003A           ;               // put Phase value
 003A           ;               ptr = line_1;
 003A 5A00              mov [__r0],X
 003C 060002            add [__r0],2
 003F 5100              mov A,[__r0]
 0041 5401              mov [X+1],A
 0043                   .dbline 68
 0043           ;               cstrcpy(ptr, "Phase:");
 0043 500D              mov A,>L6
 0045 08                push A
 0046 500D              mov A,<L6
 0048 08                push A
 0049 5200              mov A,[X+0]
 004B 08                push A
 004C 5201              mov A,[X+1]
 004E 08                push A
 004F 7C0000            xcall _cstrcpy
 0052 38FC              add SP,-4
 0054                   .dbline 69
 0054           ;               ptr += strlen(ptr);
 0054 5200              mov A,[X+0]
 0056 08                push A
 0057 5201              mov A,[X+1]
 0059 08                push A
 005A 7C0000            xcall _strlen
 005D 5100              mov A,[__r1]
 005F 0301              add A,[X+1]
 0061 5401              mov [X+1],A
 0063 5100              mov A,[__r0]
 0065 0B00              adc A,[X+0]
 0067 5400              mov [X+0],A
 0069                   .dbline 70
 0069           ;               itoa(Phase, ptr, 10);
 0069 5000              mov A,0
 006B 08                push A
 006C 500A              mov A,10
 006E 08                push A
 006F 5200              mov A,[X+0]
 0071 08                push A
 0072 5201              mov A,[X+1]
 0074 08                push A
 0075 5F0000            mov [__r1],[_Phase]
 0078 5000              mov A,0
 007A 08                push A
 007B 5100              mov A,[__r1]
 007D 08                push A
 007E 910D              xcall _itoa
 0080 38F8              add SP,-8
 0082                   .dbline 71
 0082           ;               LCD_line_print(line_1, 0);
 0082 5000              mov A,0
 0084 08                push A
 0085 5A00              mov [__r1],X
 0087 060002            add [__r1],2
 008A 5100              mov A,[__r0]
 008C 08                push A
 008D 5100              mov A,[__r1]
 008F 08                push A
 0090 9209              xcall _LCD_line_print
 0092                   .dbline 73
 0092           ;               //put gain and rate
 0092           ;               ptr = line_2;
 0092 5A00              mov [__r0],X
 0094 060013            add [__r0],19
 0097 5100              mov A,[__r0]
 0099 5401              mov [X+1],A
 009B                   .dbline 74
 009B           ;               cstrcpy(ptr, "Gain:");
 009B 5007              mov A,>L7
 009D 08                push A
 009E 5007              mov A,<L7
 00A0 08                push A
 00A1 5200              mov A,[X+0]
 00A3 08                push A
 00A4 5201              mov A,[X+1]
 00A6 08                push A
 00A7 7C0000            xcall _cstrcpy
 00AA 38F9              add SP,-7
 00AC                   .dbline 75
 00AC           ;               ptr += strlen(ptr);
 00AC 5200              mov A,[X+0]
 00AE 08                push A
 00AF 5201              mov A,[X+1]
 00B1 08                push A
 00B2 7C0000            xcall _strlen
 00B5 5100              mov A,[__r1]
 00B7 0301              add A,[X+1]
 00B9 5401              mov [X+1],A
 00BB 5100              mov A,[__r0]
 00BD 0B00              adc A,[X+0]
 00BF 5400              mov [X+0],A
 00C1                   .dbline 76
 00C1           ;               itoa(Gain, ptr, 10);
 00C1 5000              mov A,0
 00C3 08                push A
 00C4 500A              mov A,10
 00C6 08                push A
 00C7 5200              mov A,[X+0]
 00C9 08                push A
 00CA 5201              mov A,[X+1]
 00CC 08                push A
 00CD 5F0002            mov [__r1],[_Gain]
 00D0 5000              mov A,0
 00D2 08                push A
 00D3 5100              mov A,[__r1]
 00D5 08                push A
 00D6 90B5              xcall _itoa
 00D8 38F8              add SP,-8
 00DA                   .dbline 77
 00DA           ;               ptr += strlen(ptr);
 00DA 5200              mov A,[X+0]
 00DC 08                push A
 00DD 5201              mov A,[X+1]
 00DF 08                push A
 00E0 7C0000            xcall _strlen
 00E3 5100              mov A,[__r1]
 00E5 0301              add A,[X+1]
 00E7 5401              mov [X+1],A
 00E9 5100              mov A,[__r0]
 00EB 0B00              adc A,[X+0]
 00ED 5400              mov [X+0],A
 00EF                   .dbline 79
 00EF           ;               
 00EF           ;               cstrcpy(ptr, " Rate:");
 00EF 5000              mov A,>L8
 00F1 08                push A
 00F2 5000              mov A,<L8
 00F4 08                push A
 00F5 5200              mov A,[X+0]
 00F7 08                push A
 00F8 5201              mov A,[X+1]
 00FA 08                push A
 00FB 7C0000            xcall _cstrcpy
 00FE 38FA              add SP,-6
 0100                   .dbline 80
 0100           ;               ptr += strlen(ptr);
 0100 5200              mov A,[X+0]
 0102 08                push A
 0103 5201              mov A,[X+1]
 0105 08                push A
 0106 7C0000            xcall _strlen
 0109 5100              mov A,[__r1]
 010B 0301              add A,[X+1]
 010D 5401              mov [X+1],A
 010F 5100              mov A,[__r0]
 0111 0B00              adc A,[X+0]
 0113 5400              mov [X+0],A
 0115                   .dbline 81
 0115           ;               itoa(PhaseRate, ptr, 10);
 0115 5000              mov A,0
 0117 08                push A
 0118 500A              mov A,10
 011A 08                push A
 011B 5200              mov A,[X+0]
 011D 08                push A
 011E 5201              mov A,[X+1]
 0120 08                push A
 0121 5F0001            mov [__r1],[_PhaseRate]
 0124 5000              mov A,0
 0126 08                push A
 0127 5100              mov A,[__r1]
 0129 08                push A
 012A 9061              xcall _itoa
 012C 38F8              add SP,-8
 012E                   .dbline 82
 012E           ;               ptr += strlen(ptr);
 012E 5200              mov A,[X+0]
 0130 08                push A
 0131 5201              mov A,[X+1]
 0133 08                push A
 0134 7C0000            xcall _strlen
 0137 5100              mov A,[__r1]
 0139 0301              add A,[X+1]
 013B 5401              mov [X+1],A
 013D 5100              mov A,[__r0]
 013F 0B00              adc A,[X+0]
 0141 5400              mov [X+0],A
 0143                   .dbline 83
 0143           ;               LCD_line_print(line_2, 1);
 0143 5001              mov A,1
 0145 08                push A
 0146 5A00              mov [__r1],X
 0148 060013            add [__r1],19
 014B 5100              mov A,[__r0]
 014D 08                push A
 014E 5100              mov A,[__r1]
 0150 08                push A
 0151 9148              xcall _LCD_line_print
 0153 38FB              add SP,-5
 0155                   .dbline 84
 0155           ;     }
 0155           L4:
 0155                   .dbline 65
 0155 8EE4              xjmp L3
 0157           X0:
 0157                   .dbline -2
 0157           L1:
 0157 38DC              add SP,-36
 0159 20                pop X
 015A                   .dbline 0 ; func end
 015A 8FFF              jmp .
 015C                   .dbsym l line_2 19 A[17:17]c
 015C                   .dbsym l line_1 2 A[17:17]c
 015C                   .dbsym l ptr 0 pc
 015C                   .dbend
 015C                   .dbfunc e VC3_Interrupt _VC3_Interrupt fV
 015C           _VC3_Interrupt::
 015C                   .dbline -1
 015C 08                push A
 015D 5100              mov A,[__r0]
 015F 08                push A
 0160 5100              mov A,[__r1]
 0162 08                push A
 0163                   .dbline 88
 0163           ; } // end main 
 0163           ; 
 0163           ; #pragma interrupt_handler VC3_Interrupt // use SleepTimerISR as ISR
 0163           ; void VC3_Interrupt(void) { 
 0163                   .dbline 90
 0163           ;     // change SCDAC_cr0 to next value in table 
 0163           ;     M8C_Stall; // required to avoid glitch 
 0163 436501            or REG[0x65],1
 0166                   .dbline 91
 0166           ;     SCDAC_cr0 = SineTable[Phase]; 
 0166 5F0000            mov [__r1],[_Phase]
 0169 550000            mov [__r0],0
 016C 060000            add [__r1],<_SineTable
 016F 0E0000            adc [__r0],>_SineTable
 0172 5100              mov A,[__r0]
 0174 10                push X
 0175 5800              mov X,[__r1]
 0177 28                romx
 0178 20                pop X
 0179 6080              mov REG[0x80],A
 017B                   .dbline 92
 017B           ;     M8C_Unstall; 
 017B 4165FE            and REG[0x65],-2
 017E                   .dbline 95
 017E           ;       
 017E           ;     // adjust SineTable index based on step used 
 017E           ;     Phase = (Phase + PhaseRate); // use modulo 256 since the table index 
 017E 5101              mov A,[_PhaseRate]
 0180 0400              add [_Phase],A
 0182                   .dbline 98
 0182           ;     // should go only from 0 to 25, but phase is defined as int 
 0182           ;     
 0182           ;     M8C_ClearIntFlag(INT_CLR0, INT_MSK0_VC3); // needed to avoid nested 
 0182 62DA7F            mov REG[0xda],127
 0185                   .dbline -2
 0185           L9:
 0185 18                pop A
 0186 5300              mov [__r1],A
 0188 18                pop A
 0189 5300              mov [__r0],A
 018B 18                pop A
 018C                   .dbline 0 ; func end
 018C 7E                reti
 018D                   .dbend
 018D                   .dbfunc e itoa _itoa fV
 018D           ;          digit -> X+4
 018D           ;              n -> X+2
 018D           ;              d -> X+0
 018D           ;           base -> X-9
 018D           ;            str -> X-7
 018D           ;          input -> X-5
 018D           _itoa::
 018D                   .dbline -1
 018D 10                push X
 018E 4F                mov X,SP
 018F 3808              add SP,8
 0191                   .dbline 105
 0191           ;       // interrupts since stall/unstall are used and this can take  
 0191           ;     // quite some time. 
 0191           ; }// end VC3 interrupt 
 0191           ; 
 0191           ; 
 0191           ; void itoa(unsigned short input, char *str, int base)
 0191           ; {
 0191                   .dbline 106
 0191           ;       int n = 0;
 0191 560300            mov [X+3],0
 0194 560200            mov [X+2],0
 0197                   .dbline 107
 0197           ;       unsigned int d = 1;
 0197 560101            mov [X+1],1
 019A 560000            mov [X+0],0
 019D 801A              xjmp L12
 019F           L11:
 019F                   .dbline 110
 019F           ;       
 019F           ;       while ((input / d) >= base)
 019F           ;       {
 019F                   .dbline 111
 019F           ;               d *= base;
 019F 52F7              mov A,[X-9]
 01A1 08                push A
 01A2 52F8              mov A,[X-8]
 01A4 08                push A
 01A5 5200              mov A,[X+0]
 01A7 08                push A
 01A8 5201              mov A,[X+1]
 01AA 08                push A
 01AB 7C0000            xcall __mul16
 01AE 38FC              add SP,-4
 01B0 5100              mov A,[__rX]
 01B2 5401              mov [X+1],A
 01B4 5100              mov A,[__rY]
 01B6 5400              mov [X+0],A
 01B8                   .dbline 112
 01B8           ;       }
 01B8           L12:
 01B8                   .dbline 109
 01B8 5200              mov A,[X+0]
 01BA 08                push A
 01BB 5201              mov A,[X+1]
 01BD 08                push A
 01BE 52FB              mov A,[X-5]
 01C0 08                push A
 01C1 52FC              mov A,[X-4]
 01C3 08                push A
 01C4 7C0000            xcall __divmodu_16X16_16
 01C7 18                pop A
 01C8 5300              mov [__r1],A
 01CA 18                pop A
 01CB 5300              mov [__r0],A
 01CD 38FE              add SP,-2
 01CF 5100              mov A,[__r1]
 01D1 13F8              sub A,[X-8]
 01D3 5100              mov A,[__r0]
 01D5 1BF7              sbb A,[X-9]
 01D7 DFC7              jnc L11
 01D9           X1:
 01D9 80AB              xjmp L15
 01DB           L14:
 01DB                   .dbline 114
 01DB           ;       while (d != 0)
 01DB           ;       {
 01DB                   .dbline 115
 01DB           ;               int digit = input / d;
 01DB 5200              mov A,[X+0]
 01DD 08                push A
 01DE 5201              mov A,[X+1]
 01E0 08                push A
 01E1 52FB              mov A,[X-5]
 01E3 08                push A
 01E4 52FC              mov A,[X-4]
 01E6 08                push A
 01E7 7C0000            xcall __divmodu_16X16_16
 01EA 18                pop A
 01EB 5300              mov [__r1],A
 01ED 18                pop A
 01EE 5300              mov [__r0],A
 01F0 38FE              add SP,-2
 01F2 5100              mov A,[__r1]
 01F4 5405              mov [X+5],A
 01F6 5100              mov A,[__r0]
 01F8 5404              mov [X+4],A
 01FA                   .dbline 116
 01FA           ;               input %= d;
 01FA 5200              mov A,[X+0]
 01FC 08                push A
 01FD 5201              mov A,[X+1]
 01FF 08                push A
 0200 52FB              mov A,[X-5]
 0202 08                push A
 0203 52FC              mov A,[X-4]
 0205 08                push A
 0206 7C0000            xcall __divmodu_16X16_16
 0209 38FE              add SP,-2
 020B 18                pop A
 020C 54FC              mov [X-4],A
 020E 18                pop A
 020F 54FB              mov [X-5],A
 0211                   .dbline 117
 0211           ;               d /= base;
 0211 52F7              mov A,[X-9]
 0213 08                push A
 0214 52F8              mov A,[X-8]
 0216 08                push A
 0217 5200              mov A,[X+0]
 0219 08                push A
 021A 5201              mov A,[X+1]
 021C 08                push A
 021D 7C0000            xcall __divmodu_16X16_16
 0220 18                pop A
 0221 5401              mov [X+1],A
 0223 18                pop A
 0224 5400              mov [X+0],A
 0226 38FE              add SP,-2
 0228                   .dbline 118
 0228           ;               if (n || digit > 0 || d == 0)
 0228 3D0200            cmp [X+2],0
 022B B020              jnz L20
 022D 3D0300            cmp [X+3],0
 0230 B01B              jnz L20
 0232           X2:
 0232 5000              mov A,0
 0234 1305              sub A,[X+5]
 0236 5204              mov A,[X+4]
 0238 3180              xor A,-128
 023A 5300              mov [__rX],A
 023C 5080              mov A,(0 ^ 0x80)
 023E 1A00              sbb A,[__rX]
 0240 C00B              jc L20
 0242           X3:
 0242 3D0000            cmp [X+0],0
 0245 B03F              jnz L17
 0247 3D0100            cmp [X+1],0
 024A B03A              jnz L17
 024C           X4:
 024C           L20:
 024C                   .dbline 120
 024C           ;               {
 024C           ;                       *str++ = digit + ((digit < 10)? '0': 'a' - 10);
 024C                   .dbline 120
 024C 52FA              mov A,[X-6]
 024E 5300              mov [__r1],A
 0250 52F9              mov A,[X-7]
 0252 5300              mov [__r0],A
 0254 5100              mov A,[__r1]
 0256 0101              add A,1
 0258 54FA              mov [X-6],A
 025A 5100              mov A,[__r0]
 025C 0900              adc A,0
 025E 54F9              mov [X-7],A
 0260 5205              mov A,[X+5]
 0262 110A              sub A,10
 0264 5204              mov A,[X+4]
 0266 3180              xor A,-128
 0268 1980              sbb A,(0 ^ 0x80)
 026A D009              jnc L22
 026C           X5:
 026C 560730            mov [X+7],48
 026F 560600            mov [X+6],0
 0272 8007              xjmp L23
 0274           L22:
 0274 560757            mov [X+7],87
 0277 560600            mov [X+6],0
 027A           L23:
 027A 5205              mov A,[X+5]
 027C 0307              add A,[X+7]
 027E 3F00              mvi [__r1],A
 0280                   .dbline 121
 0280           ;                       n++;
 0280 7703              inc [X+3]
 0282 0F0200            adc [X+2],0
 0285                   .dbline 122
 0285           ;               }
 0285           L17:
 0285                   .dbline 123
 0285           ;       }
 0285           L15:
 0285                   .dbline 113
 0285 3D0000            cmp [X+0],0
 0288 BF52              jnz L14
 028A 3D0100            cmp [X+1],0
 028D BF4D              jnz L14
 028F           X6:
 028F                   .dbline 124
 028F           ;       *str = '\0';
 028F 52FA              mov A,[X-6]
 0291 5300              mov [__r1],A
 0293 5000              mov A,0
 0295 3F00              mvi [__r1],A
 0297                   .dbline -2
 0297           L10:
 0297 38F8              add SP,-8
 0299 20                pop X
 029A                   .dbline 0 ; func end
 029A 7F                ret
 029B                   .dbsym l digit 4 I
 029B                   .dbsym l n 2 I
 029B                   .dbsym l d 0 i
 029B                   .dbsym l base -9 I
 029B                   .dbsym l str -7 pc
 029B                   .dbsym l input -5 s
 029B                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0000           L25:
 0000                   .blkb 17
                        .area text(rom, con, rel)
 029B                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 029B                   .dbfunc e LCD_line_print _LCD_line_print fV
 029B                   .dbsym s buffer L25 A[17:17]c
 029B           ;           line -> X-6
 029B           ;            str -> X-5
 029B           _LCD_line_print::
 029B                   .dbline -1
 029B 10                push X
 029C 4F                mov X,SP
 029D                   .dbline 128
 029D           ; }
 029D           ; 
 029D           ; void LCD_line_print(char *str, unsigned char line)
 029D           ; {
 029D                   .dbline 130
 029D           ;       static char buffer[17];
 029D           ;       memset(buffer, ' ', 16);
 029D 5000              mov A,0
 029F 08                push A
 02A0 5010              mov A,16
 02A2 08                push A
 02A3 5000              mov A,0
 02A5 08                push A
 02A6 5020              mov A,32
 02A8 08                push A
 02A9 5000              mov A,>L25
 02AB 08                push A
 02AC 5000              mov A,<L25
 02AE 08                push A
 02AF 7C0000            xcall _memset
 02B2 38FA              add SP,-6
 02B4                   .dbline 131
 02B4           ;       memcpy(buffer, str, strlen(str));
 02B4 52FB              mov A,[X-5]
 02B6 08                push A
 02B7 52FC              mov A,[X-4]
 02B9 08                push A
 02BA 7C0000            xcall _strlen
 02BD 5100              mov A,[__r0]
 02BF 08                push A
 02C0 5100              mov A,[__r1]
 02C2 08                push A
 02C3 52FB              mov A,[X-5]
 02C5 08                push A
 02C6 52FC              mov A,[X-4]
 02C8 08                push A
 02C9 5000              mov A,>L25
 02CB 08                push A
 02CC 5000              mov A,<L25
 02CE 08                push A
 02CF 7C0000            xcall _memcpy
 02D2 38F8              add SP,-8
 02D4                   .dbline 132
 02D4           ;       buffer[17] = '\0';
 02D4 551100            mov [L25+17],0
 02D7                   .dbline 133
 02D7           ;       LCD_1_Position(line, 0);
 02D7 10                push X
 02D8 5000              mov A,0
 02DA 08                push A
 02DB 52FA              mov A,[X-6]
 02DD 20                pop X
 02DE 7C0000            xcall _LCD_1_Position
 02E1                   .dbline 134
 02E1           ;       LCD_1_PrString(buffer);
 02E1 5000              mov A,>L25
 02E3 08                push A
 02E4 5000              mov A,<L25
 02E6 5C                mov X,A
 02E7 18                pop A
 02E8 7C0000            xcall _LCD_1_PrString
 02EB 20                pop X
 02EC                   .dbline -2
 02EC           L24:
 02EC 20                pop X
 02ED                   .dbline 0 ; func end
 02ED 7F                ret
 02EE                   .dbsym l line -6 c
 02EE                   .dbsym l str -5 pc
 02EE                   .dbend
                        .area lit(rom, con, rel, lit)
 0100           L8:
 0100 20526174653A00    .byte 32,'R,'a,'t,'e,58,0
 0107           L7:
 0107 4761696E3A00      .byte 'G,'a,'i,'n,58,0
 010D           L6:
 010D 50686173653A00    .byte 'P,'h,'a,'s,'e,58,0
 0114           L2:
 0114 4C61623744205465737400    .byte 'L,'a,'b,55,'D,32,'T,'e,'s,'t,0
