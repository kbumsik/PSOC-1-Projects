                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area lit(rom, con, rel, lit)
 0000           _SineTable::
 0000 8081              .byte 128,129
 0002 8282              .byte 130,130
 0004 8384              .byte 131,132
 0006 8585              .byte 133,133
 0008 8687              .byte 134,135
 000A 8888              .byte 136,136
 000C 898A              .byte 137,138
 000E 8A8B              .byte 138,139
 0010 8C8D              .byte 140,141
 0012 8D8E              .byte 141,142
 0014 8F8F              .byte 143,143
 0016 9091              .byte 144,145
 0018 9192              .byte 145,146
 001A 9293              .byte 146,147
 001C 9494              .byte 148,148
 001E 9595              .byte 149,149
 0020 9696              .byte 150,150
 0022 9797              .byte 151,151
 0024 9898              .byte 152,152
 0026 9999              .byte 153,153
 0028 9A9A              .byte 154,154
 002A 9B9B              .byte 155,155
 002C 9B9C              .byte 155,156
 002E 9C9C              .byte 156,156
 0030 9D9D              .byte 157,157
 0032 9D9D              .byte 157,157
 0034 9E9E              .byte 158,158
 0036 9E9E              .byte 158,158
 0038 9E9F              .byte 158,159
 003A 9F9F              .byte 159,159
 003C 9F9F              .byte 159,159
 003E 9F9F              .byte 159,159
 0040 9F9F              .byte 159,159
 0042 9F9F              .byte 159,159
 0044 9F9F              .byte 159,159
 0046 9F9F              .byte 159,159
 0048 9E9E              .byte 158,158
 004A 9E9E              .byte 158,158
 004C 9E9D              .byte 158,157
 004E 9D9D              .byte 157,157
 0050 9D9C              .byte 157,156
 0052 9C9C              .byte 156,156
 0054 9B9B              .byte 155,155
 0056 9B9A              .byte 155,154
 0058 9A99              .byte 154,153
 005A 9998              .byte 153,152
 005C 9897              .byte 152,151
 005E 9796              .byte 151,150
 0060 9695              .byte 150,149
 0062 9594              .byte 149,148
 0064 9493              .byte 148,147
 0066 9292              .byte 146,146
 0068 9191              .byte 145,145
 006A 908F              .byte 144,143
 006C 8F8E              .byte 143,142
 006E 8D8D              .byte 141,141
 0070 8C8B              .byte 140,139
 0072 8A8A              .byte 138,138
 0074 8988              .byte 137,136
 0076 8887              .byte 136,135
 0078 8685              .byte 134,133
 007A 8584              .byte 133,132
 007C 8382              .byte 131,130
 007E 8281              .byte 130,129
 0080 80A1              .byte 128,161
 0082 A2A2              .byte 162,162
 0084 A3A4              .byte 163,164
 0086 A5A5              .byte 165,165
 0088 A6A7              .byte 166,167
 008A A8A8              .byte 168,168
 008C A9AA              .byte 169,170
 008E AAAB              .byte 170,171
 0090 ACAD              .byte 172,173
 0092 ADAE              .byte 173,174
 0094 AFAF              .byte 175,175
 0096 B0B1              .byte 176,177
 0098 B1B2              .byte 177,178
 009A B2B3              .byte 178,179
 009C B4B4              .byte 180,180
 009E B5B5              .byte 181,181
 00A0 B6B6              .byte 182,182
 00A2 B7B7              .byte 183,183
 00A4 B8B8              .byte 184,184
 00A6 B9B9              .byte 185,185
 00A8 BABA              .byte 186,186
 00AA BBBB              .byte 187,187
 00AC BBBC              .byte 187,188
 00AE BCBC              .byte 188,188
 00B0 BDBD              .byte 189,189
 00B2 BDBD              .byte 189,189
 00B4 BEBE              .byte 190,190
 00B6 BEBE              .byte 190,190
 00B8 BEBF              .byte 190,191
 00BA BFBF              .byte 191,191
 00BC BFBF              .byte 191,191
 00BE BFBF              .byte 191,191
 00C0 BFBF              .byte 191,191
 00C2 BFBF              .byte 191,191
 00C4 BFBF              .byte 191,191
 00C6 BFBF              .byte 191,191
 00C8 BEBE              .byte 190,190
 00CA BEBE              .byte 190,190
 00CC BEBD              .byte 190,189
 00CE BDBD              .byte 189,189
 00D0 BDBC              .byte 189,188
 00D2 BCBC              .byte 188,188
 00D4 BBBB              .byte 187,187
 00D6 BBBA              .byte 187,186
 00D8 BAB9              .byte 186,185
 00DA B9B8              .byte 185,184
 00DC B8B7              .byte 184,183
 00DE B7B6              .byte 183,182
 00E0 B6B5              .byte 182,181
 00E2 B5B4              .byte 181,180
 00E4 B4B3              .byte 180,179
 00E6 B2B2              .byte 178,178
 00E8 B1B1              .byte 177,177
 00EA B0AF              .byte 176,175
 00EC AFAE              .byte 175,174
 00EE ADAD              .byte 173,173
 00F0 ACAB              .byte 172,171
 00F2 AAAA              .byte 170,170
 00F4 A9A8              .byte 169,168
 00F6 A8A7              .byte 168,167
 00F8 A6A5              .byte 166,165
 00FA A5A4              .byte 165,164
 00FC A3A2              .byte 163,162
 00FE A2A1              .byte 162,161
 0100                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0100                   .dbsym e SineTable _SineTable A[256:256]kc
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0000           _Phase::
 0000                   .blkb 1
                        .area idata(rom,lit)
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0001                   .dbsym e Phase _Phase c
 0001           _PhaseRate::
 0001                   .blkb 1
                        .area idata(rom,lit)
 0001 01                .byte 1
                        .area data(ram, con, rel)
 0002                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0002                   .dbsym e PhaseRate _PhaseRate c
 0002           _Gain::
 0002                   .blkb 1
                        .area idata(rom,lit)
 0002 30                .byte 48
                        .area data(ram, con, rel)
 0003                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0003                   .dbsym e Gain _Gain c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0000                   .dbfunc e main _main fV
 0000           ;         line_2 -> X+19
 0000           ;         line_1 -> X+2
 0000           ;            ptr -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3824              add SP,36
 0004                   .dbline 43
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include <string.h>
 0004           ; 
 0004           ; void itoa(unsigned short input, char *str, int base);
 0004           ; void LCD_line_print(char *str, unsigned char line);
 0004           ; 
 0004           ; // const keyword will let the string stored in Flash.
 0004           ; // So it does not take SRAM.
 0004           ; const unsigned char SineTable[256] = {
 0004           ;     128, 129, 130, 130, 131, 132, 133, 133, 134, 135, 136, 136, 137, 138, 138, 139,
 0004           ;     140, 141, 141, 142, 143, 143, 144, 145, 145, 146, 146, 147, 148, 148, 149, 149,
 0004           ;     150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 155, 156, 156, 156,
 0004           ;     157, 157, 157, 157, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 159,
 0004           ;     159, 159, 159, 159, 159, 159, 159, 159, 158, 158, 158, 158, 158, 157, 157, 157,
 0004           ;     157, 156, 156, 156, 155, 155, 155, 154, 154, 153, 153, 152, 152, 151, 151, 150,
 0004           ;     150, 149, 149, 148, 148, 147, 146, 146, 145, 145, 144, 143, 143, 142, 141, 141,
 0004           ;     140, 139, 138, 138, 137, 136, 136, 135, 134, 133, 133, 132, 131, 130, 130, 129,
 0004           ;     128, 161, 162, 162, 163, 164, 165, 165, 166, 167, 168, 168, 169, 170, 170, 171,
 0004           ;     172, 173, 173, 174, 175, 175, 176, 177, 177, 178, 178, 179, 180, 180, 181, 181,
 0004           ;     182, 182, 183, 183, 184, 184, 185, 185, 186, 186, 187, 187, 187, 188, 188, 188,
 0004           ;     189, 189, 189, 189, 190, 190, 190, 190, 190, 191, 191, 191, 191, 191, 191, 191,
 0004           ;     191, 191, 191, 191, 191, 191, 191, 191, 190, 190, 190, 190, 190, 189, 189, 189,
 0004           ;     189, 188, 188, 188, 187, 187, 187, 186, 186, 185, 185, 184, 184, 183, 183, 182,
 0004           ;     182, 181, 181, 180, 180, 179, 178, 178, 177, 177, 176, 175, 175, 174, 173, 173,
 0004           ;     172, 171, 170, 170, 169, 168, 168, 167, 166, 165, 165, 164, 163, 162, 162, 161
 0004           ; };
 0004           ; 
 0004           ; // sineTable index variable 
 0004           ; unsigned char Phase = 0; 
 0004           ; // sineTable step size – this is the variable you change  
 0004           ; // to get different output frequencies 
 0004           ; unsigned char PhaseRate = 1; 
 0004           ; // gain variable – this you change to experiment with different gains 
 0004           ; // note that the gain is set to some predefined values 
 0004           ; unsigned char Gain = 0x30; // should make gain = -1 
 0004           ; 
 0004           ; // main 
 0004           ; void main (void){
 0004                   .dbline 49
 0004           ;       char line_1[17];
 0004           ;       char line_2[17];
 0004           ;       char *ptr;
 0004           ; 
 0004           ;       // Start LCD
 0004           ;       LCD_1_Start();
 0004 10                push X
 0005 7C0000            xcall _LCD_1_Start
 0008 20                pop X
 0009                   .dbline 50
 0009           ;       cstrcpy(line_1, "Lab7D Test");
 0009 5014              mov A,>L2
 000B 08                push A
 000C 5014              mov A,<L2
 000E 08                push A
 000F 5A00              mov [__r1],X
 0011 060002            add [__r1],2
 0014 5100              mov A,[__r0]
 0016 08                push A
 0017 5100              mov A,[__r1]
 0019 08                push A
 001A 7C0000            xcall _cstrcpy
 001D                   .dbline 51
 001D           ;       LCD_line_print(line_1, 0);
 001D 5000              mov A,0
 001F 08                push A
 0020 5A00              mov [__r1],X
 0022 060002            add [__r1],2
 0025 5100              mov A,[__r0]
 0027 08                push A
 0028 5100              mov A,[__r1]
 002A 08                push A
 002B 9280              xcall _LCD_line_print
 002D 38F9              add SP,-7
 002F                   .dbline 55
 002F           ;       
 002F           ;     // add code to start the analog modules SCDAC and SCGain
 002F           ;     // if required (look at module datasheet)
 002F           ;       SCDAC_Start(SCDAC_HIGHPOWER);
 002F 10                push X
 0030 5003              mov A,3
 0032 7C0000            xcall _SCDAC_Start
 0035                   .dbline 56
 0035           ;       SCGain_Start(SCGain_HIGHPOWER);
 0035 5003              mov A,3
 0037 7C0000            xcall _SCGain_Start
 003A                   .dbline 59
 003A           ;       
 003A           ;       
 003A           ;       SCDAC_Stop();
 003A 7C0000            xcall _SCDAC_Stop
 003D                   .dbline 60
 003D           ;       SCGain_Stop();
 003D 7C0000            xcall _SCGain_Stop
 0040 20                pop X
 0041                   .dbline 63
 0041           ;       
 0041           ;     // add code to enable VC3 interrupt and global interrupts
 0041           ;       M8C_EnableIntMask(INT_MSK0, INT_MSK0_VC3);
 0041 43E080            or REG[0xe0],-128
 0044                   .dbline 64
 0044           ;       M8C_EnableGInt; //enable global interrupt
 0044 7101                      or  F, 01h
 0046           
 0046                   .dbline 67
 0046           ; 
 0046           ;     // write gain value
 0046           ;     SCGain_cr0 = Gain; 
 0046 5102              mov A,[_Gain]
 0048 6090              mov REG[0x90],A
 004A 811C              xjmp L4
 004C           L3:
 004C                   .dbline 69
 004C           ;       
 004C           ;     while (1) {               
 004C                   .dbline 71
 004C           ;               // put Phase value
 004C           ;               ptr = line_1;
 004C 5A00              mov [__r0],X
 004E 060002            add [__r0],2
 0051 5100              mov A,[__r0]
 0053 5401              mov [X+1],A
 0055                   .dbline 72
 0055           ;               cstrcpy(ptr, "Phase:");
 0055 500D              mov A,>L6
 0057 08                push A
 0058 500D              mov A,<L6
 005A 08                push A
 005B 5200              mov A,[X+0]
 005D 08                push A
 005E 5201              mov A,[X+1]
 0060 08                push A
 0061 7C0000            xcall _cstrcpy
 0064 38FC              add SP,-4
 0066                   .dbline 73
 0066           ;               ptr += strlen(ptr);
 0066 5200              mov A,[X+0]
 0068 08                push A
 0069 5201              mov A,[X+1]
 006B 08                push A
 006C 7C0000            xcall _strlen
 006F 5100              mov A,[__r1]
 0071 0301              add A,[X+1]
 0073 5401              mov [X+1],A
 0075 5100              mov A,[__r0]
 0077 0B00              adc A,[X+0]
 0079 5400              mov [X+0],A
 007B                   .dbline 74
 007B           ;               itoa(Phase, ptr, 10);
 007B 5000              mov A,0
 007D 08                push A
 007E 500A              mov A,10
 0080 08                push A
 0081 5200              mov A,[X+0]
 0083 08                push A
 0084 5201              mov A,[X+1]
 0086 08                push A
 0087 5F0000            mov [__r1],[_Phase]
 008A 5000              mov A,0
 008C 08                push A
 008D 5100              mov A,[__r1]
 008F 08                push A
 0090 910D              xcall _itoa
 0092 38F8              add SP,-8
 0094                   .dbline 75
 0094           ;               LCD_line_print(line_1, 0);
 0094 5000              mov A,0
 0096 08                push A
 0097 5A00              mov [__r1],X
 0099 060002            add [__r1],2
 009C 5100              mov A,[__r0]
 009E 08                push A
 009F 5100              mov A,[__r1]
 00A1 08                push A
 00A2 9209              xcall _LCD_line_print
 00A4                   .dbline 77
 00A4           ;               //put gain and rate
 00A4           ;               ptr = line_2;
 00A4 5A00              mov [__r0],X
 00A6 060013            add [__r0],19
 00A9 5100              mov A,[__r0]
 00AB 5401              mov [X+1],A
 00AD                   .dbline 78
 00AD           ;               cstrcpy(ptr, "Gain:");
 00AD 5007              mov A,>L7
 00AF 08                push A
 00B0 5007              mov A,<L7
 00B2 08                push A
 00B3 5200              mov A,[X+0]
 00B5 08                push A
 00B6 5201              mov A,[X+1]
 00B8 08                push A
 00B9 7C0000            xcall _cstrcpy
 00BC 38F9              add SP,-7
 00BE                   .dbline 79
 00BE           ;               ptr += strlen(ptr);
 00BE 5200              mov A,[X+0]
 00C0 08                push A
 00C1 5201              mov A,[X+1]
 00C3 08                push A
 00C4 7C0000            xcall _strlen
 00C7 5100              mov A,[__r1]
 00C9 0301              add A,[X+1]
 00CB 5401              mov [X+1],A
 00CD 5100              mov A,[__r0]
 00CF 0B00              adc A,[X+0]
 00D1 5400              mov [X+0],A
 00D3                   .dbline 80
 00D3           ;               itoa(Gain, ptr, 10);
 00D3 5000              mov A,0
 00D5 08                push A
 00D6 500A              mov A,10
 00D8 08                push A
 00D9 5200              mov A,[X+0]
 00DB 08                push A
 00DC 5201              mov A,[X+1]
 00DE 08                push A
 00DF 5F0002            mov [__r1],[_Gain]
 00E2 5000              mov A,0
 00E4 08                push A
 00E5 5100              mov A,[__r1]
 00E7 08                push A
 00E8 90B5              xcall _itoa
 00EA 38F8              add SP,-8
 00EC                   .dbline 81
 00EC           ;               ptr += strlen(ptr);
 00EC 5200              mov A,[X+0]
 00EE 08                push A
 00EF 5201              mov A,[X+1]
 00F1 08                push A
 00F2 7C0000            xcall _strlen
 00F5 5100              mov A,[__r1]
 00F7 0301              add A,[X+1]
 00F9 5401              mov [X+1],A
 00FB 5100              mov A,[__r0]
 00FD 0B00              adc A,[X+0]
 00FF 5400              mov [X+0],A
 0101                   .dbline 83
 0101           ;               
 0101           ;               cstrcpy(ptr, " Rate:");
 0101 5000              mov A,>L8
 0103 08                push A
 0104 5000              mov A,<L8
 0106 08                push A
 0107 5200              mov A,[X+0]
 0109 08                push A
 010A 5201              mov A,[X+1]
 010C 08                push A
 010D 7C0000            xcall _cstrcpy
 0110 38FA              add SP,-6
 0112                   .dbline 84
 0112           ;               ptr += strlen(ptr);
 0112 5200              mov A,[X+0]
 0114 08                push A
 0115 5201              mov A,[X+1]
 0117 08                push A
 0118 7C0000            xcall _strlen
 011B 5100              mov A,[__r1]
 011D 0301              add A,[X+1]
 011F 5401              mov [X+1],A
 0121 5100              mov A,[__r0]
 0123 0B00              adc A,[X+0]
 0125 5400              mov [X+0],A
 0127                   .dbline 85
 0127           ;               itoa(PhaseRate, ptr, 10);
 0127 5000              mov A,0
 0129 08                push A
 012A 500A              mov A,10
 012C 08                push A
 012D 5200              mov A,[X+0]
 012F 08                push A
 0130 5201              mov A,[X+1]
 0132 08                push A
 0133 5F0001            mov [__r1],[_PhaseRate]
 0136 5000              mov A,0
 0138 08                push A
 0139 5100              mov A,[__r1]
 013B 08                push A
 013C 9061              xcall _itoa
 013E 38F8              add SP,-8
 0140                   .dbline 86
 0140           ;               ptr += strlen(ptr);
 0140 5200              mov A,[X+0]
 0142 08                push A
 0143 5201              mov A,[X+1]
 0145 08                push A
 0146 7C0000            xcall _strlen
 0149 5100              mov A,[__r1]
 014B 0301              add A,[X+1]
 014D 5401              mov [X+1],A
 014F 5100              mov A,[__r0]
 0151 0B00              adc A,[X+0]
 0153 5400              mov [X+0],A
 0155                   .dbline 87
 0155           ;               LCD_line_print(line_2, 1);
 0155 5001              mov A,1
 0157 08                push A
 0158 5A00              mov [__r1],X
 015A 060013            add [__r1],19
 015D 5100              mov A,[__r0]
 015F 08                push A
 0160 5100              mov A,[__r1]
 0162 08                push A
 0163 9148              xcall _LCD_line_print
 0165 38FB              add SP,-5
 0167                   .dbline 88
 0167           ;     }
 0167           L4:
 0167                   .dbline 69
 0167 8EE4              xjmp L3
 0169           X0:
 0169                   .dbline -2
 0169           L1:
 0169 38DC              add SP,-36
 016B 20                pop X
 016C                   .dbline 0 ; func end
 016C 8FFF              jmp .
 016E                   .dbsym l line_2 19 A[17:17]c
 016E                   .dbsym l line_1 2 A[17:17]c
 016E                   .dbsym l ptr 0 pc
 016E                   .dbend
 016E                   .dbfunc e VC3_Interrupt _VC3_Interrupt fV
 016E           _VC3_Interrupt::
 016E                   .dbline -1
 016E 08                push A
 016F 5100              mov A,[__r0]
 0171 08                push A
 0172 5100              mov A,[__r1]
 0174 08                push A
 0175                   .dbline 92
 0175           ; } // end main 
 0175           ; 
 0175           ; #pragma interrupt_handler VC3_Interrupt // use SleepTimerISR as ISR
 0175           ; void VC3_Interrupt(void) { 
 0175                   .dbline 94
 0175           ;     // change SCDAC_cr0 to next value in table 
 0175           ;     M8C_Stall; // required to avoid glitch 
 0175 436501            or REG[0x65],1
 0178                   .dbline 95
 0178           ;     SCDAC_cr0 = SineTable[Phase]; 
 0178 5F0000            mov [__r1],[_Phase]
 017B 550000            mov [__r0],0
 017E 060000            add [__r1],<_SineTable
 0181 0E0000            adc [__r0],>_SineTable
 0184 5100              mov A,[__r0]
 0186 10                push X
 0187 5800              mov X,[__r1]
 0189 28                romx
 018A 20                pop X
 018B 6080              mov REG[0x80],A
 018D                   .dbline 96
 018D           ;     M8C_Unstall; 
 018D 4165FE            and REG[0x65],-2
 0190                   .dbline 99
 0190           ;       
 0190           ;     // adjust SineTable index based on step used 
 0190           ;     Phase = (Phase + PhaseRate); // use modulo 256 since the table index 
 0190 5101              mov A,[_PhaseRate]
 0192 0400              add [_Phase],A
 0194                   .dbline 102
 0194           ;     // should go only from 0 to 25, but phase is defined as int 
 0194           ;     
 0194           ;     M8C_ClearIntFlag(INT_CLR0, INT_MSK0_VC3); // needed to avoid nested 
 0194 62DA7F            mov REG[0xda],127
 0197                   .dbline -2
 0197           L9:
 0197 18                pop A
 0198 5300              mov [__r1],A
 019A 18                pop A
 019B 5300              mov [__r0],A
 019D 18                pop A
 019E                   .dbline 0 ; func end
 019E 7E                reti
 019F                   .dbend
 019F                   .dbfunc e itoa _itoa fV
 019F           ;          digit -> X+4
 019F           ;              n -> X+2
 019F           ;              d -> X+0
 019F           ;           base -> X-9
 019F           ;            str -> X-7
 019F           ;          input -> X-5
 019F           _itoa::
 019F                   .dbline -1
 019F 10                push X
 01A0 4F                mov X,SP
 01A1 3808              add SP,8
 01A3                   .dbline 109
 01A3           ;       // interrupts since stall/unstall are used and this can take  
 01A3           ;     // quite some time. 
 01A3           ; }// end VC3 interrupt 
 01A3           ; 
 01A3           ; 
 01A3           ; void itoa(unsigned short input, char *str, int base)
 01A3           ; {
 01A3                   .dbline 110
 01A3           ;       int n = 0;
 01A3 560300            mov [X+3],0
 01A6 560200            mov [X+2],0
 01A9                   .dbline 111
 01A9           ;       unsigned int d = 1;
 01A9 560101            mov [X+1],1
 01AC 560000            mov [X+0],0
 01AF 801A              xjmp L12
 01B1           L11:
 01B1                   .dbline 114
 01B1           ;       
 01B1           ;       while ((input / d) >= base)
 01B1           ;       {
 01B1                   .dbline 115
 01B1           ;               d *= base;
 01B1 52F7              mov A,[X-9]
 01B3 08                push A
 01B4 52F8              mov A,[X-8]
 01B6 08                push A
 01B7 5200              mov A,[X+0]
 01B9 08                push A
 01BA 5201              mov A,[X+1]
 01BC 08                push A
 01BD 7C0000            xcall __mul16
 01C0 38FC              add SP,-4
 01C2 5100              mov A,[__rX]
 01C4 5401              mov [X+1],A
 01C6 5100              mov A,[__rY]
 01C8 5400              mov [X+0],A
 01CA                   .dbline 116
 01CA           ;       }
 01CA           L12:
 01CA                   .dbline 113
 01CA 5200              mov A,[X+0]
 01CC 08                push A
 01CD 5201              mov A,[X+1]
 01CF 08                push A
 01D0 52FB              mov A,[X-5]
 01D2 08                push A
 01D3 52FC              mov A,[X-4]
 01D5 08                push A
 01D6 7C0000            xcall __divmodu_16X16_16
 01D9 18                pop A
 01DA 5300              mov [__r1],A
 01DC 18                pop A
 01DD 5300              mov [__r0],A
 01DF 38FE              add SP,-2
 01E1 5100              mov A,[__r1]
 01E3 13F8              sub A,[X-8]
 01E5 5100              mov A,[__r0]
 01E7 1BF7              sbb A,[X-9]
 01E9 DFC7              jnc L11
 01EB           X1:
 01EB 80AB              xjmp L15
 01ED           L14:
 01ED                   .dbline 118
 01ED           ;       while (d != 0)
 01ED           ;       {
 01ED                   .dbline 119
 01ED           ;               int digit = input / d;
 01ED 5200              mov A,[X+0]
 01EF 08                push A
 01F0 5201              mov A,[X+1]
 01F2 08                push A
 01F3 52FB              mov A,[X-5]
 01F5 08                push A
 01F6 52FC              mov A,[X-4]
 01F8 08                push A
 01F9 7C0000            xcall __divmodu_16X16_16
 01FC 18                pop A
 01FD 5300              mov [__r1],A
 01FF 18                pop A
 0200 5300              mov [__r0],A
 0202 38FE              add SP,-2
 0204 5100              mov A,[__r1]
 0206 5405              mov [X+5],A
 0208 5100              mov A,[__r0]
 020A 5404              mov [X+4],A
 020C                   .dbline 120
 020C           ;               input %= d;
 020C 5200              mov A,[X+0]
 020E 08                push A
 020F 5201              mov A,[X+1]
 0211 08                push A
 0212 52FB              mov A,[X-5]
 0214 08                push A
 0215 52FC              mov A,[X-4]
 0217 08                push A
 0218 7C0000            xcall __divmodu_16X16_16
 021B 38FE              add SP,-2
 021D 18                pop A
 021E 54FC              mov [X-4],A
 0220 18                pop A
 0221 54FB              mov [X-5],A
 0223                   .dbline 121
 0223           ;               d /= base;
 0223 52F7              mov A,[X-9]
 0225 08                push A
 0226 52F8              mov A,[X-8]
 0228 08                push A
 0229 5200              mov A,[X+0]
 022B 08                push A
 022C 5201              mov A,[X+1]
 022E 08                push A
 022F 7C0000            xcall __divmodu_16X16_16
 0232 18                pop A
 0233 5401              mov [X+1],A
 0235 18                pop A
 0236 5400              mov [X+0],A
 0238 38FE              add SP,-2
 023A                   .dbline 122
 023A           ;               if (n || digit > 0 || d == 0)
 023A 3D0200            cmp [X+2],0
 023D B020              jnz L20
 023F 3D0300            cmp [X+3],0
 0242 B01B              jnz L20
 0244           X2:
 0244 5000              mov A,0
 0246 1305              sub A,[X+5]
 0248 5204              mov A,[X+4]
 024A 3180              xor A,-128
 024C 5300              mov [__rX],A
 024E 5080              mov A,(0 ^ 0x80)
 0250 1A00              sbb A,[__rX]
 0252 C00B              jc L20
 0254           X3:
 0254 3D0000            cmp [X+0],0
 0257 B03F              jnz L17
 0259 3D0100            cmp [X+1],0
 025C B03A              jnz L17
 025E           X4:
 025E           L20:
 025E                   .dbline 124
 025E           ;               {
 025E           ;                       *str++ = digit + ((digit < 10)? '0': 'a' - 10);
 025E                   .dbline 124
 025E 52FA              mov A,[X-6]
 0260 5300              mov [__r1],A
 0262 52F9              mov A,[X-7]
 0264 5300              mov [__r0],A
 0266 5100              mov A,[__r1]
 0268 0101              add A,1
 026A 54FA              mov [X-6],A
 026C 5100              mov A,[__r0]
 026E 0900              adc A,0
 0270 54F9              mov [X-7],A
 0272 5205              mov A,[X+5]
 0274 110A              sub A,10
 0276 5204              mov A,[X+4]
 0278 3180              xor A,-128
 027A 1980              sbb A,(0 ^ 0x80)
 027C D009              jnc L22
 027E           X5:
 027E 560730            mov [X+7],48
 0281 560600            mov [X+6],0
 0284 8007              xjmp L23
 0286           L22:
 0286 560757            mov [X+7],87
 0289 560600            mov [X+6],0
 028C           L23:
 028C 5205              mov A,[X+5]
 028E 0307              add A,[X+7]
 0290 3F00              mvi [__r1],A
 0292                   .dbline 125
 0292           ;                       n++;
 0292 7703              inc [X+3]
 0294 0F0200            adc [X+2],0
 0297                   .dbline 126
 0297           ;               }
 0297           L17:
 0297                   .dbline 127
 0297           ;       }
 0297           L15:
 0297                   .dbline 117
 0297 3D0000            cmp [X+0],0
 029A BF52              jnz L14
 029C 3D0100            cmp [X+1],0
 029F BF4D              jnz L14
 02A1           X6:
 02A1                   .dbline 128
 02A1           ;       *str = '\0';
 02A1 52FA              mov A,[X-6]
 02A3 5300              mov [__r1],A
 02A5 5000              mov A,0
 02A7 3F00              mvi [__r1],A
 02A9                   .dbline -2
 02A9           L10:
 02A9 38F8              add SP,-8
 02AB 20                pop X
 02AC                   .dbline 0 ; func end
 02AC 7F                ret
 02AD                   .dbsym l digit 4 I
 02AD                   .dbsym l n 2 I
 02AD                   .dbsym l d 0 i
 02AD                   .dbsym l base -9 I
 02AD                   .dbsym l str -7 pc
 02AD                   .dbsym l input -5 s
 02AD                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0000           L25:
 0000                   .blkb 17
                        .area text(rom, con, rel)
 02AD                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 02AD                   .dbfunc e LCD_line_print _LCD_line_print fV
 02AD                   .dbsym s buffer L25 A[17:17]c
 02AD           ;           line -> X-6
 02AD           ;            str -> X-5
 02AD           _LCD_line_print::
 02AD                   .dbline -1
 02AD 10                push X
 02AE 4F                mov X,SP
 02AF                   .dbline 132
 02AF           ; }
 02AF           ; 
 02AF           ; void LCD_line_print(char *str, unsigned char line)
 02AF           ; {
 02AF                   .dbline 134
 02AF           ;       static char buffer[17];
 02AF           ;       memset(buffer, ' ', 16);
 02AF 5000              mov A,0
 02B1 08                push A
 02B2 5010              mov A,16
 02B4 08                push A
 02B5 5000              mov A,0
 02B7 08                push A
 02B8 5020              mov A,32
 02BA 08                push A
 02BB 5000              mov A,>L25
 02BD 08                push A
 02BE 5000              mov A,<L25
 02C0 08                push A
 02C1 7C0000            xcall _memset
 02C4 38FA              add SP,-6
 02C6                   .dbline 135
 02C6           ;       memcpy(buffer, str, strlen(str));
 02C6 52FB              mov A,[X-5]
 02C8 08                push A
 02C9 52FC              mov A,[X-4]
 02CB 08                push A
 02CC 7C0000            xcall _strlen
 02CF 5100              mov A,[__r0]
 02D1 08                push A
 02D2 5100              mov A,[__r1]
 02D4 08                push A
 02D5 52FB              mov A,[X-5]
 02D7 08                push A
 02D8 52FC              mov A,[X-4]
 02DA 08                push A
 02DB 5000              mov A,>L25
 02DD 08                push A
 02DE 5000              mov A,<L25
 02E0 08                push A
 02E1 7C0000            xcall _memcpy
 02E4 38F8              add SP,-8
 02E6                   .dbline 136
 02E6           ;       buffer[17] = '\0';
 02E6 551100            mov [L25+17],0
 02E9                   .dbline 137
 02E9           ;       LCD_1_Position(line, 0);
 02E9 10                push X
 02EA 5000              mov A,0
 02EC 08                push A
 02ED 52FA              mov A,[X-6]
 02EF 20                pop X
 02F0 7C0000            xcall _LCD_1_Position
 02F3                   .dbline 138
 02F3           ;       LCD_1_PrString(buffer);
 02F3 5000              mov A,>L25
 02F5 08                push A
 02F6 5000              mov A,<L25
 02F8 5C                mov X,A
 02F9 18                pop A
 02FA 7C0000            xcall _LCD_1_PrString
 02FD 20                pop X
 02FE                   .dbline -2
 02FE           L24:
 02FE 20                pop X
 02FF                   .dbline 0 ; func end
 02FF 7F                ret
 0300                   .dbsym l line -6 c
 0300                   .dbsym l str -5 pc
 0300                   .dbend
                        .area lit(rom, con, rel, lit)
 0100           L8:
 0100 20526174653A00    .byte 32,'R,'a,'t,'e,58,0
 0107           L7:
 0107 4761696E3A00      .byte 'G,'a,'i,'n,58,0
 010D           L6:
 010D 50686173653A00    .byte 'P,'h,'a,'s,'e,58,0
 0114           L2:
 0114 4C61623744205465737400    .byte 'L,'a,'b,55,'D,32,'T,'e,'s,'t,0
