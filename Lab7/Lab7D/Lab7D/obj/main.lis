                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area lit(rom, con, rel, lit)
 0000           _SineTable::
 0000 8081              .byte 128,129
 0002 8282              .byte 130,130
 0004 8384              .byte 131,132
 0006 8585              .byte 133,133
 0008 8687              .byte 134,135
 000A 8888              .byte 136,136
 000C 898A              .byte 137,138
 000E 8A8B              .byte 138,139
 0010 8C8D              .byte 140,141
 0012 8D8E              .byte 141,142
 0014 8F8F              .byte 143,143
 0016 9091              .byte 144,145
 0018 9192              .byte 145,146
 001A 9293              .byte 146,147
 001C 9494              .byte 148,148
 001E 9595              .byte 149,149
 0020 9696              .byte 150,150
 0022 9797              .byte 151,151
 0024 9898              .byte 152,152
 0026 9999              .byte 153,153
 0028 9A9A              .byte 154,154
 002A 9B9B              .byte 155,155
 002C 9B9C              .byte 155,156
 002E 9C9C              .byte 156,156
 0030 9D9D              .byte 157,157
 0032 9D9D              .byte 157,157
 0034 9E9E              .byte 158,158
 0036 9E9E              .byte 158,158
 0038 9E9F              .byte 158,159
 003A 9F9F              .byte 159,159
 003C 9F9F              .byte 159,159
 003E 9F9F              .byte 159,159
 0040 9F9F              .byte 159,159
 0042 9F9F              .byte 159,159
 0044 9F9F              .byte 159,159
 0046 9F9F              .byte 159,159
 0048 9E9E              .byte 158,158
 004A 9E9E              .byte 158,158
 004C 9E9D              .byte 158,157
 004E 9D9D              .byte 157,157
 0050 9D9C              .byte 157,156
 0052 9C9C              .byte 156,156
 0054 9B9B              .byte 155,155
 0056 9B9A              .byte 155,154
 0058 9A99              .byte 154,153
 005A 9998              .byte 153,152
 005C 9897              .byte 152,151
 005E 9796              .byte 151,150
 0060 9695              .byte 150,149
 0062 9594              .byte 149,148
 0064 9493              .byte 148,147
 0066 9292              .byte 146,146
 0068 9191              .byte 145,145
 006A 908F              .byte 144,143
 006C 8F8E              .byte 143,142
 006E 8D8D              .byte 141,141
 0070 8C8B              .byte 140,139
 0072 8A8A              .byte 138,138
 0074 8988              .byte 137,136
 0076 8887              .byte 136,135
 0078 8685              .byte 134,133
 007A 8584              .byte 133,132
 007C 8382              .byte 131,130
 007E 8281              .byte 130,129
 0080 80A1              .byte 128,161
 0082 A2A2              .byte 162,162
 0084 A3A4              .byte 163,164
 0086 A5A5              .byte 165,165
 0088 A6A7              .byte 166,167
 008A A8A8              .byte 168,168
 008C A9AA              .byte 169,170
 008E AAAB              .byte 170,171
 0090 ACAD              .byte 172,173
 0092 ADAE              .byte 173,174
 0094 AFAF              .byte 175,175
 0096 B0B1              .byte 176,177
 0098 B1B2              .byte 177,178
 009A B2B3              .byte 178,179
 009C B4B4              .byte 180,180
 009E B5B5              .byte 181,181
 00A0 B6B6              .byte 182,182
 00A2 B7B7              .byte 183,183
 00A4 B8B8              .byte 184,184
 00A6 B9B9              .byte 185,185
 00A8 BABA              .byte 186,186
 00AA BBBB              .byte 187,187
 00AC BBBC              .byte 187,188
 00AE BCBC              .byte 188,188
 00B0 BDBD              .byte 189,189
 00B2 BDBD              .byte 189,189
 00B4 BEBE              .byte 190,190
 00B6 BEBE              .byte 190,190
 00B8 BEBF              .byte 190,191
 00BA BFBF              .byte 191,191
 00BC BFBF              .byte 191,191
 00BE BFBF              .byte 191,191
 00C0 BFBF              .byte 191,191
 00C2 BFBF              .byte 191,191
 00C4 BFBF              .byte 191,191
 00C6 BFBF              .byte 191,191
 00C8 BEBE              .byte 190,190
 00CA BEBE              .byte 190,190
 00CC BEBD              .byte 190,189
 00CE BDBD              .byte 189,189
 00D0 BDBC              .byte 189,188
 00D2 BCBC              .byte 188,188
 00D4 BBBB              .byte 187,187
 00D6 BBBA              .byte 187,186
 00D8 BAB9              .byte 186,185
 00DA B9B8              .byte 185,184
 00DC B8B7              .byte 184,183
 00DE B7B6              .byte 183,182
 00E0 B6B5              .byte 182,181
 00E2 B5B4              .byte 181,180
 00E4 B4B3              .byte 180,179
 00E6 B2B2              .byte 178,178
 00E8 B1B1              .byte 177,177
 00EA B0AF              .byte 176,175
 00EC AFAE              .byte 175,174
 00EE ADAD              .byte 173,173
 00F0 ACAB              .byte 172,171
 00F2 AAAA              .byte 170,170
 00F4 A9A8              .byte 169,168
 00F6 A8A7              .byte 168,167
 00F8 A6A5              .byte 166,165
 00FA A5A4              .byte 165,164
 00FC A3A2              .byte 163,162
 00FE A2A1              .byte 162,161
 0100                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0100                   .dbsym e SineTable _SineTable A[256:256]kc
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0000           _Phase::
 0000                   .blkb 1
                        .area idata(rom,lit)
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0001                   .dbsym e Phase _Phase c
 0001           _PhaseRate::
 0001                   .blkb 1
                        .area idata(rom,lit)
 0001 01                .byte 1
                        .area data(ram, con, rel)
 0002                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0002                   .dbsym e PhaseRate _PhaseRate c
 0002           _Gain::
 0002                   .blkb 1
                        .area idata(rom,lit)
 0002 30                .byte 48
                        .area data(ram, con, rel)
 0003                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0003                   .dbsym e Gain _Gain c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0000                   .dbfunc e main _main fV
 0000           ;         line_2 -> X+19
 0000           ;         line_1 -> X+2
 0000           ;            ptr -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3824              add SP,36
 0004                   .dbline 43
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include <string.h>
 0004           ; 
 0004           ; void itoa(unsigned short input, char *str, int base);
 0004           ; void LCD_line_print(char *str, unsigned char line);
 0004           ; 
 0004           ; // const keyword will let the string stored in Flash.
 0004           ; // So it does not take SRAM.
 0004           ; const unsigned char SineTable[256] = {
 0004           ;     128, 129, 130, 130, 131, 132, 133, 133, 134, 135, 136, 136, 137, 138, 138, 139,
 0004           ;     140, 141, 141, 142, 143, 143, 144, 145, 145, 146, 146, 147, 148, 148, 149, 149,
 0004           ;     150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 155, 156, 156, 156,
 0004           ;     157, 157, 157, 157, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 159,
 0004           ;     159, 159, 159, 159, 159, 159, 159, 159, 158, 158, 158, 158, 158, 157, 157, 157,
 0004           ;     157, 156, 156, 156, 155, 155, 155, 154, 154, 153, 153, 152, 152, 151, 151, 150,
 0004           ;     150, 149, 149, 148, 148, 147, 146, 146, 145, 145, 144, 143, 143, 142, 141, 141,
 0004           ;     140, 139, 138, 138, 137, 136, 136, 135, 134, 133, 133, 132, 131, 130, 130, 129,
 0004           ;     128, 161, 162, 162, 163, 164, 165, 165, 166, 167, 168, 168, 169, 170, 170, 171,
 0004           ;     172, 173, 173, 174, 175, 175, 176, 177, 177, 178, 178, 179, 180, 180, 181, 181,
 0004           ;     182, 182, 183, 183, 184, 184, 185, 185, 186, 186, 187, 187, 187, 188, 188, 188,
 0004           ;     189, 189, 189, 189, 190, 190, 190, 190, 190, 191, 191, 191, 191, 191, 191, 191,
 0004           ;     191, 191, 191, 191, 191, 191, 191, 191, 190, 190, 190, 190, 190, 189, 189, 189,
 0004           ;     189, 188, 188, 188, 187, 187, 187, 186, 186, 185, 185, 184, 184, 183, 183, 182,
 0004           ;     182, 181, 181, 180, 180, 179, 178, 178, 177, 177, 176, 175, 175, 174, 173, 173,
 0004           ;     172, 171, 170, 170, 169, 168, 168, 167, 166, 165, 165, 164, 163, 162, 162, 161
 0004           ; };
 0004           ; 
 0004           ; // sineTable index variable 
 0004           ; unsigned char Phase = 0; 
 0004           ; // sineTable step size – this is the variable you change  
 0004           ; // to get different output frequencies 
 0004           ; unsigned char PhaseRate = 1; 
 0004           ; // gain variable – this you change to experiment with different gains 
 0004           ; // note that the gain is set to some predefined values 
 0004           ; unsigned char Gain = 0x30; // should make gain = -1 
 0004           ; 
 0004           ; // main 
 0004           ; void main (void){
 0004                   .dbline 49
 0004           ;       char line_1[17];
 0004           ;       char line_2[17];
 0004           ;       char *ptr;
 0004           ; 
 0004           ;       // Start LCD
 0004           ;       LCD_1_Start();
 0004 10                push X
 0005 7C0000            xcall _LCD_1_Start
 0008 20                pop X
 0009                   .dbline 50
 0009           ;       cstrcpy(line_1, "Lab7D Test");
 0009 5014              mov A,>L2
 000B 08                push A
 000C 5014              mov A,<L2
 000E 08                push A
 000F 5A00              mov [__r1],X
 0011 060002            add [__r1],2
 0014 5100              mov A,[__r0]
 0016 08                push A
 0017 5100              mov A,[__r1]
 0019 08                push A
 001A 7C0000            xcall _cstrcpy
 001D                   .dbline 51
 001D           ;       LCD_line_print(line_1, 0);
 001D 5000              mov A,0
 001F 08                push A
 0020 5A00              mov [__r1],X
 0022 060002            add [__r1],2
 0025 5100              mov A,[__r0]
 0027 08                push A
 0028 5100              mov A,[__r1]
 002A 08                push A
 002B 927A              xcall _LCD_line_print
 002D 38F9              add SP,-7
 002F                   .dbline 55
 002F           ;       
 002F           ;     // add code to start the analog modules SCDAC and SCGain
 002F           ;     // if required (look at module datasheet) 
 002F           ;       SCDAC_Start(SCDAC_LOWPOWER);
 002F 10                push X
 0030 5001              mov A,1
 0032 7C0000            xcall _SCDAC_Start
 0035                   .dbline 56
 0035           ;       SCGain_Start(SCGain_LOWPOWER);
 0035 5001              mov A,1
 0037 7C0000            xcall _SCGain_Start
 003A 20                pop X
 003B                   .dbline 59
 003B           ;     
 003B           ;     // add code to enable VC3 interrupt and global interrupts
 003B           ;       M8C_EnableIntMask(INT_MSK0, INT_MSK0_VC3);
 003B 43E080            or REG[0xe0],-128
 003E                   .dbline 60
 003E           ;       M8C_EnableGInt; //enable global interrupt
 003E 7101                      or  F, 01h
 0040           
 0040                   .dbline 63
 0040           ; 
 0040           ;     // write gain value
 0040           ;     SCGain_cr0 = Gain; 
 0040 5102              mov A,[_Gain]
 0042 6090              mov REG[0x90],A
 0044 811C              xjmp L4
 0046           L3:
 0046                   .dbline 65
 0046           ;       
 0046           ;     while (1) {               
 0046                   .dbline 67
 0046           ;               // put Phase value
 0046           ;               ptr = line_1;
 0046 5A00              mov [__r0],X
 0048 060002            add [__r0],2
 004B 5100              mov A,[__r0]
 004D 5401              mov [X+1],A
 004F                   .dbline 68
 004F           ;               cstrcpy(ptr, "Phase:");
 004F 500D              mov A,>L6
 0051 08                push A
 0052 500D              mov A,<L6
 0054 08                push A
 0055 5200              mov A,[X+0]
 0057 08                push A
 0058 5201              mov A,[X+1]
 005A 08                push A
 005B 7C0000            xcall _cstrcpy
 005E 38FC              add SP,-4
 0060                   .dbline 69
 0060           ;               ptr += strlen(ptr);
 0060 5200              mov A,[X+0]
 0062 08                push A
 0063 5201              mov A,[X+1]
 0065 08                push A
 0066 7C0000            xcall _strlen
 0069 5100              mov A,[__r1]
 006B 0301              add A,[X+1]
 006D 5401              mov [X+1],A
 006F 5100              mov A,[__r0]
 0071 0B00              adc A,[X+0]
 0073 5400              mov [X+0],A
 0075                   .dbline 70
 0075           ;               itoa(Phase, ptr, 10);
 0075 5000              mov A,0
 0077 08                push A
 0078 500A              mov A,10
 007A 08                push A
 007B 5200              mov A,[X+0]
 007D 08                push A
 007E 5201              mov A,[X+1]
 0080 08                push A
 0081 5F0000            mov [__r1],[_Phase]
 0084 5000              mov A,0
 0086 08                push A
 0087 5100              mov A,[__r1]
 0089 08                push A
 008A 910D              xcall _itoa
 008C 38F8              add SP,-8
 008E                   .dbline 71
 008E           ;               LCD_line_print(line_1, 0);
 008E 5000              mov A,0
 0090 08                push A
 0091 5A00              mov [__r1],X
 0093 060002            add [__r1],2
 0096 5100              mov A,[__r0]
 0098 08                push A
 0099 5100              mov A,[__r1]
 009B 08                push A
 009C 9209              xcall _LCD_line_print
 009E                   .dbline 73
 009E           ;               //put gain and rate
 009E           ;               ptr = line_2;
 009E 5A00              mov [__r0],X
 00A0 060013            add [__r0],19
 00A3 5100              mov A,[__r0]
 00A5 5401              mov [X+1],A
 00A7                   .dbline 74
 00A7           ;               cstrcpy(ptr, "Gain:");
 00A7 5007              mov A,>L7
 00A9 08                push A
 00AA 5007              mov A,<L7
 00AC 08                push A
 00AD 5200              mov A,[X+0]
 00AF 08                push A
 00B0 5201              mov A,[X+1]
 00B2 08                push A
 00B3 7C0000            xcall _cstrcpy
 00B6 38F9              add SP,-7
 00B8                   .dbline 75
 00B8           ;               ptr += strlen(ptr);
 00B8 5200              mov A,[X+0]
 00BA 08                push A
 00BB 5201              mov A,[X+1]
 00BD 08                push A
 00BE 7C0000            xcall _strlen
 00C1 5100              mov A,[__r1]
 00C3 0301              add A,[X+1]
 00C5 5401              mov [X+1],A
 00C7 5100              mov A,[__r0]
 00C9 0B00              adc A,[X+0]
 00CB 5400              mov [X+0],A
 00CD                   .dbline 76
 00CD           ;               itoa(Gain, ptr, 10);
 00CD 5000              mov A,0
 00CF 08                push A
 00D0 500A              mov A,10
 00D2 08                push A
 00D3 5200              mov A,[X+0]
 00D5 08                push A
 00D6 5201              mov A,[X+1]
 00D8 08                push A
 00D9 5F0002            mov [__r1],[_Gain]
 00DC 5000              mov A,0
 00DE 08                push A
 00DF 5100              mov A,[__r1]
 00E1 08                push A
 00E2 90B5              xcall _itoa
 00E4 38F8              add SP,-8
 00E6                   .dbline 77
 00E6           ;               ptr += strlen(ptr);
 00E6 5200              mov A,[X+0]
 00E8 08                push A
 00E9 5201              mov A,[X+1]
 00EB 08                push A
 00EC 7C0000            xcall _strlen
 00EF 5100              mov A,[__r1]
 00F1 0301              add A,[X+1]
 00F3 5401              mov [X+1],A
 00F5 5100              mov A,[__r0]
 00F7 0B00              adc A,[X+0]
 00F9 5400              mov [X+0],A
 00FB                   .dbline 79
 00FB           ;               
 00FB           ;               cstrcpy(ptr, " Rate:");
 00FB 5000              mov A,>L8
 00FD 08                push A
 00FE 5000              mov A,<L8
 0100 08                push A
 0101 5200              mov A,[X+0]
 0103 08                push A
 0104 5201              mov A,[X+1]
 0106 08                push A
 0107 7C0000            xcall _cstrcpy
 010A 38FA              add SP,-6
 010C                   .dbline 80
 010C           ;               ptr += strlen(ptr);
 010C 5200              mov A,[X+0]
 010E 08                push A
 010F 5201              mov A,[X+1]
 0111 08                push A
 0112 7C0000            xcall _strlen
 0115 5100              mov A,[__r1]
 0117 0301              add A,[X+1]
 0119 5401              mov [X+1],A
 011B 5100              mov A,[__r0]
 011D 0B00              adc A,[X+0]
 011F 5400              mov [X+0],A
 0121                   .dbline 81
 0121           ;               itoa(PhaseRate, ptr, 10);
 0121 5000              mov A,0
 0123 08                push A
 0124 500A              mov A,10
 0126 08                push A
 0127 5200              mov A,[X+0]
 0129 08                push A
 012A 5201              mov A,[X+1]
 012C 08                push A
 012D 5F0001            mov [__r1],[_PhaseRate]
 0130 5000              mov A,0
 0132 08                push A
 0133 5100              mov A,[__r1]
 0135 08                push A
 0136 9061              xcall _itoa
 0138 38F8              add SP,-8
 013A                   .dbline 82
 013A           ;               ptr += strlen(ptr);
 013A 5200              mov A,[X+0]
 013C 08                push A
 013D 5201              mov A,[X+1]
 013F 08                push A
 0140 7C0000            xcall _strlen
 0143 5100              mov A,[__r1]
 0145 0301              add A,[X+1]
 0147 5401              mov [X+1],A
 0149 5100              mov A,[__r0]
 014B 0B00              adc A,[X+0]
 014D 5400              mov [X+0],A
 014F                   .dbline 83
 014F           ;               LCD_line_print(line_2, 1);
 014F 5001              mov A,1
 0151 08                push A
 0152 5A00              mov [__r1],X
 0154 060013            add [__r1],19
 0157 5100              mov A,[__r0]
 0159 08                push A
 015A 5100              mov A,[__r1]
 015C 08                push A
 015D 9148              xcall _LCD_line_print
 015F 38FB              add SP,-5
 0161                   .dbline 84
 0161           ;     }
 0161           L4:
 0161                   .dbline 65
 0161 8EE4              xjmp L3
 0163           X0:
 0163                   .dbline -2
 0163           L1:
 0163 38DC              add SP,-36
 0165 20                pop X
 0166                   .dbline 0 ; func end
 0166 8FFF              jmp .
 0168                   .dbsym l line_2 19 A[17:17]c
 0168                   .dbsym l line_1 2 A[17:17]c
 0168                   .dbsym l ptr 0 pc
 0168                   .dbend
 0168                   .dbfunc e VC3_Interrupt _VC3_Interrupt fV
 0168           _VC3_Interrupt::
 0168                   .dbline -1
 0168 08                push A
 0169 5100              mov A,[__r0]
 016B 08                push A
 016C 5100              mov A,[__r1]
 016E 08                push A
 016F                   .dbline 88
 016F           ; } // end main 
 016F           ; 
 016F           ; #pragma interrupt_handler VC3_Interrupt // use SleepTimerISR as ISR
 016F           ; void VC3_Interrupt(void) { 
 016F                   .dbline 90
 016F           ;     // change SCDAC_cr0 to next value in table 
 016F           ;     M8C_Stall; // required to avoid glitch 
 016F 436501            or REG[0x65],1
 0172                   .dbline 91
 0172           ;     SCDAC_cr0 = SineTable[Phase]; 
 0172 5F0000            mov [__r1],[_Phase]
 0175 550000            mov [__r0],0
 0178 060000            add [__r1],<_SineTable
 017B 0E0000            adc [__r0],>_SineTable
 017E 5100              mov A,[__r0]
 0180 10                push X
 0181 5800              mov X,[__r1]
 0183 28                romx
 0184 20                pop X
 0185 6080              mov REG[0x80],A
 0187                   .dbline 92
 0187           ;     M8C_Unstall; 
 0187 4165FE            and REG[0x65],-2
 018A                   .dbline 95
 018A           ;       
 018A           ;     // adjust SineTable index based on step used 
 018A           ;     Phase = (Phase + PhaseRate); // use modulo 256 since the table index 
 018A 5101              mov A,[_PhaseRate]
 018C 0400              add [_Phase],A
 018E                   .dbline 98
 018E           ;     // should go only from 0 to 25, but phase is defined as int 
 018E           ;     
 018E           ;     M8C_ClearIntFlag(INT_CLR0, INT_MSK0_VC3); // needed to avoid nested 
 018E 62DA7F            mov REG[0xda],127
 0191                   .dbline -2
 0191           L9:
 0191 18                pop A
 0192 5300              mov [__r1],A
 0194 18                pop A
 0195 5300              mov [__r0],A
 0197 18                pop A
 0198                   .dbline 0 ; func end
 0198 7E                reti
 0199                   .dbend
 0199                   .dbfunc e itoa _itoa fV
 0199           ;          digit -> X+4
 0199           ;              n -> X+2
 0199           ;              d -> X+0
 0199           ;           base -> X-9
 0199           ;            str -> X-7
 0199           ;          input -> X-5
 0199           _itoa::
 0199                   .dbline -1
 0199 10                push X
 019A 4F                mov X,SP
 019B 3808              add SP,8
 019D                   .dbline 105
 019D           ;       // interrupts since stall/unstall are used and this can take  
 019D           ;     // quite some time. 
 019D           ; }// end VC3 interrupt 
 019D           ; 
 019D           ; 
 019D           ; void itoa(unsigned short input, char *str, int base)
 019D           ; {
 019D                   .dbline 106
 019D           ;       int n = 0;
 019D 560300            mov [X+3],0
 01A0 560200            mov [X+2],0
 01A3                   .dbline 107
 01A3           ;       unsigned int d = 1;
 01A3 560101            mov [X+1],1
 01A6 560000            mov [X+0],0
 01A9 801A              xjmp L12
 01AB           L11:
 01AB                   .dbline 110
 01AB           ;       
 01AB           ;       while ((input / d) >= base)
 01AB           ;       {
 01AB                   .dbline 111
 01AB           ;               d *= base;
 01AB 52F7              mov A,[X-9]
 01AD 08                push A
 01AE 52F8              mov A,[X-8]
 01B0 08                push A
 01B1 5200              mov A,[X+0]
 01B3 08                push A
 01B4 5201              mov A,[X+1]
 01B6 08                push A
 01B7 7C0000            xcall __mul16
 01BA 38FC              add SP,-4
 01BC 5100              mov A,[__rX]
 01BE 5401              mov [X+1],A
 01C0 5100              mov A,[__rY]
 01C2 5400              mov [X+0],A
 01C4                   .dbline 112
 01C4           ;       }
 01C4           L12:
 01C4                   .dbline 109
 01C4 5200              mov A,[X+0]
 01C6 08                push A
 01C7 5201              mov A,[X+1]
 01C9 08                push A
 01CA 52FB              mov A,[X-5]
 01CC 08                push A
 01CD 52FC              mov A,[X-4]
 01CF 08                push A
 01D0 7C0000            xcall __divmodu_16X16_16
 01D3 18                pop A
 01D4 5300              mov [__r1],A
 01D6 18                pop A
 01D7 5300              mov [__r0],A
 01D9 38FE              add SP,-2
 01DB 5100              mov A,[__r1]
 01DD 13F8              sub A,[X-8]
 01DF 5100              mov A,[__r0]
 01E1 1BF7              sbb A,[X-9]
 01E3 DFC7              jnc L11
 01E5           X1:
 01E5 80AB              xjmp L15
 01E7           L14:
 01E7                   .dbline 114
 01E7           ;       while (d != 0)
 01E7           ;       {
 01E7                   .dbline 115
 01E7           ;               int digit = input / d;
 01E7 5200              mov A,[X+0]
 01E9 08                push A
 01EA 5201              mov A,[X+1]
 01EC 08                push A
 01ED 52FB              mov A,[X-5]
 01EF 08                push A
 01F0 52FC              mov A,[X-4]
 01F2 08                push A
 01F3 7C0000            xcall __divmodu_16X16_16
 01F6 18                pop A
 01F7 5300              mov [__r1],A
 01F9 18                pop A
 01FA 5300              mov [__r0],A
 01FC 38FE              add SP,-2
 01FE 5100              mov A,[__r1]
 0200 5405              mov [X+5],A
 0202 5100              mov A,[__r0]
 0204 5404              mov [X+4],A
 0206                   .dbline 116
 0206           ;               input %= d;
 0206 5200              mov A,[X+0]
 0208 08                push A
 0209 5201              mov A,[X+1]
 020B 08                push A
 020C 52FB              mov A,[X-5]
 020E 08                push A
 020F 52FC              mov A,[X-4]
 0211 08                push A
 0212 7C0000            xcall __divmodu_16X16_16
 0215 38FE              add SP,-2
 0217 18                pop A
 0218 54FC              mov [X-4],A
 021A 18                pop A
 021B 54FB              mov [X-5],A
 021D                   .dbline 117
 021D           ;               d /= base;
 021D 52F7              mov A,[X-9]
 021F 08                push A
 0220 52F8              mov A,[X-8]
 0222 08                push A
 0223 5200              mov A,[X+0]
 0225 08                push A
 0226 5201              mov A,[X+1]
 0228 08                push A
 0229 7C0000            xcall __divmodu_16X16_16
 022C 18                pop A
 022D 5401              mov [X+1],A
 022F 18                pop A
 0230 5400              mov [X+0],A
 0232 38FE              add SP,-2
 0234                   .dbline 118
 0234           ;               if (n || digit > 0 || d == 0)
 0234 3D0200            cmp [X+2],0
 0237 B020              jnz L20
 0239 3D0300            cmp [X+3],0
 023C B01B              jnz L20
 023E           X2:
 023E 5000              mov A,0
 0240 1305              sub A,[X+5]
 0242 5204              mov A,[X+4]
 0244 3180              xor A,-128
 0246 5300              mov [__rX],A
 0248 5080              mov A,(0 ^ 0x80)
 024A 1A00              sbb A,[__rX]
 024C C00B              jc L20
 024E           X3:
 024E 3D0000            cmp [X+0],0
 0251 B03F              jnz L17
 0253 3D0100            cmp [X+1],0
 0256 B03A              jnz L17
 0258           X4:
 0258           L20:
 0258                   .dbline 120
 0258           ;               {
 0258           ;                       *str++ = digit + ((digit < 10)? '0': 'a' - 10);
 0258                   .dbline 120
 0258 52FA              mov A,[X-6]
 025A 5300              mov [__r1],A
 025C 52F9              mov A,[X-7]
 025E 5300              mov [__r0],A
 0260 5100              mov A,[__r1]
 0262 0101              add A,1
 0264 54FA              mov [X-6],A
 0266 5100              mov A,[__r0]
 0268 0900              adc A,0
 026A 54F9              mov [X-7],A
 026C 5205              mov A,[X+5]
 026E 110A              sub A,10
 0270 5204              mov A,[X+4]
 0272 3180              xor A,-128
 0274 1980              sbb A,(0 ^ 0x80)
 0276 D009              jnc L22
 0278           X5:
 0278 560730            mov [X+7],48
 027B 560600            mov [X+6],0
 027E 8007              xjmp L23
 0280           L22:
 0280 560757            mov [X+7],87
 0283 560600            mov [X+6],0
 0286           L23:
 0286 5205              mov A,[X+5]
 0288 0307              add A,[X+7]
 028A 3F00              mvi [__r1],A
 028C                   .dbline 121
 028C           ;                       n++;
 028C 7703              inc [X+3]
 028E 0F0200            adc [X+2],0
 0291                   .dbline 122
 0291           ;               }
 0291           L17:
 0291                   .dbline 123
 0291           ;       }
 0291           L15:
 0291                   .dbline 113
 0291 3D0000            cmp [X+0],0
 0294 BF52              jnz L14
 0296 3D0100            cmp [X+1],0
 0299 BF4D              jnz L14
 029B           X6:
 029B                   .dbline 124
 029B           ;       *str = '\0';
 029B 52FA              mov A,[X-6]
 029D 5300              mov [__r1],A
 029F 5000              mov A,0
 02A1 3F00              mvi [__r1],A
 02A3                   .dbline -2
 02A3           L10:
 02A3 38F8              add SP,-8
 02A5 20                pop X
 02A6                   .dbline 0 ; func end
 02A6 7F                ret
 02A7                   .dbsym l digit 4 I
 02A7                   .dbsym l n 2 I
 02A7                   .dbsym l d 0 i
 02A7                   .dbsym l base -9 I
 02A7                   .dbsym l str -7 pc
 02A7                   .dbsym l input -5 s
 02A7                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 0000           L25:
 0000                   .blkb 17
                        .area text(rom, con, rel)
 02A7                   .dbfile C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab7\Lab7D\Lab7D\main.c
 02A7                   .dbfunc e LCD_line_print _LCD_line_print fV
 02A7                   .dbsym s buffer L25 A[17:17]c
 02A7           ;           line -> X-6
 02A7           ;            str -> X-5
 02A7           _LCD_line_print::
 02A7                   .dbline -1
 02A7 10                push X
 02A8 4F                mov X,SP
 02A9                   .dbline 128
 02A9           ; }
 02A9           ; 
 02A9           ; void LCD_line_print(char *str, unsigned char line)
 02A9           ; {
 02A9                   .dbline 130
 02A9           ;       static char buffer[17];
 02A9           ;       memset(buffer, ' ', 16);
 02A9 5000              mov A,0
 02AB 08                push A
 02AC 5010              mov A,16
 02AE 08                push A
 02AF 5000              mov A,0
 02B1 08                push A
 02B2 5020              mov A,32
 02B4 08                push A
 02B5 5000              mov A,>L25
 02B7 08                push A
 02B8 5000              mov A,<L25
 02BA 08                push A
 02BB 7C0000            xcall _memset
 02BE 38FA              add SP,-6
 02C0                   .dbline 131
 02C0           ;       memcpy(buffer, str, strlen(str));
 02C0 52FB              mov A,[X-5]
 02C2 08                push A
 02C3 52FC              mov A,[X-4]
 02C5 08                push A
 02C6 7C0000            xcall _strlen
 02C9 5100              mov A,[__r0]
 02CB 08                push A
 02CC 5100              mov A,[__r1]
 02CE 08                push A
 02CF 52FB              mov A,[X-5]
 02D1 08                push A
 02D2 52FC              mov A,[X-4]
 02D4 08                push A
 02D5 5000              mov A,>L25
 02D7 08                push A
 02D8 5000              mov A,<L25
 02DA 08                push A
 02DB 7C0000            xcall _memcpy
 02DE 38F8              add SP,-8
 02E0                   .dbline 132
 02E0           ;       buffer[17] = '\0';
 02E0 551100            mov [L25+17],0
 02E3                   .dbline 133
 02E3           ;       LCD_1_Position(line, 0);
 02E3 10                push X
 02E4 5000              mov A,0
 02E6 08                push A
 02E7 52FA              mov A,[X-6]
 02E9 20                pop X
 02EA 7C0000            xcall _LCD_1_Position
 02ED                   .dbline 134
 02ED           ;       LCD_1_PrString(buffer);
 02ED 5000              mov A,>L25
 02EF 08                push A
 02F0 5000              mov A,<L25
 02F2 5C                mov X,A
 02F3 18                pop A
 02F4 7C0000            xcall _LCD_1_PrString
 02F7 20                pop X
 02F8                   .dbline -2
 02F8           L24:
 02F8 20                pop X
 02F9                   .dbline 0 ; func end
 02F9 7F                ret
 02FA                   .dbsym l line -6 c
 02FA                   .dbsym l str -5 pc
 02FA                   .dbend
                        .area lit(rom, con, rel, lit)
 0100           L8:
 0100 20526174653A00    .byte 32,'R,'a,'t,'e,58,0
 0107           L7:
 0107 4761696E3A00      .byte 'G,'a,'i,'n,58,0
 010D           L6:
 010D 50686173653A00    .byte 'P,'h,'a,'s,'e,58,0
 0114           L2:
 0114 4C61623744205465737400    .byte 'L,'a,'b,55,'D,32,'T,'e,'s,'t,0
