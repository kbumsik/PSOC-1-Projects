FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 02 CD LJMP  _PWM8_1_ISR        (0149)     ljmp	_PWM8_1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 01    MOV   A,0x1              (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 0A MOV   REG[0xE0],0xA      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 6F LCALL 0x026F             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 00 01 MOV   [__r0],0x1         (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 00 01 CMP   [__r0],0x1         (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 00    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 AA    MOV   X,0xAA             (0368)     mov  X,<__idata_start
00AC: 55 00 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 00 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 00    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 0A MOV   REG[0xE0],0xA      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 03 10 LCALL __UserModules_end|__text_start|_main|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
01AA: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_lab3a_Bank1
                                        (0019) export LoadConfigTBL_lab3a_Bank0
                                        (0020) export LoadConfigTBL_lab3a_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_lab3a_Bank0:
                                        (0023) ;  Instance name LCD_1, User Module LCD
                                        (0024) ;  Instance name PWM8_1, User Module PWM8
                                        (0025) ;       Instance name PWM8_1, Block Name PWM8(DBB00)
                                        (0026) 	db		23h, 00h		;PWM8_1_CONTROL_REG(DBB00CR0)
                                        (0027) 	db		21h, ffh		;PWM8_1_PERIOD_REG(DBB00DR1)
                                        (0028) 	db		22h, 40h		;PWM8_1_COMPARE_REG(DBB00DR2)
                                        (0029) ;  Global Register values Bank 0
                                        (0030) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0031) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0032) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0033) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0034) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0035) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0036) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0037) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0038) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0039) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0040) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0041) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0042) 	db		b5h, 08h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0043) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0044) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0045) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0046) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0047) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0048) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0049) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0050) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0051) 	db		ffh
                                        (0052) LoadConfigTBL_lab3a_Bank1:
                                        (0053) ;  Instance name LCD_1, User Module LCD
                                        (0054) ;  Instance name PWM8_1, User Module PWM8
                                        (0055) ;       Instance name PWM8_1, Block Name PWM8(DBB00)
                                        (0056) 	db		20h, 31h		;PWM8_1_FUNC_REG(DBB00FN)
                                        (0057) 	db		21h, 14h		;PWM8_1_INPUT_REG(DBB00IN)
                                        (0058) 	db		22h, 04h		;PWM8_1_OUTPUT_REG(DBB00OU)
                                        (0059) ;  Global Register values Bank 1
                                        (0060) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0061) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0062) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0063) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0064) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0065) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0066) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0067) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0068) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0069) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0070) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0071) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0072) 	db		e1h, 0fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0073) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0074) 	db		dfh, 02h		; OscillatorControl_3 register (OSC_CR3)
                                        (0075) 	db		deh, 03h		; OscillatorControl_4 register (OSC_CR4)
                                        (0076) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0077) 	db		ffh
                                        (0078) AREA psoc_config(rom, rel)
                                        (0079) LoadConfigTBL_lab3a_Ordered:
                                        (0080) ;  Ordered Global Register values
                                        (0081) 	M8C_SetBank0
01AC: 62 00 00 MOV   REG[0x0],0x0       (0082) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01AF: 71 10    OR    F,0x10             
                                        (0083) 	M8C_SetBank1
01B1: 62 00 00 MOV   REG[0x0],0x0       (0084) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
01B4: 62 01 FF MOV   REG[0x1],0xFF      (0085) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
01B7: 70 EF    AND   F,0xEF             
                                        (0086) 	M8C_SetBank0
01B9: 62 03 FF MOV   REG[0x3],0xFF      (0087) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
01BC: 62 02 00 MOV   REG[0x2],0x0       (0088) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01BF: 71 10    OR    F,0x10             
                                        (0089) 	M8C_SetBank1
01C1: 62 02 00 MOV   REG[0x2],0x0       (0090) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01C4: 62 03 00 MOV   REG[0x3],0x0       (0091) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01C7: 70 EF    AND   F,0xEF             
                                        (0092) 	M8C_SetBank0
01C9: 62 01 00 MOV   REG[0x1],0x0       (0093) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01CC: 62 04 00 MOV   REG[0x4],0x0       (0094) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01CF: 71 10    OR    F,0x10             
                                        (0095) 	M8C_SetBank1
01D1: 62 04 10 MOV   REG[0x4],0x10      (0096) 	mov	reg[04h], 10h		; Port_1_DriveMode_0 register (PRT1DM0)
01D4: 62 05 E7 MOV   REG[0x5],0xE7      (0097) 	mov	reg[05h], e7h		; Port_1_DriveMode_1 register (PRT1DM1)
01D7: 70 EF    AND   F,0xEF             
                                        (0098) 	M8C_SetBank0
01D9: 62 07 E7 MOV   REG[0x7],0xE7      (0099) 	mov	reg[07h], e7h		; Port_1_DriveMode_2 register (PRT1DM2)
01DC: 62 06 10 MOV   REG[0x6],0x10      (0100) 	mov	reg[06h], 10h		; Port_1_GlobalSelect register (PRT1GS)
01DF: 71 10    OR    F,0x10             
                                        (0101) 	M8C_SetBank1
01E1: 62 06 00 MOV   REG[0x6],0x0       (0102) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
01E4: 62 07 00 MOV   REG[0x7],0x0       (0103) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
01E7: 70 EF    AND   F,0xEF             
                                        (0104) 	M8C_SetBank0
01E9: 62 05 00 MOV   REG[0x5],0x0       (0105) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
01EC: 62 08 00 MOV   REG[0x8],0x0       (0106) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
01EF: 71 10    OR    F,0x10             
                                        (0107) 	M8C_SetBank1
01F1: 62 08 00 MOV   REG[0x8],0x0       (0108) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
01F4: 62 09 FF MOV   REG[0x9],0xFF      (0109) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
01F7: 70 EF    AND   F,0xEF             
                                        (0110) 	M8C_SetBank0
01F9: 62 0B FF MOV   REG[0xB],0xFF      (0111) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
01FC: 62 0A 00 MOV   REG[0xA],0x0       (0112) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
01FF: 71 10    OR    F,0x10             
                                        (0113) 	M8C_SetBank1
0201: 62 0A 00 MOV   REG[0xA],0x0       (0114) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0204: 62 0B 00 MOV   REG[0xB],0x0       (0115) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0207: 70 EF    AND   F,0xEF             
                                        (0116) 	M8C_SetBank0
0209: 62 09 00 MOV   REG[0x9],0x0       (0117) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
020C: 62 0C 00 MOV   REG[0xC],0x0       (0118) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
020F: 71 10    OR    F,0x10             
                                        (0119) 	M8C_SetBank1
0211: 62 0C 00 MOV   REG[0xC],0x0       (0120) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0214: 62 0D 00 MOV   REG[0xD],0x0       (0121) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0217: 70 EF    AND   F,0xEF             
                                        (0122) 	M8C_SetBank0
0219: 62 0F 00 MOV   REG[0xF],0x0       (0123) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
021C: 62 0E 00 MOV   REG[0xE],0x0       (0124) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
021F: 71 10    OR    F,0x10             
                                        (0125) 	M8C_SetBank1
0221: 62 0E 00 MOV   REG[0xE],0x0       (0126) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0224: 62 0F 00 MOV   REG[0xF],0x0       (0127) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0227: 70 EF    AND   F,0xEF             
                                        (0128) 	M8C_SetBank0
0229: 62 0D 00 MOV   REG[0xD],0x0       (0129) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
022C: 62 10 00 MOV   REG[0x10],0x0      (0130) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
022F: 71 10    OR    F,0x10             
                                        (0131) 	M8C_SetBank1
0231: 62 10 00 MOV   REG[0x10],0x0      (0132) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0234: 62 11 00 MOV   REG[0x11],0x0      (0133) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0237: 70 EF    AND   F,0xEF             
                                        (0134) 	M8C_SetBank0
0239: 62 13 00 MOV   REG[0x13],0x0      (0135) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
023C: 62 12 00 MOV   REG[0x12],0x0      (0136) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
023F: 71 10    OR    F,0x10             
                                        (0137) 	M8C_SetBank1
0241: 62 12 00 MOV   REG[0x12],0x0      (0138) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0244: 62 13 00 MOV   REG[0x13],0x0      (0139) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0247: 70 EF    AND   F,0xEF             
                                        (0140) 	M8C_SetBank0
0249: 62 11 00 MOV   REG[0x11],0x0      (0141) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
024C: 62 14 00 MOV   REG[0x14],0x0      (0142) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
024F: 71 10    OR    F,0x10             
                                        (0143) 	M8C_SetBank1
0251: 62 14 00 MOV   REG[0x14],0x0      (0144) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0254: 62 15 00 MOV   REG[0x15],0x0      (0145) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0257: 70 EF    AND   F,0xEF             
                                        (0146) 	M8C_SetBank0
0259: 62 17 00 MOV   REG[0x17],0x0      (0147) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
025C: 62 16 00 MOV   REG[0x16],0x0      (0148) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
025F: 71 10    OR    F,0x10             
                                        (0149) 	M8C_SetBank1
0261: 62 16 00 MOV   REG[0x16],0x0      (0150) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0264: 62 17 00 MOV   REG[0x17],0x0      (0151) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0267: 70 EF    AND   F,0xEF             
                                        (0152) 	M8C_SetBank0
0269: 62 15 00 MOV   REG[0x15],0x0      (0153) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
026C: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
026E: 7F       RET                      (0155) 	ret
                                        (0156) 
                                        (0157) 
                                        (0158) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_lab3a
                                        (0026) export _LoadConfig_lab3a
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
026F: 7C 02 76 LCALL 0x0276             (0058) 	lcall	LoadConfig_lab3a
0272: 7C 01 AA LCALL 0x01AA             (0059) 	lcall	LoadConfigTBL_lab3a_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0275: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration lab3a
                                        (0067) ;
                                        (0068) ;    Load configuration registers for lab3a.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_lab3a:
                                        (0085)  LoadConfig_lab3a:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
0276: 10       PUSH  X                  (0088) 	push	x
0277: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0279: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
027B: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
027C: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_lab3a_Bank0
027E: 57 50    MOV   X,0x50             (0094)     mov     X, <LoadConfigTBL_lab3a_Bank0
0280: 7C 02 91 LCALL 0x0291             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
0283: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
0285: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0286: 50 01    MOV   A,0x1              (0100)     mov     A, >LoadConfigTBL_lab3a_Bank1
0288: 57 81    MOV   X,0x81             (0101)     mov     X, <LoadConfigTBL_lab3a_Bank1
028A: 7C 02 91 LCALL 0x0291             (0102)     lcall   LoadConfig              ; Load the bank 1 values
028D: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
028F: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
0290: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
0291: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
0293: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
0294: 08       PUSH  A                  (0132)     push    A
0295: 4F       MOV   X,SP               (0133)     mov     X, SP
0296: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0299: D0 04    JNC   0x029E             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
029B: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
029E: 18       POP   A                  (0138)     pop     A
029F: 20       POP   X                  (0139)     pop     X
02A0: 70 EF    AND   F,0xEF             
02A2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02A5: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
02A6: 08       PUSH  A                  (0145)     push    A
02A7: 28       ROMX                     (0146)     romx                            ; Load register address from table
02A8: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
02AA: A0 1F    JZ    0x02CA             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
02AC: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
02AD: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
02B0: A0 03    JZ    0x02B4             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
02B2: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
02B4: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
02B6: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
02B7: 20       POP   X                  (0156)     pop     X
02B8: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
02B9: 09 00    ADC   A,0x0              (0158)     adc     A, 0
02BB: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
02BC: 08       PUSH  A                  (0160)     push    A
02BD: 28       ROMX                     (0161)     romx                            ; load config data from the table
02BE: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
02BF: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
02C1: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
02C3: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
02C4: 20       POP   X                  (0166)     pop     X
02C5: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
02C6: 09 00    ADC   A,0x0              (0168)     adc     A, 0
02C8: 8F D7    JMP   0x02A0             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
02CA: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
02CC: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\pwm8_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
02CD: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_1INT.asm
FILE: lib\pwm8_1.asm                    (0001) ;;*****************************************************************************
02CE: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_1_EnableInt
                                        (0030) export _PWM8_1_EnableInt
                                        (0031) export  PWM8_1_DisableInt
                                        (0032) export _PWM8_1_DisableInt
                                        (0033) export  PWM8_1_Start
                                        (0034) export _PWM8_1_Start
                                        (0035) export  PWM8_1_Stop
                                        (0036) export _PWM8_1_Stop
                                        (0037) export  PWM8_1_WritePeriod
                                        (0038) export _PWM8_1_WritePeriod
                                        (0039) export  PWM8_1_WritePulseWidth
                                        (0040) export _PWM8_1_WritePulseWidth
                                        (0041) export  PWM8_1_bReadPulseWidth
                                        (0042) export _PWM8_1_bReadPulseWidth
                                        (0043) export  PWM8_1_bReadCounter
                                        (0044) export _PWM8_1_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_1_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA lab3a_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_1_EnableInt:
                                        (0091) _PWM8_1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
02D1: 7F       RET                      (0095)    ret
02D2: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_1_DisableInt:
                                        (0119) _PWM8_1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
02D5: 7F       RET                      (0123)    ret
02D6: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_1_Start:
                                        (0148) _PWM8_1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
02D9: 7F       RET                      (0152)    ret
02DA: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_1_Stop:
                                        (0176) _PWM8_1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
02DD: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_1_WritePeriod:
                                        (0206) _PWM8_1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
02DE: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM8_1_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
02E0: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_1_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_1_WritePulseWidth:
                                        (0233) _PWM8_1_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
02E1: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[PWM8_1_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
02E3: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_1_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_1_bReadPulseWidth:
                                        (0260) _PWM8_1_bReadPulseWidth:
                                        (0261)  bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
02E4: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[PWM8_1_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
02E6: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_1_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_1_bReadCounter:
                                        (0293) _PWM8_1_bReadCounter:
                                        (0294)  bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
02E7: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
02E8: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Save the Compare register on the stack
02EA: 08       PUSH  A                  (0305)    push  A                                       ;
02EB: 41 23 FE AND   REG[0x23],0xFE     
02EE: 71 10    OR    F,0x10             
                                        (0306)    PWM8_1_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
02F0: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[PWM8_1_INPUT_REG]                ; save the clock input setting
02F2: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
02F3: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[PWM8_1_INPUT_REG], INPUT_REG_NULL
02F6: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
02F8: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[PWM8_1_COUNTER_REG]              ; DR2 <- DR0
02FA: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Stash the Count on the stack
02FC: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
02FD: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
02FF: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[PWM8_1_COMPARE_REG], A
0301: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0303: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0305: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[PWM8_1_INPUT_REG], A                ;
0307: 70 EF    AND   F,0xEF             
0309: 43 23 01 OR    REG[0x23],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_1_Start_M                                ;   then re-enable the PWM.
030C: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
030D: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
030F: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_1.asm
FILE: C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab\Lab3B\Lab3B\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) 
(0009) void main(void)
(0010) {
(0011) 	PWM8_1_Start();
__UserModules_end|__text_start|_main|_main:
    0310: 10       PUSH  X
    0311: 7C 02 D6 LCALL _PWM8_1_Start
    0314: 20       POP   X
(0012) 
(0013) 	// M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
(0014) 	// Insert your main routine code here.
(0015) 	while (1);
    0315: 8F FF    JMP   0x0315
