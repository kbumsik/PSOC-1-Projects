FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 02 LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 03 03 LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 59    MOV   A,0x59             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [str_buf+231],0x0  (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [str_buf+232],0x0  (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 F8 LCALL 0x02F8             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 06 09 MOV   [__r0],0x9         (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 06 38 CMP   [__r0],0x38        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 06    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 97    MOV   X,0x97             (0368)     mov  X,<__idata_start
00AC: 55 06 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 06 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 06    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 06 78 LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0197: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_example_uart_28pin
                                        (0019) AREA psoc_config(rom, rel)
                                        (0020) LoadConfigTBL_example_uart_28pin:
                                        (0021) 	M8C_SetBank0
                                        (0022) ;  Global Register values Bank 0
0199: 62 60 28 MOV   REG[0x60],0x28     (0023) 	mov	reg[60h], 28h		; AnalogColumnInputSelect register (AMX_IN)
019C: 62 66 00 MOV   REG[0x66],0x0      (0024) 	mov	reg[66h], 00h		; AnalogComparatorControl1 register (CMP_CR1)
019F: 62 63 05 MOV   REG[0x63],0x5      (0025) 	mov	reg[63h], 05h		; AnalogReferenceControl register (ARF_CR)
01A2: 62 65 00 MOV   REG[0x65],0x0      (0026) 	mov	reg[65h], 00h		; AnalogSyncControl register (ASY_CR)
01A5: 62 E6 00 MOV   REG[0xE6],0x0      (0027) 	mov	reg[e6h], 00h		; DecimatorControl_0 register (DEC_CR0)
01A8: 62 E7 00 MOV   REG[0xE7],0x0      (0028) 	mov	reg[e7h], 00h		; DecimatorControl_1 register (DEC_CR1)
01AB: 62 D6 00 MOV   REG[0xD6],0x0      (0029) 	mov	reg[d6h], 00h		; I2CConfig register (I2CCFG)
01AE: 62 B0 04 MOV   REG[0xB0],0x4      (0030) 	mov	reg[b0h], 04h		; Row_0_InputMux register (RDI0RI)
01B1: 62 B1 00 MOV   REG[0xB1],0x0      (0031) 	mov	reg[b1h], 00h		; Row_0_InputSync register (RDI0SYN)
01B4: 62 B2 00 MOV   REG[0xB2],0x0      (0032) 	mov	reg[b2h], 00h		; Row_0_LogicInputAMux register (RDI0IS)
01B7: 62 B3 33 MOV   REG[0xB3],0x33     (0033) 	mov	reg[b3h], 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
01BA: 62 B4 33 MOV   REG[0xB4],0x33     (0034) 	mov	reg[b4h], 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
01BD: 62 B5 00 MOV   REG[0xB5],0x0      (0035) 	mov	reg[b5h], 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
01C0: 62 B6 20 MOV   REG[0xB6],0x20     (0036) 	mov	reg[b6h], 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
01C3: 62 B8 55 MOV   REG[0xB8],0x55     (0037) 	mov	reg[b8h], 55h		; Row_1_InputMux register (RDI1RI)
01C6: 62 B9 00 MOV   REG[0xB9],0x0      (0038) 	mov	reg[b9h], 00h		; Row_1_InputSync register (RDI1SYN)
01C9: 62 BA 10 MOV   REG[0xBA],0x10     (0039) 	mov	reg[bah], 10h		; Row_1_LogicInputAMux register (RDI1IS)
01CC: 62 BB 33 MOV   REG[0xBB],0x33     (0040) 	mov	reg[bbh], 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
01CF: 62 BC 33 MOV   REG[0xBC],0x33     (0041) 	mov	reg[bch], 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
01D2: 62 BD 00 MOV   REG[0xBD],0x0      (0042) 	mov	reg[bdh], 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
01D5: 62 BE 00 MOV   REG[0xBE],0x0      (0043) 	mov	reg[beh], 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0044) ;  Instance name UART, User Module UART
                                        (0045) ;       Instance name UART, Block Name RX(DCB03)
01D8: 62 2F 00 MOV   REG[0x2F],0x0      (0046) 	mov	reg[2fh], 00h		;UART_RX_CONTROL_REG(DCB03CR0)
01DB: 62 2D 00 MOV   REG[0x2D],0x0      (0047) 	mov	reg[2dh], 00h		;UART_(DCB03DR1)
01DE: 62 2E 00 MOV   REG[0x2E],0x0      (0048) 	mov	reg[2eh], 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0049) ;       Instance name UART, Block Name TX(DCB02)
01E1: 62 2B 00 MOV   REG[0x2B],0x0      (0050) 	mov	reg[2bh], 00h		;UART_TX_CONTROL_REG(DCB02CR0)
01E4: 62 29 00 MOV   REG[0x29],0x0      (0051) 	mov	reg[29h], 00h		;UART_TX_BUFFER_REG (DCB02DR1)
01E7: 62 2A 00 MOV   REG[0x2A],0x0      (0052) 	mov	reg[2ah], 00h		;UART_(DCB02DR2)
01EA: 71 10    OR    F,0x10             
                                        (0053) 	M8C_SetBank1
                                        (0054) ;  Global Register values Bank 1
01EC: 62 61 00 MOV   REG[0x61],0x0      (0055) 	mov	reg[61h], 00h		; AnalogClockSelect1 register (CLK_CR1)
01EF: 62 69 00 MOV   REG[0x69],0x0      (0056) 	mov	reg[69h], 00h		; AnalogClockSelect2 register (CLK_CR2)
01F2: 62 60 00 MOV   REG[0x60],0x0      (0057) 	mov	reg[60h], 00h		; AnalogColumnClockSelect register (CLK_CR0)
01F5: 62 62 00 MOV   REG[0x62],0x0      (0058) 	mov	reg[62h], 00h		; AnalogIOControl_0 register (ABF_CR0)
01F8: 62 67 33 MOV   REG[0x67],0x33     (0059) 	mov	reg[67h], 33h		; AnalogLUTControl0 register (ALT_CR0)
01FB: 62 68 33 MOV   REG[0x68],0x33     (0060) 	mov	reg[68h], 33h		; AnalogLUTControl1 register (ALT_CR1)
01FE: 62 63 00 MOV   REG[0x63],0x0      (0061) 	mov	reg[63h], 00h		; AnalogModulatorControl_0 register (AMD_CR0)
0201: 62 66 00 MOV   REG[0x66],0x0      (0062) 	mov	reg[66h], 00h		; AnalogModulatorControl_1 register (AMD_CR1)
0204: 62 D1 00 MOV   REG[0xD1],0x0      (0063) 	mov	reg[d1h], 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
0207: 62 D3 00 MOV   REG[0xD3],0x0      (0064) 	mov	reg[d3h], 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
020A: 62 D0 00 MOV   REG[0xD0],0x0      (0065) 	mov	reg[d0h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
020D: 62 D2 00 MOV   REG[0xD2],0x0      (0066) 	mov	reg[d2h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
0210: 62 E1 00 MOV   REG[0xE1],0x0      (0067) 	mov	reg[e1h], 00h		; OscillatorControl_1 register (OSC_CR1)
0213: 62 E2 00 MOV   REG[0xE2],0x0      (0068) 	mov	reg[e2h], 00h		; OscillatorControl_2 register (OSC_CR2)
0216: 62 DF 9B MOV   REG[0xDF],0x9B     (0069) 	mov	reg[dfh], 9bh		; OscillatorControl_3 register (OSC_CR3)
0219: 62 DE 00 MOV   REG[0xDE],0x0      (0070) 	mov	reg[deh], 00h		; OscillatorControl_4 register (OSC_CR4)
021C: 62 DD 00 MOV   REG[0xDD],0x0      (0071) 	mov	reg[ddh], 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0072) ;  Instance name UART, User Module UART
                                        (0073) ;       Instance name UART, Block Name RX(DCB03)
021F: 62 2C 05 MOV   REG[0x2C],0x5      (0074) 	mov	reg[2ch], 05h		;UART_RX_FUNC_REG   (DCB03FN)
0222: 62 2D D1 MOV   REG[0x2D],0xD1     (0075) 	mov	reg[2dh], d1h		;UART_RX_INPUT_REG  (DCB03IN)
0225: 62 2E 40 MOV   REG[0x2E],0x40     (0076) 	mov	reg[2eh], 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0077) ;       Instance name UART, Block Name TX(DCB02)
0228: 62 28 0D MOV   REG[0x28],0xD      (0078) 	mov	reg[28h], 0dh		;UART_TX_FUNC_REG   (DCB02FN)
022B: 62 29 01 MOV   REG[0x29],0x1      (0079) 	mov	reg[29h], 01h		;UART_TX_INPUT_REG  (DCB02IN)
022E: 62 2A 47 MOV   REG[0x2A],0x47     (0080) 	mov	reg[2ah], 47h		;UART_TX_OUTPUT_REG (DCB02OU)
0231: 70 EF    AND   F,0xEF             
0233: 70 EF    AND   F,0xEF             
                                        (0081) 	M8C_SetBank0
                                        (0082) ;  Ordered Global Register values
                                        (0083) 	M8C_SetBank0
0235: 62 00 00 MOV   REG[0x0],0x0       (0084) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0238: 71 10    OR    F,0x10             
                                        (0085) 	M8C_SetBank1
023A: 62 00 00 MOV   REG[0x0],0x0       (0086) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
023D: 62 01 FF MOV   REG[0x1],0xFF      (0087) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0240: 70 EF    AND   F,0xEF             
                                        (0088) 	M8C_SetBank0
0242: 62 03 FF MOV   REG[0x3],0xFF      (0089) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0245: 62 02 00 MOV   REG[0x2],0x0       (0090) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0248: 71 10    OR    F,0x10             
                                        (0091) 	M8C_SetBank1
024A: 62 02 00 MOV   REG[0x2],0x0       (0092) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
024D: 62 03 00 MOV   REG[0x3],0x0       (0093) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0250: 70 EF    AND   F,0xEF             
                                        (0094) 	M8C_SetBank0
0252: 62 01 00 MOV   REG[0x1],0x0       (0095) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0255: 62 04 00 MOV   REG[0x4],0x0       (0096) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0258: 71 10    OR    F,0x10             
                                        (0097) 	M8C_SetBank1
025A: 62 04 01 MOV   REG[0x4],0x1       (0098) 	mov	reg[04h], 01h		; Port_1_DriveMode_0 register (PRT1DM0)
025D: 62 05 FF MOV   REG[0x5],0xFF      (0099) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0260: 70 EF    AND   F,0xEF             
                                        (0100) 	M8C_SetBank0
0262: 62 07 FE MOV   REG[0x7],0xFE      (0101) 	mov	reg[07h], feh		; Port_1_DriveMode_2 register (PRT1DM2)
0265: 62 06 00 MOV   REG[0x6],0x0       (0102) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0268: 71 10    OR    F,0x10             
                                        (0103) 	M8C_SetBank1
026A: 62 06 00 MOV   REG[0x6],0x0       (0104) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
026D: 62 07 00 MOV   REG[0x7],0x0       (0105) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0270: 70 EF    AND   F,0xEF             
                                        (0106) 	M8C_SetBank0
0272: 62 05 00 MOV   REG[0x5],0x0       (0107) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0275: 62 08 00 MOV   REG[0x8],0x0       (0108) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0278: 71 10    OR    F,0x10             
                                        (0109) 	M8C_SetBank1
027A: 62 08 80 MOV   REG[0x8],0x80      (0110) 	mov	reg[08h], 80h		; Port_2_DriveMode_0 register (PRT2DM0)
027D: 62 09 7F MOV   REG[0x9],0x7F      (0111) 	mov	reg[09h], 7fh		; Port_2_DriveMode_1 register (PRT2DM1)
0280: 70 EF    AND   F,0xEF             
                                        (0112) 	M8C_SetBank0
0282: 62 0B 5F MOV   REG[0xB],0x5F      (0113) 	mov	reg[0bh], 5fh		; Port_2_DriveMode_2 register (PRT2DM2)
0285: 62 0A A0 MOV   REG[0xA],0xA0      (0114) 	mov	reg[0ah], a0h		; Port_2_GlobalSelect register (PRT2GS)
0288: 71 10    OR    F,0x10             
                                        (0115) 	M8C_SetBank1
028A: 62 0A 00 MOV   REG[0xA],0x0       (0116) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
028D: 62 0B 00 MOV   REG[0xB],0x0       (0117) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0290: 70 EF    AND   F,0xEF             
                                        (0118) 	M8C_SetBank0
0292: 62 09 00 MOV   REG[0x9],0x0       (0119) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0295: 62 0C 00 MOV   REG[0xC],0x0       (0120) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0298: 71 10    OR    F,0x10             
                                        (0121) 	M8C_SetBank1
029A: 62 0C 00 MOV   REG[0xC],0x0       (0122) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
029D: 62 0D 00 MOV   REG[0xD],0x0       (0123) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02A0: 70 EF    AND   F,0xEF             
                                        (0124) 	M8C_SetBank0
02A2: 62 0F 00 MOV   REG[0xF],0x0       (0125) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02A5: 62 0E 00 MOV   REG[0xE],0x0       (0126) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02A8: 71 10    OR    F,0x10             
                                        (0127) 	M8C_SetBank1
02AA: 62 0E 00 MOV   REG[0xE],0x0       (0128) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02AD: 62 0F 00 MOV   REG[0xF],0x0       (0129) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02B0: 70 EF    AND   F,0xEF             
                                        (0130) 	M8C_SetBank0
02B2: 62 0D 00 MOV   REG[0xD],0x0       (0131) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02B5: 62 10 00 MOV   REG[0x10],0x0      (0132) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02B8: 71 10    OR    F,0x10             
                                        (0133) 	M8C_SetBank1
02BA: 62 10 00 MOV   REG[0x10],0x0      (0134) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02BD: 62 11 00 MOV   REG[0x11],0x0      (0135) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02C0: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
02C2: 62 13 00 MOV   REG[0x13],0x0      (0137) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02C5: 62 12 00 MOV   REG[0x12],0x0      (0138) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02C8: 71 10    OR    F,0x10             
                                        (0139) 	M8C_SetBank1
02CA: 62 12 00 MOV   REG[0x12],0x0      (0140) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02CD: 62 13 00 MOV   REG[0x13],0x0      (0141) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02D0: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
02D2: 62 11 00 MOV   REG[0x11],0x0      (0143) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02D5: 62 14 00 MOV   REG[0x14],0x0      (0144) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02D8: 71 10    OR    F,0x10             
                                        (0145) 	M8C_SetBank1
02DA: 62 14 00 MOV   REG[0x14],0x0      (0146) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02DD: 62 15 00 MOV   REG[0x15],0x0      (0147) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02E0: 70 EF    AND   F,0xEF             
                                        (0148) 	M8C_SetBank0
02E2: 62 17 00 MOV   REG[0x17],0x0      (0149) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02E5: 62 16 00 MOV   REG[0x16],0x0      (0150) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02E8: 71 10    OR    F,0x10             
                                        (0151) 	M8C_SetBank1
02EA: 62 16 00 MOV   REG[0x16],0x0      (0152) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02ED: 62 17 00 MOV   REG[0x17],0x0      (0153) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02F0: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
02F2: 62 15 00 MOV   REG[0x15],0x0      (0155) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02F5: 70 EF    AND   F,0xEF             
                                        (0156) 	M8C_SetBank0
02F7: 7F       RET                      (0157) 	ret
                                        (0158) 
                                        (0159) 
                                        (0160) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_example_uart_28pin
                                        (0026) export _LoadConfig_example_uart_28pin
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) 
                                        (0037) ;---------------------------------------------------------------------------
                                        (0038) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0039) ;                  parameters handled by boot code, like CPU speed). This
                                        (0040) ;                  function can be called from user code, but typically it
                                        (0041) ;                  is only called from boot.
                                        (0042) ;
                                        (0043) ;       INPUTS: None.
                                        (0044) ;      RETURNS: Nothing.
                                        (0045) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0046) ;               In the large memory model currently only the page
                                        (0047) ;               pointer registers listed below are modified.  This does
                                        (0048) ;               not guarantee that in future implementations of this
                                        (0049) ;               function other page pointer registers will not be
                                        (0050) ;               modified.
                                        (0051) ;          
                                        (0052) ;               Page Pointer Registers Modified: 
                                        (0053) ;               CUR_PP
                                        (0054) ;
                                        (0055) _LoadConfigInit:
                                        (0056)  LoadConfigInit:
                                        (0057)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0058)     
02F8: 7C 02 FC LCALL 0x02FC             (0059) 	lcall	LoadConfig_example_uart_28pin
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
02FB: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration example_uart_28pin
                                        (0067) ;
                                        (0068) ;    Load configuration registers for example_uart_28pin.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_example_uart_28pin:
                                        (0085)  LoadConfig_example_uart_28pin:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
02FC: 7C 01 97 LCALL 0x0197             (0087)     lcall   LoadConfigTBL_example_uart_28pin            ; Call load config table routine
02FF: 70 EF    AND   F,0xEF             
                                        (0088) 
                                        (0089) 
                                        (0090)     M8C_SetBank0                    ; Force return to bank 0
                                        (0091)     RAM_EPILOGUE RAM_USE_CLASS_4
0301: 7F       RET                      (0092)     ret
                                        (0093) 
                                        (0094) 
                                        (0095) 
                                        (0096) AREA InterruptRAM(ram, rel)
                                        (0097) 
                                        (0098) NO_SHADOW:
                                        (0099) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    ;@PSoC_UserCode_END@ (Do not change this line.)
0302: 7E       RETI                     (0101)    reti
                                        (0102) 
                                        (0103) 
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0106) ;
                                        (0107) ;  DESCRIPTION:
                                        (0108) ;     UART RX interrupt handler for instance UART.
                                        (0109) ;     This ISR handles the background processing of received characters if
                                        (0110) ;     the buffer is enabled.
                                        (0111) ;
                                        (0112) ;
                                        (0113) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0114) ;
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;     There are 3 posible errors that may occur with the serial port.
                                        (0117) ;      1) Parity Error
                                        (0118) ;      2) Framing Error
                                        (0119) ;      3) OverRun Error
                                        (0120) ;
                                        (0121) ;  This user module check for parity and framing error.  If either of these
                                        (0122) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0123) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0124) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0125) ;  this ISR to set a flag if an error condition occurs.
                                        (0126) ;
                                        (0127) ;  THEORY of OPERATION:
                                        (0128) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0129) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0130) ;     the command terminator is detected, the command bit is set and all other
                                        (0131) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0132) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0133) ;     terminator.  After that, the characters will be discarded, although
                                        (0134) ;     a command determinator will still cause the command bit to be set.
                                        (0135) ;
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) _UART_RX_ISR:
                                        (0138) 
                                        (0139)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0140)    ;---------------------------------------------------
                                        (0141)    ; Insert your custom code below this banner
                                        (0142)    ;---------------------------------------------------
                                        (0143)    ;   NOTE: interrupt service routines must preserve
                                        (0144)    ;   the values of the A and X CPU registers.
                                        (0145) 
                                        (0146)    ;---------------------------------------------------
                                        (0147)    ; Insert your custom code above this banner
                                        (0148)    ;---------------------------------------------------
                                        (0149)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0150) 
                                        (0151) IF (UART_RXBUF_ENABLE)
0303: 08       PUSH  A                  (0152)    push A
0304: 10       PUSH  X                  (0153)    push X
                                        (0154)    
                                        (0155)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0156)       REG_PRESERVE IDX_PP
                                        (0157)    ENDIF
                                        (0158)    
0305: 58 08    MOV   X,[0x8]            (0159)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
0307: 5D 2F    MOV   A,REG[0x2F]        (0160)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
0309: 08       PUSH  A                  (0161)    push A                                                  ; Store copy for later test
                                        (0162)                                                            ; IF real RX interrupt
030A: 21 08    AND   A,0x8              (0163)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
030C: B0 04    JNZ   0x0311             (0164)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
030E: 18       POP   A                  (0165)    pop  A                                                  ; Restore stack
030F: 80 40    JMP   0x0350             (0166)    jmp  .RESTORE_IDX_PP
                                        (0167) 
                                        (0168) .UARTRX_ReadRx:
0311: 18       POP   A                  (0169)    pop  A                                                  ; Restore status flags
                                        (0170)                                                            ; IF there is no error, get data
                                        (0171)                                                            ; Check for parity or framing error
0312: 21 E0    AND   A,0xE0             (0172)    and  A,UART_RX_ERROR
0314: A0 12    JZ    0x0327             (0173)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0174) 
0316: 2C 07    OR    [0x7],A            (0175)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
0318: 49 2E 00 TST   REG[0x2E],0x0      (0176)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
031B: 21 20    AND   A,0x20             (0177)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
031D: A0 32    JZ    0x0350             (0178)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0179) 
                                        (0180)                                                            ; Disable and re-enable RX to reset after
                                        (0181)                                                            ; framing error.
031F: 41 2F FE AND   REG[0x2F],0xFE     (0182)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
0322: 43 2F 01 OR    REG[0x2F],0x1      (0183)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
0325: 80 2A    JMP   0x0350             (0184)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0185) 
                                        (0186) 
                                        (0187) .UARTRX_NO_ERROR:
0327: 5D 2E    MOV   A,REG[0x2E]        (0188)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0189) 
                                        (0190)                                                            ; IF buffer not full
0329: 47 07 01 TST   [0x7],0x1          (0191)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
032C: B0 23    JNZ   0x0350             (0192)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0193) 
032E: 39 0D    CMP   A,0xD              (0194)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
0330: B0 09    JNZ   0x033A             (0195)    jnz  .UARTRX_CHK_BACKSPACE
0332: 2E 07 01 OR    [0x7],0x1          (0196)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0197) 
                                        (0198) 
                                        (0199) 
                                        (0200)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0201)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0335: 56 38 00 MOV   [X+56],0x0         (0202)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0203)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0338: 80 17    JMP   0x0350             (0204)    jmp  .RESTORE_IDX_PP
                                        (0205) 
                                        (0206) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0207) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0208)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0209)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0210)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0211)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0212)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0213)    jmp  .RESTORE_IDX_PP
                                        (0214) ENDIF                                                      ; 
                                        (0215) 
                                        (0216) .UARTRX_IGNORE:
                                        (0217) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
033A: 39 20    CMP   A,0x20             (0218)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
033C: C0 13    JC    0x0350             (0219)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0220) ENDIF
                                        (0221) 
                                        (0222) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0223) 	
                                        (0224)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
033E: 3C 08 1F CMP   [0x8],0x1F         (0225)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
0341: C0 09    JC    0x034B             (0226)    jc   .UARTRX_ISR_GETDATA
                                        (0227)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0343: 56 38 00 MOV   [X+56],0x0         (0228)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0346: 2E 07 10 OR    [0x7],0x10         (0230)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
0349: 80 06    JMP   0x0350             (0231)    jmp  .RESTORE_IDX_PP
                                        (0232) 
                                        (0233) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0234)                                                            ; X is already loaded with pointer
                                        (0235)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
034B: 54 38    MOV   [X+56],A           (0236)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0237)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
034D: 75       INC   X                  (0238)    inc  X                                                  ; Inc the pointer
034E: 5A 08    MOV   [0x8],X            (0239)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0240)                                                            ; ENDIF max string size
                                        (0241) .RESTORE_IDX_PP:
                                        (0242)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0243)       REG_RESTORE IDX_PP
                                        (0244)    ENDIF
                                        (0245) 
                                        (0246) .END_UARTRX_ISR:
0350: 20       POP   X                  (0247)    pop  X
0351: 18       POP   A                  (0248)    pop  A
                                        (0249) 
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) UART_RX_ISR_END:
0352: 7E       RETI                     (0253)    reti
                                        (0254) 
                                        (0255) ; end of file UARTINT.asm
                                        (0256) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
0353: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
0356: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0359: 7F       RET                      (0182)    ret
035A: 41 E1 FB AND   REG[0xE1],0xFB     
035D: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0360: 7F       RET                      (0214)    ret
0361: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
0363: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0365: A0 07    JZ    0x036D             (0249)    jz    .SetModeRegEmpty
0367: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
036A: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
036C: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
036D: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0370: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0372: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0373: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0375: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
0377: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
0379: 91 0E    CALL  _UART_CmdReset     (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
037B: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
037C: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
037F: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0382: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0383: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0385: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0386: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0388: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0389: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
038B: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
038C: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
038E: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
038F: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
0391: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0393: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
0395: A0 06    JZ    0x039C             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0397: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
039A: 80 04    JMP   0x039F             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
039C: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
039F: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
03A1: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
03A2: 08       PUSH  A                  (0536)    push A
03A3: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
03A5: A0 06    JZ    0x03AC             (0538)    jz   .DisRxInt
03A7: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
03AA: 80 04    JMP   0x03AF             (0541)    jmp  .CheckTxInt
03AC: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
03AF: 18       POP   A                  (0547)    pop  A
03B0: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
03B2: A0 06    JZ    0x03B9             (0549)    jz   .DisTxInt
03B4: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
03B7: 80 04    JMP   0x03BC             (0552)    jmp  .End_IntCntl
03B9: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
03BC: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
03CD: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
03CE: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
03CF: 67       ASR   A                  (0603)    asr   A
03D0: 67       ASR   A                  (0604)    asr   A
03D1: 67       ASR   A                  (0605)    asr   A
03D2: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
03D4: FF E7    INDEX 0x03BD             (0607)    index UART_HEX_STR                  ; Get Hex value
03D6: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
03D8: 18       POP   A                  (0609)    pop   A                             ; Restore value
03D9: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
03DB: FF E0    INDEX 0x03BD             (0611)    index UART_HEX_STR                  ; Get Hex value
03DD: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
03DF: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
03E0: 4B       SWAP  A,X                (0645)    swap  A,X
03E1: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
03E3: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
03E4: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
03E6: 7F       RET                      (0650)    ret
03E7: 49 2B 10 TST   REG[0x2B],0x10     
03EA: AF FC    JZ    _UART_PutChar      
03EC: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
03EE: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
03EF: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
03F2: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
03F4: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
03F6: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
03F7: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
03F9: 08       PUSH  A                  (0756)    push A
03FA: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
03FC: B0 04    JNZ   0x0401             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
03FE: 18       POP   A                  (0759)    pop  A
03FF: 80 0B    JMP   0x040B             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0401: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0403: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0404: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0405: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0407: B0 03    JNZ   0x040B             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0409: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
040A: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
040B: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
040D: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
040E: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0410: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0412: 08       PUSH  A                  (0819)    push A
0413: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0415: B0 07    JNZ   0x041D             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0417: 18       POP   A                  (0822)    pop  A
0418: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
041A: 4B       SWAP  A,X                (0824)    swap A,X
041B: 80 07    JMP   0x0423             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
041D: 18       POP   A                  (0828)    pop  A
041E: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0420: 4B       SWAP  A,X                (0830)    swap A,X
0421: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0423: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0424: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0426: A0 06    JZ    0x042D             (0872)    jz    End_PutString                           ; Check for end of string
0428: 9F BD    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
042A: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
042B: 8F F8    JMP   _UART_PutString    (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
042D: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
042E: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
042F: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0431: A0 13    JZ    0x0445             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0433: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0435: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0437: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0439: 49 2B 10 TST   REG[0x2B],0x10     
043C: AF FC    JZ    0x0439             
043E: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0440: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0441: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0443: 8F EB    JMP   0x042F             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0445: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0446: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0447: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
044A: B0 06    JNZ   0x0451             (0980)    jnz   .CW_WRITEIT
044C: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
044F: A0 1D    JZ    0x046D             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0451: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0452: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0454: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0456: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0457: 49 2B 10 TST   REG[0x2B],0x10     
045A: AF FC    JZ    0x0457             
045C: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
045E: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
045F: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0462: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0465: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0468: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
046B: 8F DB    JMP   0x0447             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
046D: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
046E: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
046F: 10       PUSH  X                  (1030)    push  X
0470: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0471: A0 0B    JZ    0x047D             (1032)    jz    .End_CPutString
0473: 9F 72    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
0475: 20       POP   X                  (1034)    pop   X
0476: 18       POP   A                  (1035)    pop   A
0477: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0478: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
047A: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
047B: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
047D: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
047F: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0480: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0482: 9F 63    CALL  _UART_PutChar      (1074)    call UART_PutChar
0484: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0486: 9F 5F    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0488: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
0489: 55 38 00 MOV   [str_buf+39],0x0   (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
048C: 55 08 00 MOV   [0x8],0x0          (1124)    mov [UART_bRxCnt], 0x00
048F: 26 07 00 AND   [0x7],0x0          (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
0492: 55 58 00 MOV   [str_buf+71],0x0   (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
0495: 7F       RET                      (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
0496: 51 07    MOV   A,[0x7]            (1165)    mov A,  [UART_fStatus]
0498: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
049A: 7F       RET                      (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
049B: 51 07    MOV   A,[0x7]            (1209)    mov A,  [UART_fStatus]
049D: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
049F: 26 07 0F AND   [0x7],0xF          (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
04A2: 7F       RET                      (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
04A3: 51 08    MOV   A,[0x8]            (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
04A5: 7F       RET                      (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
04A6: 50 38    MOV   A,0x38             (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
04A8: 02 58    ADD   A,[str_buf+71]     (1305)    add   A, [ptrParam]                      ; Add string offset
04AA: 5C       MOV   X,A                (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
04AB: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
04AD: B0 04    JNZ   0x04B2             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
04AF: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
04B0: 80 33    JMP   0x04E4             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
04B2: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
04B4: B0 11    JNZ   0x04C6             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
04B6: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
04B7: 76 58    INC   [str_buf+71]       (1318)    inc   [ptrParam]                         ;          the stored pointer.
04B9: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
04BB: 3C 58 1F CMP   [str_buf+71],0x1F  (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
04BE: BF F3    JNZ   0x04B2             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
04C0: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
04C1: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
04C4: 80 1F    JMP   0x04E4             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
04C6: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
04C7: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
04C8: 76 58    INC   [str_buf+71]       (1334)    inc   [ptrParam]
04CA: 3C 58 1F CMP   [str_buf+71],0x1F  (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
04CD: AF F3    JZ    0x04C1             (1336)    jz    .TerminateString
04CF: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
04D1: A0 12    JZ    0x04E4             (1338)    jz    .End_GetNextParam
04D3: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
04D5: BF F1    JNZ   0x04C7             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
04D7: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
04DA: 76 58    INC   [str_buf+71]       (1342)    inc   [ptrParam]
04DC: 3C 58 1F CMP   [str_buf+71],0x1F  (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
04DF: B0 04    JNZ   0x04E4             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
04E1: 55 58 1F MOV   [str_buf+71],0x1F  (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
04E4: 20       POP   X                  (1348)    pop   X
04E5: 10       PUSH  X                  (1349)    push  X
04E6: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
04E9: B0 06    JNZ   0x04F0             (1351)    jnz   .NotNullString
04EB: 20       POP   X                  (1352)    pop   X
04EC: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
04EE: 5B       MOV   A,X                (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
04EF: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
04F0: 20       POP   X                  (1360)    pop  X
04F1: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
04F3: 7F       RET                      (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
04F4: 50 38    MOV   A,0x38             (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
04F6: 02 58    ADD   A,[str_buf+71]     (1397)    add  A, [ptrParam]                       ; Add string offset
04F8: 5C       MOV   X,A                (1398)    mov  X,A
04F9: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
04FB: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab5\Lab5\main.c
(0001) //--------------------------------------------------------------------------
(0002) //
(0003) // Copyright 2008, Cypress Semiconductor Corporation.
(0004) //
(0005) // This software is owned by Cypress Semiconductor Corporation (Cypress)
(0006) // and is protected by and subject to worldwide patent protection (United
(0007) // States and foreign), United States copyright laws and international
(0008) // treaty provisions. Cypress hereby grants to licensee a personal,
(0009) // non-exclusive, non-transferable license to copy, use, modify, create
(0010) // derivative works of, and compile the Cypress Source Code and derivative
(0011) // works for the sole purpose of creating custom software in support of
(0012) // licensee product to be used only in conjunction with a Cypress integrated
(0013) // circuit as specified in the applicable agreement. Any reproduction,
(0014) // modification, translation, compilation, or representation of this
(0015) // software except as specified above is prohibited without the express
(0016) // written permission of Cypress.
(0017) //
(0018) // Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND,EXPRESS OR IMPLIED,
(0019) // WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
(0020) // WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
(0021) // Cypress reserves the right to make changes without further notice to the
(0022) // materials described herein. Cypress does not assume any liability arising
(0023) // out of the application or use of any product or circuit described herein.
(0024) // Cypress does not authorize its products for use as critical components in
(0025) // life-support systems where a malfunction or failure may reasonably be
(0026) // expected to result in significant injury to the user. The inclusion of
(0027) // Cypress' product in a life-support systems application implies that the
(0028) // manufacturer assumes all risk of such use and in doing so indemnifies
(0029) // Cypress against all charges.
(0030) //
(0031) // Use may be limited by and subject to the applicable Cypress software
(0032) // license agreement.
(0033) ////-------------------------------------------------------------------------
(0034) //****************************************************************************
(0035) //*****************************************************************************
(0036) //  FILENAME: main.c
(0037) //   Version: 1.0, Updated on 2 August 2010
(0038) //
(0039) //  DESCRIPTION: Main file of the Example_UART Project.
(0040) //
(0041) //-----------------------------------------------------------------------------
(0042) //  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
(0043) //*****************************************************************************
(0044) //*****************************************************************************
(0045) ////***************************************************************************************
(0046) // 
(0047) //    The project can be tested using Windows HyperTerminal application.
(0048) // 
(0049) //    CY3210-PSoCEVAL1 Board Project
(0050) //
(0051) //Project Objective
(0052) //    To demonstrate the operation of the 8-Bit UART user module of PSoC device.  
(0053) //
(0054) //Overview
(0055) //    A command and some parameters (separated by spaces) are transmitted by a Personal 
(0056) //    Computer using Windows Hyper Terminal, through a Serial Port.  The data is received 
(0057) //    and decoded by PSoC and the command and parameters are echoed back to the PC (line by line).
(0058) //
(0059) //
(0060) //    The following changes were made to the default settings in the Device Editor:
(0061) // 
(0062) //    Select User Modules
(0063) //        o Select an UART_1 from the Digital Comm category.
(0064) //        o In this example, these UM is renamed as UART 
(0065) //    Place User Modules
(0066) //        1. Place the on blocks DCB02 and DCB03.
(0067) //
(0068) //    Set the global resources and UM parameters in the Device Editor as shown under 
(0069) //    "Project Settings" ahead.
(0070) //
(0071) //    Upon program execution all hardware settings from the device configuration are loaded 
(0072) //    into the device and main.c is executed.
(0073) //
(0074) //    The 24 MHz system clock is divided by 156 (VC3) to produce a 153.8 KHz clock, which 
(0075) //    is provided to UART user module.  The transfer rate would be 1/8 times the clock, 
(0076) //    ie., 19200 bps.  Parity is set to none in the initial configuration for the block 
(0077) //    and may also be set using the UART APIs.  
(0078) //
(0079) //    After setting up the HyperTerminal as explained below in section "Setting up 
(0080) //    HyperTerminal in Windows" , click on the 'Call' icon in the HyperTerminal and reset 
(0081) //    the PSoC.
(0082) //
(0083) //    In the HyperTerminal window, the following message will be displayed.
(0084) //
(0085) //    --------------------------------------------------------------------------------
(0086) //        Welcome to PSoC UART test program. V1.0
(0087) //        Enter a command and some parameters (delimited by space) and press <ENTER>
(0088) //           Eg:    foobar aa bbb cc      (MAX : 32 chars
(0089) //
(0090) //    --------------------------------------------------------------------------------
(0091) //
(0092) //    Based on the commands typed on the HyperTerminal, PSoC will decode the  command 
(0093) //    and parameters accordingly, ie., if command is typed as follows 
(0094) //	
(0095) //    	Testing 1 22 333 4444 55555
(0096) //
(0097) //    The PSoC will respond with 
(0098) //    --------------------------------------------------------------------------------
(0099) //        Found valid command
(0100) //        Command =>Testing<
(0101) //        Paramaters:
(0102) //         <1>
(0103) //         <22>
(0104) //         <333>
(0105) //         <4444>
(0106) //         <55555>
(0107) //    --------------------------------------------------------------------------------
(0108) //
(0109) //    Further information on user modules is supplied in the specific user module data sheet 
(0110) //    included with PSoC Designer.
(0111) //
(0112) //Clock Routing
(0113) //    None
(0114) //    
(0115) //
(0116) //Project Settings
(0117) //
(0118) //    Global Resources 
(0119) //        CPU_Clock      = SysClk/2          CPU clock set to 12 MHz
(0120) //        VC3 Source	    = SysClk/1	        Set System Clock as the source for VC3
(0121) //        VC3 Divider	= 156	            Divide 24 Mhz system clock by 156, so that 
(0122) //                                             effective baud rate would be 19.2 kbps.
(0123) //
(0124) //User Module Parameters
(0125) //    UART		
(0126) //        Clock	         = VC3	             Input is 153.8 KHz clock.(ie., 8 times 
(0127) //                                             baud rate-19200).
(0128) //        RX Input	     = Row_0_Input_1	 Routed from pin P2[5] through GlobalInEven_5.
(0129) //        TX Output	     = Row_0_Output_3	 Routed to pin P2[7] through GlobalOutEven_7.
(0130) //        TX InterruptMode= TXRegEmpty	     Not used.
(0131) //		  Clock Sync		 = Sync to SysClock	 Clock is synchronized with the source clock(System Clock).
(0132) //        RxCmdBuffer	 = Enable	         Enable the Command buffer, so that the command 
(0133) //                                              received is stored in a ram buffer.
(0134) //        RxBufferSize	 = 32                Bytes	Length of buffer is 32 characters 
(0135) //                                              (including parameters).
(0136) //        CommandTerminator= 13	             Carriage return (13) is the command terminator.
(0137) //        Param_Delimiter = 32	             Space (32) is the parameter delimiter.
(0138) //        IgnoreCharsBelow= 32	             Ignore control characters which has 
(0139) //                                             ascii value below 32.
(0140) //		  Enable_Backspace= Disable			 Not used.
(0141) //        Rx Output       = None				 Not used.
(0142) //		 Rx Clock Out	  = None               Not used.
(0143) //		 Tx Clock Out     = None               Not used.
(0144) //        InvertRX Input  = Normal	         Do not invert Rx Input.
(0145) //
(0146) //
(0147) //    Note : For further information on the above parameters of UART,  
(0148) //            see "High Level API section" of UART module datasheet.
(0149) //
(0150) //Hardware Connections
(0151) //
(0152) //This example project runs on the CY3210-PSoCEVAL1 board or compatible hardware. The 
(0153) //serial data is transmitted through pin P2[7] and received through the pin P2[5].  
(0154) //Input
(0155) //    Pin	    Select	            Drive
(0156) //    -----------------------------------------
(0157) //    P2[5]	GlobalInEven_5	    High Z
(0158) //			
(0159) //Output
(0160) //
(0161) //    Pin	    Select	            Drive
(0162) //    -----------------------------------------
(0163) //    P2[7]	GlobalOutEven_7	    Strong
(0164) //
(0165) //How to use the Prototype Board
(0166) //	
(0167) //    CY3210-PSoCEVAL1
(0168) //        � Connect a jumper wire between P2[5] and Rx of J13.
(0169) //        � Connect a jumper wire between P2[7] and Tx of J13.
(0170) //
(0171) //How to use Hyperterminal of Windows
(0172) //    � Connect a 9 pin Male to Female (one to one RS232) Serial cable from PC's  serial port to EVAL board serial port.
(0173) //
(0174) //    � Setting up HyperTerminal in Windows.
(0175) //
(0176) //	Click Start -> All Programs -> Accessories -> Communication -> HyperTerminal
(0177) //
(0178) //    	- Enter a Name and select OK.
(0179) //    
(0180) //    	- In ConnectTo option
(0181) //        
(0182) //        - Select the 'Connect using' as COM1/COM2 in which the serial cable is connected 
(0183) //          and Click OK
(0184) //
(0185) //    	- In the COM2 properties
(0186) //    		- Bits per second 	= 19200
(0187) //    		- Data bits		    = 8
(0188) //    		- Parity			= None
(0189) //    		- Stop Bits		    = 1
(0190) //    		- Flow Control		= None
(0191) //
(0192) //		    click OK
(0193) //
(0194) //        - Further, click on File-Properties-Settings-Ascii Setup and
(0195) //           Enable "Echo typed characters locally" (The HyperTerminal should
(0196) //           in Disconnected mode while setting this option) 
(0197) //
(0198) //   Note: The Hyper Terminal should be in Connected mode before Running PSoC.
(0199) //--------------------------------------------------------------------------------------------------------------
(0200) 
(0201) #include <m8c.h>        // part specific constants and macros
(0202) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0203) #include <string.h>
(0204) #include <stddef.h>
(0205) void itoa(unsigned short input, char *str, int base);
(0206) void LCD_line_print(char *str, unsigned char line);
(0207) 
(0208) void itoa(unsigned short input, char *str, int base)
(0209) {
__UserModules_end|_itoa|__text_start|_itoa:
  digit                --> X+4
  n                    --> X+2
  d                    --> X+0
  base                 --> X-9
  str                  --> X-7
  input                --> X-5
    04FC: 10       PUSH  X
    04FD: 4F       MOV   X,SP
    04FE: 38 08    ADD   SP,0x8
(0210) 	int n = 0;
    0500: 56 03 00 MOV   [X+3],0x0
    0503: 56 02 00 MOV   [X+2],0x0
(0211) 	unsigned int d = 1;
    0506: 56 01 01 MOV   [X+1],0x1
    0509: 56 00 00 MOV   [X+0],0x0
    050C: 80 1A    JMP   0x0527
(0212) 	
(0213) 	while ((input / d) >= base)
(0214) 	{
(0215) 		d *= base;
    050E: 52 F7    MOV   A,[X-9]
    0510: 08       PUSH  A
    0511: 52 F8    MOV   A,[X-8]
    0513: 08       PUSH  A
    0514: 52 00    MOV   A,[X+0]
    0516: 08       PUSH  A
    0517: 52 01    MOV   A,[X+1]
    0519: 08       PUSH  A
    051A: 7C 07 21 LCALL 0x0721
    051D: 38 FC    ADD   SP,0xFC
    051F: 51 02    MOV   A,[__rX]
    0521: 54 01    MOV   [X+1],A
    0523: 51 01    MOV   A,[__rY]
    0525: 54 00    MOV   [X+0],A
(0216) 	}
    0527: 52 00    MOV   A,[X+0]
    0529: 08       PUSH  A
    052A: 52 01    MOV   A,[X+1]
    052C: 08       PUSH  A
    052D: 52 FB    MOV   A,[X-5]
    052F: 08       PUSH  A
    0530: 52 FC    MOV   A,[X-4]
    0532: 08       PUSH  A
    0533: 7C 06 EA LCALL 0x06EA
    0536: 18       POP   A
    0537: 53 05    MOV   [__r1],A
    0539: 18       POP   A
    053A: 53 06    MOV   [__r0],A
    053C: 38 FE    ADD   SP,0xFE
    053E: 51 05    MOV   A,[__r1]
    0540: 13 F8    SUB   A,[X-8]
    0542: 51 06    MOV   A,[__r0]
    0544: 1B F7    SBB   A,[X-9]
    0546: DF C7    JNC   0x050E
    0548: 80 AB    JMP   0x05F4
(0217) 	while (d != 0)
(0218) 	{
(0219) 		int digit = input / d;
    054A: 52 00    MOV   A,[X+0]
    054C: 08       PUSH  A
    054D: 52 01    MOV   A,[X+1]
    054F: 08       PUSH  A
    0550: 52 FB    MOV   A,[X-5]
    0552: 08       PUSH  A
    0553: 52 FC    MOV   A,[X-4]
    0555: 08       PUSH  A
    0556: 7C 06 EA LCALL 0x06EA
    0559: 18       POP   A
    055A: 53 05    MOV   [__r1],A
    055C: 18       POP   A
    055D: 53 06    MOV   [__r0],A
    055F: 38 FE    ADD   SP,0xFE
    0561: 51 05    MOV   A,[__r1]
    0563: 54 05    MOV   [X+5],A
    0565: 51 06    MOV   A,[__r0]
    0567: 54 04    MOV   [X+4],A
(0220) 		input %= d;
    0569: 52 00    MOV   A,[X+0]
    056B: 08       PUSH  A
    056C: 52 01    MOV   A,[X+1]
    056E: 08       PUSH  A
    056F: 52 FB    MOV   A,[X-5]
    0571: 08       PUSH  A
    0572: 52 FC    MOV   A,[X-4]
    0574: 08       PUSH  A
    0575: 7C 06 EA LCALL 0x06EA
    0578: 38 FE    ADD   SP,0xFE
    057A: 18       POP   A
    057B: 54 FC    MOV   [X-4],A
    057D: 18       POP   A
    057E: 54 FB    MOV   [X-5],A
(0221) 		d /= base;
    0580: 52 F7    MOV   A,[X-9]
    0582: 08       PUSH  A
    0583: 52 F8    MOV   A,[X-8]
    0585: 08       PUSH  A
    0586: 52 00    MOV   A,[X+0]
    0588: 08       PUSH  A
    0589: 52 01    MOV   A,[X+1]
    058B: 08       PUSH  A
    058C: 7C 06 EA LCALL 0x06EA
    058F: 18       POP   A
    0590: 54 01    MOV   [X+1],A
    0592: 18       POP   A
    0593: 54 00    MOV   [X+0],A
    0595: 38 FE    ADD   SP,0xFE
(0222) 		if (n || digit > 0 || d == 0)
    0597: 3D 02 00 CMP   [X+2],0x0
    059A: B0 20    JNZ   0x05BB
    059C: 3D 03 00 CMP   [X+3],0x0
    059F: B0 1B    JNZ   0x05BB
    05A1: 50 00    MOV   A,0x0
    05A3: 13 05    SUB   A,[X+5]
    05A5: 52 04    MOV   A,[X+4]
    05A7: 31 80    XOR   A,0x80
    05A9: 53 02    MOV   [__rX],A
    05AB: 50 80    MOV   A,0x80
    05AD: 1A 02    SBB   A,[__rX]
    05AF: C0 0B    JC    0x05BB
    05B1: 3D 00 00 CMP   [X+0],0x0
    05B4: B0 3F    JNZ   0x05F4
    05B6: 3D 01 00 CMP   [X+1],0x0
    05B9: B0 3A    JNZ   0x05F4
(0223) 		{
(0224) 			*str++ = digit + ((digit < 10)? '0': 'a' - 10);
    05BB: 52 FA    MOV   A,[X-6]
    05BD: 53 05    MOV   [__r1],A
    05BF: 52 F9    MOV   A,[X-7]
    05C1: 53 06    MOV   [__r0],A
    05C3: 51 05    MOV   A,[__r1]
    05C5: 01 01    ADD   A,0x1
    05C7: 54 FA    MOV   [X-6],A
    05C9: 51 06    MOV   A,[__r0]
    05CB: 09 00    ADC   A,0x0
    05CD: 54 F9    MOV   [X-7],A
    05CF: 52 05    MOV   A,[X+5]
    05D1: 11 0A    SUB   A,0xA
    05D3: 52 04    MOV   A,[X+4]
    05D5: 31 80    XOR   A,0x80
    05D7: 19 80    SBB   A,0x80
    05D9: D0 09    JNC   0x05E3
    05DB: 56 07 30 MOV   [X+7],0x30
    05DE: 56 06 00 MOV   [X+6],0x0
    05E1: 80 07    JMP   0x05E9
    05E3: 56 07 57 MOV   [X+7],0x57
    05E6: 56 06 00 MOV   [X+6],0x0
    05E9: 52 05    MOV   A,[X+5]
    05EB: 03 07    ADD   A,[X+7]
    05ED: 3F 05    MVI   [__r1],A
(0225) 			n++;
    05EF: 77 03    INC   [X+3]
    05F1: 0F 02 00 ADC   [X+2],0x0
(0226) 		}
(0227) 	}
    05F4: 3D 00 00 CMP   [X+0],0x0
    05F7: BF 52    JNZ   0x054A
    05F9: 3D 01 00 CMP   [X+1],0x0
    05FC: BF 4D    JNZ   0x054A
(0228) 	*++str = '\r';
    05FE: 52 FA    MOV   A,[X-6]
    0600: 01 01    ADD   A,0x1
    0602: 53 05    MOV   [__r1],A
    0604: 52 F9    MOV   A,[X-7]
    0606: 09 00    ADC   A,0x0
    0608: 53 06    MOV   [__r0],A
    060A: 51 05    MOV   A,[__r1]
    060C: 54 FA    MOV   [X-6],A
    060E: 51 06    MOV   A,[__r0]
    0610: 54 F9    MOV   [X-7],A
    0612: 50 0D    MOV   A,0xD
    0614: 3F 05    MVI   [__r1],A
(0229) 	*++str = '\n';
    0616: 52 FA    MOV   A,[X-6]
    0618: 01 01    ADD   A,0x1
    061A: 53 05    MOV   [__r1],A
    061C: 52 F9    MOV   A,[X-7]
    061E: 09 00    ADC   A,0x0
    0620: 53 06    MOV   [__r0],A
    0622: 51 05    MOV   A,[__r1]
    0624: 54 FA    MOV   [X-6],A
    0626: 51 06    MOV   A,[__r0]
    0628: 54 F9    MOV   [X-7],A
    062A: 50 0A    MOV   A,0xA
    062C: 3F 05    MVI   [__r1],A
(0230) 	*str = '\0';
    062E: 52 FA    MOV   A,[X-6]
    0630: 53 05    MOV   [__r1],A
    0632: 50 00    MOV   A,0x0
    0634: 3F 05    MVI   [__r1],A
    0636: 38 F8    ADD   SP,0xF8
    0638: 20       POP   X
    0639: 7F       RET   
(0231) }
(0232) 
(0233) void LCD_line_print(char *str, unsigned char line)
(0234) {
_LCD_line_print:
  line                 --> X-6
  str                  --> X-5
    063A: 10       PUSH  X
    063B: 4F       MOV   X,SP
(0235) 	static char buffer[17];
(0236) 	memset(buffer, ' ', 16);
    063C: 50 00    MOV   A,0x0
    063E: 08       PUSH  A
    063F: 50 10    MOV   A,0x10
    0641: 08       PUSH  A
    0642: 50 00    MOV   A,0x0
    0644: 08       PUSH  A
    0645: 50 20    MOV   A,0x20
    0647: 08       PUSH  A
    0648: 50 00    MOV   A,0x0
    064A: 08       PUSH  A
    064B: 50 09    MOV   A,0x9
    064D: 08       PUSH  A
    064E: 7C 07 7D LCALL _memset
    0651: 38 FA    ADD   SP,0xFA
(0237) 	memcpy(buffer, str, strlen(str));
    0653: 52 FB    MOV   A,[X-5]
    0655: 08       PUSH  A
    0656: 52 FC    MOV   A,[X-4]
    0658: 08       PUSH  A
    0659: 7C 07 AB LCALL _strlen
    065C: 51 06    MOV   A,[__r0]
    065E: 08       PUSH  A
    065F: 51 05    MOV   A,[__r1]
    0661: 08       PUSH  A
    0662: 52 FB    MOV   A,[X-5]
    0664: 08       PUSH  A
    0665: 52 FC    MOV   A,[X-4]
    0667: 08       PUSH  A
    0668: 50 00    MOV   A,0x0
    066A: 08       PUSH  A
    066B: 50 09    MOV   A,0x9
    066D: 08       PUSH  A
    066E: 7C 07 53 LCALL _memcpy
    0671: 38 F8    ADD   SP,0xF8
(0238) 	buffer[17] = '\0';
    0673: 55 1A 00 MOV   [str_buf+9],0x0
    0676: 20       POP   X
    0677: 7F       RET   
(0239) 	//LCD_1_Position(line, 0);
(0240) 	//LCD_1_PrString(buffer);
(0241) }
(0242) 
(0243) 
(0244) 
(0245) void welcomeScreen(void);	//Declaration of the function that prints Welcome String on Hyperterminal
(0246) 
(0247) void main(void)
(0248) {
_main:
  strPtr               --> X+3
  pressed              --> X+1
  bSwitchState         --> X+0
    0678: 10       PUSH  X
    0679: 4F       MOV   X,SP
    067A: 38 05    ADD   SP,0x5
(0249)     // Parameter pointer
(0250)     char *strPtr; 
(0251) 	// variable declaration
(0252) 	static char str_buf[30];
(0253) 	char bSwitchState;
(0254) 	unsigned int pressed = 0;
    067C: 56 02 00 MOV   [X+2],0x0
    067F: 56 01 00 MOV   [X+1],0x0
(0255)     
(0256)     // Initialize receiver/cmd buffer
(0257)     // UART_CmdReset(); 
(0258) 	
(0259) 	 //Turn on interrupts
(0260)     //M8C_EnableGInt ;
(0261)     
(0262)     //Enable RX interrupts
(0263)     //UART_IntCntl(UART_ENABLE_RX_INT);       
(0264)     //set parity as zero and start the UART 
(0265)     UART_Start(UART_PARITY_NONE);            
    0682: 10       PUSH  X
    0683: 50 00    MOV   A,0x0
    0685: 7C 03 73 LCALL _UART_Start
(0266) 
(0267)    
(0268)     //Clear the screen in Hyper terminal window
(0269)     UART_PutChar(12); 
    0688: 50 0C    MOV   A,0xC
    068A: 7C 03 E7 LCALL _UART_PutChar
    068D: 20       POP   X
(0270)     
(0271) 	// Print welcome screen
(0272) 	welcomeScreen();
    068E: 90 43    CALL  _welcomeScreen
(0273)     
(0274)     
(0275) 	
(0276) 	// init LCD module
(0277) 	//LCD_1_Start();
(0278) 	
(0279) 	
(0280) 	// infinite loop with debouncing.
(0281) 	bSwitchState = 0;
    0690: 56 00 00 MOV   [X+0],0x0
    0693: 80 38    JMP   0x06CC
(0282) 	while (1)
(0283) 	{
(0284) 		// print out
(0285) 		//tmp = TachTimer_wReadTimerSaveCV();
(0286) 		//strcpy(str_buf, line1_head);
(0287) 		//itoa((unsigned short)tmp, str_buf + strlen(line1_head), 10);
(0288) 		//LCD_line_print(str_buf, 0);
(0289) 		// FIXME: The sleep has a problem with the overall freq
(0290) 		//M8C_Sleep;
(0291) 		//INT_CLR0 = INT_CLR0 & ~0x40;
(0292) 		
(0293) 		// debouncing		
(0294) 		bSwitchState <<= 1;
    0695: 66 00    ASL   [X+0]
(0295) 		bSwitchState &= 0x0f;
    0697: 27 00 0F AND   [X+0],0xF
(0296) 		bSwitchState |= (PRT1DR & 0x01);
    069A: 5D 04    MOV   A,REG[0x4]
    069C: 21 01    AND   A,0x1
    069E: 2D 00    OR    [X+0],A
(0297) 		if(bSwitchState == 0x07)
    06A0: 3D 00 07 CMP   [X+0],0x7
    06A3: B0 28    JNZ   0x06CC
(0298) 		{			
(0299) 			// increase
(0300) 			++pressed;
    06A5: 77 02    INC   [X+2]
    06A7: 0F 01 00 ADC   [X+1],0x0
(0301) 			itoa(pressed, str_buf, 10);
    06AA: 50 00    MOV   A,0x0
    06AC: 08       PUSH  A
    06AD: 50 0A    MOV   A,0xA
    06AF: 08       PUSH  A
    06B0: 50 00    MOV   A,0x0
    06B2: 08       PUSH  A
    06B3: 50 1A    MOV   A,0x1A
    06B5: 08       PUSH  A
    06B6: 52 01    MOV   A,[X+1]
    06B8: 08       PUSH  A
    06B9: 52 02    MOV   A,[X+2]
    06BB: 08       PUSH  A
    06BC: 9E 3E    CALL  __UserModules_end|_itoa|__text_start|_itoa
    06BE: 38 FA    ADD   SP,0xFA
(0302) 			UART_PutString(str_buf);
    06C0: 10       PUSH  X
    06C1: 50 00    MOV   A,0x0
    06C3: 08       PUSH  A
    06C4: 50 1A    MOV   A,0x1A
    06C6: 5C       MOV   X,A
    06C7: 18       POP   A
    06C8: 7C 04 24 LCALL _UART_PutString
    06CB: 20       POP   X
(0303) 		}
(0304) 	}  
    06CC: 8F C8    JMP   0x0695
    06CE: 38 FB    ADD   SP,0xFB
    06D0: 20       POP   X
    06D1: 8F FF    JMP   0x06D1
(0305) }
(0306) 
(0307) // Function to print the welcome screen
(0308) void welcomeScreen(void)
(0309) {
(0310)     UART_CPutString("This is our wonderful ESE366 Project\n\r");
_welcomeScreen:
    06D3: 10       PUSH  X
    06D4: 50 01    MOV   A,0x1
    06D6: 08       PUSH  A
    06D7: 50 70    MOV   A,0x70
    06D9: 5C       MOV   X,A
    06DA: 18       POP   A
    06DB: 7C 04 6E LCALL _UART_CPutString
(0311)     UART_CPutString("Let's blow up the Prof. mind!\n\r");
    06DE: 50 01    MOV   A,0x1
(0312) }
(0313) 
    06E0: 08       PUSH  A
    06E1: 50 50    MOV   A,0x50
    06E3: 5C       MOV   X,A
    06E4: 18       POP   A
    06E5: 7C 04 6E LCALL _UART_CPutString
    06E8: 20       POP   X
    06E9: 7F       RET   
_memcpyLMM:
    0744: 62 D0 00 MOV   REG[0xD0],0x0
    0747: 10       PUSH  X
    0748: 4F       MOV   X,SP
    0749: 52 FB    MOV   A,[X-5]
    074B: 60 D5    MOV   REG[0xD5],A
    074D: 52 F9    MOV   A,[X-7]
    074F: 60 D4    MOV   REG[0xD4],A
    0751: 80 03    JMP   0x0755
_memcpy:
    0753: 10       PUSH  X
    0754: 4F       MOV   X,SP
    0755: 52 FC    MOV   A,[X-4]
    0757: 53 05    MOV   [__r1],A
    0759: 53 04    MOV   [__r2],A
    075B: 52 FB    MOV   A,[X-5]
    075D: 53 06    MOV   [__r0],A
    075F: 52 FA    MOV   A,[X-6]
    0761: 53 03    MOV   [__r3],A
    0763: 3D F8 00 CMP   [X-8],0x0
    0766: A0 09    JZ    0x0770
    0768: 7B F8    DEC   [X-8]
    076A: 3E 03    MVI   A,[__r3]
    076C: 3F 04    MVI   [__r2],A
    076E: 8F F4    JMP   0x0763
    0770: 20       POP   X
    0771: 7F       RET   
_memsetLMM:
    0772: 62 D0 00 MOV   REG[0xD0],0x0
    0775: 10       PUSH  X
    0776: 4F       MOV   X,SP
    0777: 52 FB    MOV   A,[X-5]
    0779: 60 D5    MOV   REG[0xD5],A
    077B: 80 03    JMP   0x077F
_memset:
    077D: 10       PUSH  X
    077E: 4F       MOV   X,SP
    077F: 52 FC    MOV   A,[X-4]
    0781: 53 05    MOV   [__r1],A
    0783: 53 04    MOV   [__r2],A
    0785: 52 FB    MOV   A,[X-5]
    0787: 53 06    MOV   [__r0],A
    0789: 52 FA    MOV   A,[X-6]
    078B: 80 08    JMP   0x0794
    078D: 3F 04    MVI   [__r2],A
    078F: 7B F8    DEC   [X-8]
    0791: 1F F7 00 SBB   [X-9],0x0
    0794: 3D F8 00 CMP   [X-8],0x0
    0797: BF F5    JNZ   0x078D
    0799: 3D F7 00 CMP   [X-9],0x0
    079C: BF F0    JNZ   0x078D
    079E: 20       POP   X
    079F: 7F       RET   
_strlenLMM:
    07A0: 62 D0 00 MOV   REG[0xD0],0x0
    07A3: 10       PUSH  X
    07A4: 4F       MOV   X,SP
    07A5: 52 FB    MOV   A,[X-5]
    07A7: 60 D4    MOV   REG[0xD4],A
    07A9: 80 03    JMP   0x07AD
_strlen:
    07AB: 10       PUSH  X
    07AC: 4F       MOV   X,SP
    07AD: 55 05 00 MOV   [__r1],0x0
    07B0: 55 06 00 MOV   [__r0],0x0
    07B3: 52 FC    MOV   A,[X-4]
    07B5: 53 04    MOV   [__r2],A
    07B7: 3E 04    MVI   A,[__r2]
    07B9: 39 00    CMP   A,0x0
    07BB: A0 08    JZ    0x07C4
    07BD: 76 05    INC   [__r1]
    07BF: 0E 06 00 ADC   [__r0],0x0
    07C2: 8F F4    JMP   0x07B7
    07C4: 20       POP   X
    07C5: 7F       RET   
