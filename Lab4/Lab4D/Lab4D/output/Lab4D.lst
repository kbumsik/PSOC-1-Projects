FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 06 2B LJMP  _FanPWM_ISR        (0149)     ljmp	_FanPWM_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 03 00 LJMP  _TachTimer_ISR     (0169)     ljmp	_TachTimer_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 42    MOV   A,0x42             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [_ramareas_end+182],0x0(0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+183],0x0(0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 0A MOV   REG[0xE0],0xA      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 99 LCALL 0x0299             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 18 1C MOV   [__r0],0x1C        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 18 42 CMP   [__r0],0x42        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 18    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 C2    MOV   X,0xC2             (0368)     mov  X,<__idata_start
00AC: 55 18 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 18 12 CMP   [__r0],0x12        (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 18    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 0A MOV   REG[0xE0],0xA      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 08 14 LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
01D4: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_lab4d_Bank1
                                        (0019) export LoadConfigTBL_lab4d_Bank0
                                        (0020) export LoadConfigTBL_lab4d_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_lab4d_Bank0:
                                        (0023) ;  Instance name FanPWM, User Module PWM8
                                        (0024) ;       Instance name FanPWM, Block Name PWM8(DBB00)
                                        (0025) 	db		23h, 00h		;FanPWM_CONTROL_REG(DBB00CR0)
                                        (0026) 	db		21h, ffh		;FanPWM_PERIOD_REG(DBB00DR1)
                                        (0027) 	db		22h, 00h		;FanPWM_COMPARE_REG(DBB00DR2)
                                        (0028) ;  Instance name LCD_1, User Module LCD
                                        (0029) ;  Instance name TachTimer, User Module Timer16
                                        (0030) ;       Instance name TachTimer, Block Name TIMER16_LSB(DBB10)
                                        (0031) 	db		33h, 00h		;TachTimer_CONTROL_LSB_REG(DBB10CR0)
                                        (0032) 	db		31h, ffh		;TachTimer_PERIOD_LSB_REG(DBB10DR1)
                                        (0033) 	db		32h, 00h		;TachTimer_COMPARE_LSB_REG(DBB10DR2)
                                        (0034) ;       Instance name TachTimer, Block Name TIMER16_MSB(DBB11)
                                        (0035) 	db		37h, 06h		;TachTimer_CONTROL_MSB_REG(DBB11CR0)
                                        (0036) 	db		35h, ffh		;TachTimer_PERIOD_MSB_REG(DBB11DR1)
                                        (0037) 	db		36h, 00h		;TachTimer_COMPARE_MSB_REG(DBB11DR2)
                                        (0038) ;  Global Register values Bank 0
                                        (0039) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0040) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0041) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0042) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0043) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0044) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0045) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0046) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0047) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0048) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0049) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0050) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0051) 	db		b5h, 88h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0052) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0053) 	db		b8h, 65h		; Row_1_InputMux register (RDI1RI)
                                        (0054) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0055) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0056) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0057) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0058) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0059) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0060) 	db		ffh
                                        (0061) LoadConfigTBL_lab4d_Bank1:
                                        (0062) ;  Instance name FanPWM, User Module PWM8
                                        (0063) ;       Instance name FanPWM, Block Name PWM8(DBB00)
                                        (0064) 	db		20h, 31h		;FanPWM_FUNC_REG(DBB00FN)
                                        (0065) 	db		21h, 11h		;FanPWM_INPUT_REG(DBB00IN)
                                        (0066) 	db		22h, 74h		;FanPWM_OUTPUT_REG(DBB00OU)
                                        (0067) ;  Instance name LCD_1, User Module LCD
                                        (0068) ;  Instance name TachTimer, User Module Timer16
                                        (0069) ;       Instance name TachTimer, Block Name TIMER16_LSB(DBB10)
                                        (0070) 	db		30h, 00h		;TachTimer_FUNC_LSB_REG(DBB10FN)
                                        (0071) 	db		31h, e5h		;TachTimer_INPUT_LSB_REG(DBB10IN)
                                        (0072) 	db		32h, 40h		;TachTimer_OUTPUT_LSB_REG(DBB10OU)
                                        (0073) ;       Instance name TachTimer, Block Name TIMER16_MSB(DBB11)
                                        (0074) 	db		34h, 20h		;TachTimer_FUNC_MSB_REG(DBB11FN)
                                        (0075) 	db		35h, 35h		;TachTimer_INPUT_MSB_REG(DBB11IN)
                                        (0076) 	db		36h, 40h		;TachTimer_OUTPUT_MSB_REG(DBB11OU)
                                        (0077) ;  Global Register values Bank 1
                                        (0078) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0079) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0080) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0081) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0082) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0083) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0084) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0085) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0086) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0087) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0088) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0089) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0090) 	db		e1h, 72h		; OscillatorControl_1 register (OSC_CR1)
                                        (0091) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0092) 	db		dfh, 5dh		; OscillatorControl_3 register (OSC_CR3)
                                        (0093) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0094) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0095) 	db		ffh
                                        (0096) AREA psoc_config(rom, rel)
                                        (0097) LoadConfigTBL_lab4d_Ordered:
                                        (0098) ;  Ordered Global Register values
                                        (0099) 	M8C_SetBank0
01D6: 62 00 00 MOV   REG[0x0],0x0       (0100) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01D9: 71 10    OR    F,0x10             
                                        (0101) 	M8C_SetBank1
01DB: 62 00 00 MOV   REG[0x0],0x0       (0102) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
01DE: 62 01 FF MOV   REG[0x1],0xFF      (0103) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
01E1: 70 EF    AND   F,0xEF             
                                        (0104) 	M8C_SetBank0
01E3: 62 03 FF MOV   REG[0x3],0xFF      (0105) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
01E6: 62 02 00 MOV   REG[0x2],0x0       (0106) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01E9: 71 10    OR    F,0x10             
                                        (0107) 	M8C_SetBank1
01EB: 62 02 00 MOV   REG[0x2],0x0       (0108) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01EE: 62 03 00 MOV   REG[0x3],0x0       (0109) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01F1: 70 EF    AND   F,0xEF             
                                        (0110) 	M8C_SetBank0
01F3: 62 01 00 MOV   REG[0x1],0x0       (0111) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01F6: 62 04 00 MOV   REG[0x4],0x0       (0112) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01F9: 71 10    OR    F,0x10             
                                        (0113) 	M8C_SetBank1
01FB: 62 04 D0 MOV   REG[0x4],0xD0      (0114) 	mov	reg[04h], d0h		; Port_1_DriveMode_0 register (PRT1DM0)
01FE: 62 05 2E MOV   REG[0x5],0x2E      (0115) 	mov	reg[05h], 2eh		; Port_1_DriveMode_1 register (PRT1DM1)
0201: 70 EF    AND   F,0xEF             
                                        (0116) 	M8C_SetBank0
0203: 62 07 3A MOV   REG[0x7],0x3A      (0117) 	mov	reg[07h], 3ah		; Port_1_DriveMode_2 register (PRT1DM2)
0206: 62 06 14 MOV   REG[0x6],0x14      (0118) 	mov	reg[06h], 14h		; Port_1_GlobalSelect register (PRT1GS)
0209: 71 10    OR    F,0x10             
                                        (0119) 	M8C_SetBank1
020B: 62 06 00 MOV   REG[0x6],0x0       (0120) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
020E: 62 07 00 MOV   REG[0x7],0x0       (0121) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0211: 70 EF    AND   F,0xEF             
                                        (0122) 	M8C_SetBank0
0213: 62 05 00 MOV   REG[0x5],0x0       (0123) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0216: 62 08 00 MOV   REG[0x8],0x0       (0124) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0219: 71 10    OR    F,0x10             
                                        (0125) 	M8C_SetBank1
021B: 62 08 7F MOV   REG[0x8],0x7F      (0126) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
021E: 62 09 80 MOV   REG[0x9],0x80      (0127) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0221: 70 EF    AND   F,0xEF             
                                        (0128) 	M8C_SetBank0
0223: 62 0B 80 MOV   REG[0xB],0x80      (0129) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0226: 62 0A 00 MOV   REG[0xA],0x0       (0130) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0229: 71 10    OR    F,0x10             
                                        (0131) 	M8C_SetBank1
022B: 62 0A 00 MOV   REG[0xA],0x0       (0132) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
022E: 62 0B 00 MOV   REG[0xB],0x0       (0133) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0231: 70 EF    AND   F,0xEF             
                                        (0134) 	M8C_SetBank0
0233: 62 09 00 MOV   REG[0x9],0x0       (0135) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0236: 62 0C 00 MOV   REG[0xC],0x0       (0136) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0239: 71 10    OR    F,0x10             
                                        (0137) 	M8C_SetBank1
023B: 62 0C 00 MOV   REG[0xC],0x0       (0138) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
023E: 62 0D 00 MOV   REG[0xD],0x0       (0139) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0241: 70 EF    AND   F,0xEF             
                                        (0140) 	M8C_SetBank0
0243: 62 0F 00 MOV   REG[0xF],0x0       (0141) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0246: 62 0E 00 MOV   REG[0xE],0x0       (0142) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0249: 71 10    OR    F,0x10             
                                        (0143) 	M8C_SetBank1
024B: 62 0E 00 MOV   REG[0xE],0x0       (0144) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
024E: 62 0F 00 MOV   REG[0xF],0x0       (0145) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0251: 70 EF    AND   F,0xEF             
                                        (0146) 	M8C_SetBank0
0253: 62 0D 00 MOV   REG[0xD],0x0       (0147) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0256: 62 10 00 MOV   REG[0x10],0x0      (0148) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0259: 71 10    OR    F,0x10             
                                        (0149) 	M8C_SetBank1
025B: 62 10 00 MOV   REG[0x10],0x0      (0150) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
025E: 62 11 00 MOV   REG[0x11],0x0      (0151) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0261: 70 EF    AND   F,0xEF             
                                        (0152) 	M8C_SetBank0
0263: 62 13 00 MOV   REG[0x13],0x0      (0153) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0266: 62 12 00 MOV   REG[0x12],0x0      (0154) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0269: 71 10    OR    F,0x10             
                                        (0155) 	M8C_SetBank1
026B: 62 12 00 MOV   REG[0x12],0x0      (0156) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
026E: 62 13 00 MOV   REG[0x13],0x0      (0157) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0271: 70 EF    AND   F,0xEF             
                                        (0158) 	M8C_SetBank0
0273: 62 11 00 MOV   REG[0x11],0x0      (0159) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0276: 62 14 00 MOV   REG[0x14],0x0      (0160) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0279: 71 10    OR    F,0x10             
                                        (0161) 	M8C_SetBank1
027B: 62 14 00 MOV   REG[0x14],0x0      (0162) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
027E: 62 15 00 MOV   REG[0x15],0x0      (0163) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0281: 70 EF    AND   F,0xEF             
                                        (0164) 	M8C_SetBank0
0283: 62 17 00 MOV   REG[0x17],0x0      (0165) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0286: 62 16 00 MOV   REG[0x16],0x0      (0166) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0289: 71 10    OR    F,0x10             
                                        (0167) 	M8C_SetBank1
028B: 62 16 00 MOV   REG[0x16],0x0      (0168) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
028E: 62 17 00 MOV   REG[0x17],0x0      (0169) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0291: 70 EF    AND   F,0xEF             
                                        (0170) 	M8C_SetBank0
0293: 62 15 00 MOV   REG[0x15],0x0      (0171) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0296: 70 EF    AND   F,0xEF             
                                        (0172) 	M8C_SetBank0
0298: 7F       RET                      (0173) 	ret
                                        (0174) 
                                        (0175) 
                                        (0176) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_lab4d
                                        (0026) export _LoadConfig_lab4d
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0299: 55 19 00 MOV   [0x19],0x0         (0065) 	mov		[Port_2_Data_SHADE], 0h
029C: 55 1A 7F MOV   [0x1A],0x7F        (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
029F: 55 1B 80 MOV   [0x1B],0x80        (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
02A2: 7C 02 A9 LCALL 0x02A9             (0069) 	lcall	LoadConfig_lab4d
02A5: 7C 01 D4 LCALL 0x01D4             (0070) 	lcall	LoadConfigTBL_lab4d_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
02A8: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration lab4d
                                        (0078) ;
                                        (0079) ;    Load configuration registers for lab4d.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_lab4d:
                                        (0096)  LoadConfig_lab4d:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
02A9: 10       PUSH  X                  (0099) 	push	x
02AA: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
02AC: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
02AE: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
02AF: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_lab4d_Bank0
02B1: 57 50    MOV   X,0x50             (0105)     mov     X, <LoadConfigTBL_lab4d_Bank0
02B3: 7C 02 C4 LCALL 0x02C4             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
02B6: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
02B8: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
02B9: 50 01    MOV   A,0x1              (0111)     mov     A, >LoadConfigTBL_lab4d_Bank1
02BB: 57 8D    MOV   X,0x8D             (0112)     mov     X, <LoadConfigTBL_lab4d_Bank1
02BD: 7C 02 C4 LCALL 0x02C4             (0113)     lcall   LoadConfig              ; Load the bank 1 values
02C0: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
02C2: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
02C3: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
02C4: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
02C6: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
02C7: 08       PUSH  A                  (0143)     push    A
02C8: 4F       MOV   X,SP               (0144)     mov     X, SP
02C9: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
02CC: D0 04    JNC   0x02D1             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02CE: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
02D1: 18       POP   A                  (0149)     pop     A
02D2: 20       POP   X                  (0150)     pop     X
02D3: 70 EF    AND   F,0xEF             
02D5: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02D8: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
02D9: 08       PUSH  A                  (0156)     push    A
02DA: 28       ROMX                     (0157)     romx                            ; Load register address from table
02DB: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
02DD: A0 1F    JZ    0x02FD             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
02DF: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
02E0: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
02E3: A0 03    JZ    0x02E7             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
02E5: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
02E7: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
02E9: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
02EA: 20       POP   X                  (0167)     pop     X
02EB: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
02EC: 09 00    ADC   A,0x0              (0169)     adc     A, 0
02EE: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
02EF: 08       PUSH  A                  (0171)     push    A
02F0: 28       ROMX                     (0172)     romx                            ; load config data from the table
02F1: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
02F2: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
02F4: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
02F6: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
02F7: 20       POP   X                  (0177)     pop     X
02F8: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
02F9: 09 00    ADC   A,0x0              (0179)     adc     A, 0
02FB: 8F D7    JMP   0x02D3             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
02FD: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
02FF: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\tachtimerint.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TachTimerINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "TachTimer.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _TachTimer_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _TachTimer_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _TachTimer_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
0300: 76 0E    INC   [cNumCycles]       (0074)    inc [_cNumCycles];
0302: 3C 0E 00 CMP   [cNumCycles],0x0   (0075)    cmp [_cNumCycles], 0
0305: B0 0B    JNZ   0x0311             (0076)    jnz CaptureLastValue
0307: 80 01    JMP   0x0309             (0077)    jmp CaptureFirstValue
                                        (0078) CaptureFirstValue:
0309: 7C 03 3B LCALL _wTachTimer_ReadCounter|wTachTimer_ReadTimerSaveCV|TachTimer_wReadTimerSaveCV|_wTachTimer_ReadTimerSaveCV|_TachTimer_wReadTimerSaveCV(0079)    lcall  TachTimer_wReadTimerSaveCV
030C: 5A 40    MOV   [wFirstValue],X    (0080)    mov   [_wFirstValue], X
030E: 53 41    MOV   [wFirstValue+1],A  (0081)    mov   [_wFirstValue + 1], A
0310: 7E       RETI                     (0082)    reti
                                        (0083) CaptureLastValue:
0311: 7C 03 3B LCALL _wTachTimer_ReadCounter|wTachTimer_ReadTimerSaveCV|TachTimer_wReadTimerSaveCV|_wTachTimer_ReadTimerSaveCV|_TachTimer_wReadTimerSaveCV(0084)    lcall  TachTimer_wReadTimerSaveCV
0314: 5A 3E    MOV   [wLastValue],X     (0085)    mov   [_wLastValue], X
0316: 53 3F    MOV   [wLastValue+1],A   (0086)    mov   [_wLastValue + 1], A
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ; Insert a lcall to a C function below this banner
                                        (0089)    ; and un-comment the lines between these banners
                                        (0090)    ;---------------------------------------------------
                                        (0091)    
                                        (0092)    ;PRESERVE_CPU_CONTEXT
                                        (0093)    ;lcall _My_C_Function
                                        (0094)    ;RESTORE_CPU_CONTEXT
                                        (0095)    
                                        (0096)    ;---------------------------------------------------
                                        (0097)    ; Insert a lcall to a C function above this banner
                                        (0098)    ; and un-comment the lines between these banners
                                        (0099)    ;---------------------------------------------------
                                        (0100)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0101) 
0318: 7E       RETI                     (0102)    reti
                                        (0103) 
                                        (0104) 
                                        (0105) ; end of file TachTimerINT.asm
FILE: lib\tachtimer.asm                 (0001) ;;*****************************************************************************
0319: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TachTimer.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "TachTimer.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  TachTimer_EnableInt
                                        (0030) export _TachTimer_EnableInt
                                        (0031) export  TachTimer_DisableInt
                                        (0032) export _TachTimer_DisableInt
                                        (0033) export  TachTimer_Start
                                        (0034) export _TachTimer_Start
                                        (0035) export  TachTimer_Stop
                                        (0036) export _TachTimer_Stop
                                        (0037) export  TachTimer_WritePeriod
                                        (0038) export _TachTimer_WritePeriod
                                        (0039) export  TachTimer_WriteCompareValue
                                        (0040) export _TachTimer_WriteCompareValue
                                        (0041) export  TachTimer_wReadCompareValue
                                        (0042) export _TachTimer_wReadCompareValue
                                        (0043) export  TachTimer_wReadTimer
                                        (0044) export _TachTimer_wReadTimer
                                        (0045) export  TachTimer_wReadTimerSaveCV
                                        (0046) export _TachTimer_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTachTimer_ReadCompareValue  ; deprecated
                                        (0051) export _wTachTimer_ReadCompareValue  ; deprecated
                                        (0052) export  wTachTimer_ReadTimer         ; deprecated
                                        (0053) export _wTachTimer_ReadTimer         ; deprecated
                                        (0054) export  wTachTimer_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTachTimer_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTachTimer_ReadCounter       ; obsolete
                                        (0058) export _wTachTimer_ReadCounter       ; obsolete
                                        (0059) export  wTachTimer_CaptureCounter    ; obsolete
                                        (0060) export _wTachTimer_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA lab4d_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: TachTimer_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  TachTimer_EnableInt:
                                        (0098) _TachTimer_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    TachTimer_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
031C: 7F       RET                      (0102)    ret
031D: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: TachTimer_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  TachTimer_DisableInt:
                                        (0126) _TachTimer_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    TachTimer_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0320: 7F       RET                      (0130)    ret
0321: 43 33 01 OR    REG[0x33],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: TachTimer_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  TachTimer_Start:
                                        (0154) _TachTimer_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    TachTimer_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0324: 7F       RET                      (0158)    ret
0325: 41 33 FE AND   REG[0x33],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: TachTimer_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  TachTimer_Stop:
                                        (0182) _TachTimer_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    TachTimer_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0328: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: TachTimer_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  TachTimer_WritePeriod:
                                        (0211) _TachTimer_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0329: 60 31    MOV   REG[0x31],A        (0213)    mov   reg[TachTimer_PERIOD_LSB_REG], A
032B: 5B       MOV   A,X                (0214)    mov   A, X
032C: 60 35    MOV   REG[0x35],A        (0215)    mov   reg[TachTimer_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
032E: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: TachTimer_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call TachTimer_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  TachTimer_WriteCompareValue:
                                        (0243) _TachTimer_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
032F: 60 32    MOV   REG[0x32],A        (0245)    mov   reg[TachTimer_COMPARE_LSB_REG], A
0331: 5B       MOV   A,X                (0246)    mov   A, X
0332: 60 36    MOV   REG[0x36],A        (0247)    mov   reg[TachTimer_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0334: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: TachTimer_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  TachTimer_wReadCompareValue:
                                        (0272) _TachTimer_wReadCompareValue:
                                        (0273)  wTachTimer_ReadCompareValue:                    ; this name deprecated
                                        (0274) _wTachTimer_ReadCompareValue:                    ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0335: 5D 36    MOV   A,REG[0x36]        (0276)    mov   A, reg[TachTimer_COMPARE_MSB_REG]
0337: 5C       MOV   X,A                (0277)    mov   X, A
0338: 5D 32    MOV   A,REG[0x32]        (0278)    mov   A, reg[TachTimer_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
033A: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: TachTimer_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  TachTimer_wReadTimerSaveCV:
                                        (0321) _TachTimer_wReadTimerSaveCV:
                                        (0322)  wTachTimer_ReadTimerSaveCV:                     ; this name deprecated
                                        (0323) _wTachTimer_ReadTimerSaveCV:                     ; this name deprecated
                                        (0324)  wTachTimer_ReadCounter:                         ; this name deprecated
                                        (0325) _wTachTimer_ReadCounter:                         ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
033B: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
033C: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
033E: 5D 33    MOV   A,REG[0x33]        (0334)    mov   A, reg[TachTimer_CONTROL_LSB_REG]       ; save the Control register
0340: 08       PUSH  A                  (0335)    push  A
0341: 5D 32    MOV   A,REG[0x32]        (0336)    mov   A, reg[TachTimer_COMPARE_LSB_REG]       ; save the Compare register
0343: 08       PUSH  A                  (0337)    push  A
0344: 5D 36    MOV   A,REG[0x36]        (0338)    mov   A, reg[TachTimer_COMPARE_MSB_REG]
0346: 08       PUSH  A                  (0339)    push  A
0347: 5D 30    MOV   A,REG[0x30]        (0340)    mov   A, reg[TachTimer_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
0349: 5D 36    MOV   A,REG[0x36]        (0342)    mov   A, reg[TachTimer_COMPARE_MSB_REG]       ; Now grab DR2 (DR0) and save
034B: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
034D: 5D 32    MOV   A,REG[0x32]        (0344)    mov   A, reg[TachTimer_COMPARE_LSB_REG]
034F: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0351: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0353: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0356: A0 03    JZ    0x035A             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0358: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
035A: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
035C: 70 FE    AND   F,0xFE             
035E: 41 33 FE AND   REG[0x33],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    TachTimer_Stop_M                              ; Disable (stop) the timer
0361: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0362: 60 36    MOV   REG[0x36],A        (0355)    mov   reg[TachTimer_COMPARE_MSB_REG], A
0364: 18       POP   A                  (0356)    pop   A
0365: 60 32    MOV   REG[0x32],A        (0357)    mov   reg[TachTimer_COMPARE_LSB_REG], A
0367: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
0368: 60 33    MOV   REG[0x33],A        (0359)    mov   reg[TachTimer_CONTROL_LSB_REG], A
036A: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
036B: 20       POP   X                  (0361)    pop   X
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
036C: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: TachTimer_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  TachTimer_wReadTimer:
                                        (0397) _TachTimer_wReadTimer:
                                        (0398)  wTachTimer_ReadTimer:                           ; this name deprecated
                                        (0399) _wTachTimer_ReadTimer:                           ; this name deprecated
                                        (0400)  wTachTimer_CaptureCounter:                      ; this name deprecated
                                        (0401) _wTachTimer_CaptureCounter:                      ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
036D: 5D 30    MOV   A,REG[0x30]        (0404)    mov   A, reg[TachTimer_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
036F: 5D 36    MOV   A,REG[0x36]        (0407)    mov   A, reg[TachTimer_COMPARE_MSB_REG]       ; Return DR2 (actually DR0)
0371: 5C       MOV   X,A                (0408)    mov   X, A
0372: 5D 32    MOV   A,REG[0x32]        (0409)    mov   A, reg[TachTimer_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0374: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File TachTimer.asm
FILE: lib\lcd_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_1.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_1.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_1_Start
                                        (0044) export  _LCD_1_Start
                                        (0045) export   LCD_1_Init
                                        (0046) export  _LCD_1_Init
                                        (0047) 
                                        (0048) export   LCD_1_WriteData
                                        (0049) export  _LCD_1_WriteData
                                        (0050) 
                                        (0051) export   LCD_1_Control
                                        (0052) export  _LCD_1_Control
                                        (0053) 
                                        (0054) export  LCD_1_PrString
                                        (0055) export _LCD_1_PrString
                                        (0056) 
                                        (0057) export  LCD_1_PrCString
                                        (0058) export _LCD_1_PrCString
                                        (0059) 
                                        (0060) export  LCD_1_Position
                                        (0061) export _LCD_1_Position
                                        (0062) 
                                        (0063) export  LCD_1_PrHexByte
                                        (0064) export _LCD_1_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_1_PrHexInt
                                        (0067) export _LCD_1_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_1_Delay50uTimes
                                        (0070) export _LCD_1_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_1_Delay50u
                                        (0073) export _LCD_1_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0081) export  LCD_1_InitBG
                                        (0082) export _LCD_1_InitBG
                                        (0083) 
                                        (0084) export  LCD_1_InitVBG
                                        (0085) export _LCD_1_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_1_DrawVBG and
                                        (0090) ;    LCD_1_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_1_DrawVBG
                                        (0112) export _LCD_1_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_1_DrawVBG
                                        (0117) export  LCD_1_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_1_Write_Data
                                        (0127) export  _LCD_1_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_1_Port:           equ    PRT2DR
                                        (0135) LCD_1_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_1_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_1_E:              equ    10h
                                        (0139) LCD_1_RW:             equ    40h
                                        (0140) LCD_1_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_1_DATA_MASK:      equ    0Fh
                                        (0143) LCD_1_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                        (0146) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                        (0147) LCD_1_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_1_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_1_DISP_INC:       equ    03h
                                        (0151) LCD_1_DISP_OFF:       equ    08h
                                        (0152) LCD_1_DISP_ON:        equ    0Ch
                                        (0153) LCD_1_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_1_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_1_PrCString:
                                        (0205) _LCD_1_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0375: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0376: 10       PUSH  X                  (0209)     push  X
0377: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0378: B0 04    JNZ   0x037D             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
037A: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
037B: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
037C: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
037D: 90 3C    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data|_LCD_1_WriteData(0218)     call  LCD_1_WriteData              ; Write data to LCD
037F: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0380: 18       POP   A                  (0220)     pop   A
0381: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0382: DF F2    JNC   _LCD_1_PrCString   (0222)     jnc   .Loop_PrCString
0384: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0385: 8F EF    JMP   _LCD_1_PrCString   (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_1_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_1_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_1_PrHexByte:
                                        (0258) _LCD_1_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0397: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0398: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0399: 67       ASR   A                  (0262)     asr   A
039A: 67       ASR   A                  (0263)     asr   A
039B: 67       ASR   A                  (0264)     asr   A
039C: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
039E: FF E7    INDEX LCD_1_HEX_STR      (0266)     index LCD_1_HEX_STR                  ; Get Hex value
03A0: 90 19    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data|_LCD_1_WriteData(0267)     call  LCD_1_WriteData              ; Write data to screen
03A2: 18       POP   A                  (0268)     pop   A                            ; Restore value
03A3: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
03A5: FF E0    INDEX LCD_1_HEX_STR      (0270)     index LCD_1_HEX_STR                  ; Get Hex value
03A7: 90 12    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data|_LCD_1_WriteData(0271)     call  LCD_1_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
03A9: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_1_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_1_PrHexInt:
                                        (0303) _LCD_1_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
03AA: 4B       SWAP  A,X                (0305)     swap  A,X
03AB: 9F EA    CALL  _LCD_1_PrHexByte   (0306)     call  LCD_1_PrHexByte              ; Print MSB
03AD: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
03AE: 9F E7    CALL  _LCD_1_PrHexByte   (0308)     call  LCD_1_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
03B0: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_1_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_1_PrString:
                                        (0342) _LCD_1_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
03B1: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
03B3: A0 06    JZ    0x03BA             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_1_writeData is known not to modify X so no need to preserve
03B5: 90 04    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data|_LCD_1_WriteData(0349)     call  LCD_1_WriteData              ; Write data to screen
03B7: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
03B8: 8F F8    JMP   _LCD_1_PrString    (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
03BA: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_1_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_1_WriteData:
                                        (0382) _LCD_1_WriteData:
                                        (0383)  LCD_1_Write_Data:   ; Do not use
                                        (0384) _LCD_1_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
03BB: 90 5F    CALL  0x041C             (0386)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_1_Check_Ready
03BD: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
03BE: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
03BF: 67       ASR   A                  (0390)     asr   A
03C0: 67       ASR   A                  (0391)     asr   A
03C1: 67       ASR   A                  (0392)     asr   A
03C2: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
03C4: 90 38    CALL  0x03FE             (0394)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
03C6: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
03C7: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
03C9: 40       NOP                      (0397)     nop
03CA: 40       NOP                      (0398)     nop
03CB: 40       NOP                      (0399)     nop
03CC: 90 30    CALL  0x03FE             (0400)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
03CE: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_1_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_1_Control:
                                        (0430) _LCD_1_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
03CF: 90 4B    CALL  0x041C             (0432)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_1_Check_Ready
03D1: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
03D2: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
03D3: 67       ASR   A                  (0436)     asr   A
03D4: 67       ASR   A                  (0437)     asr   A
03D5: 67       ASR   A                  (0438)     asr   A
03D6: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
03D8: 90 09    CALL  0x03E3             (0440)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
03DA: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
03DB: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
03DD: 40       NOP                      (0443)     nop
03DE: 40       NOP                      (0444)     nop
03DF: 40       NOP                      (0445)     nop
03E0: 90 01    CALL  0x03E3             (0446)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
03E2: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_1_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
03E3: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
03E4: 26 19 80 AND   [0x19],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
03E7: 51 19    MOV   A,[0x19]           (0480)     mov   A,[Port_2_Data_SHADE]
03E9: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                        (0482) 
03EB: 18       POP   A                  (0483)     pop   A
03EC: 21 0F    AND   A,0xF              (0484)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
03EE: 29 10    OR    A,0x10             (0485)     or    A,LCD_1_E                              ; Bring "E" Enable line high
03F0: 2A 19    OR    A,[0x19]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
03F2: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_1_Port], A                     ; Write data
03F4: 53 19    MOV   [0x19],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
03F6: 40       NOP                      (0489)     nop
03F7: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
03F9: 53 19    MOV   [0x19],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
03FB: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_1_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
03FD: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_1_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
03FE: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
03FF: 26 19 80 AND   [0x19],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
0402: 2E 19 20 OR    [0x19],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
0405: 51 19    MOV   A,[0x19]           (0527)     mov   A,[Port_2_Data_SHADE]
0407: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_1_Port],A
                                        (0529) 
0409: 18       POP   A                  (0530)     pop   A
040A: 21 0F    AND   A,0xF              (0531)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
040C: 29 30    OR    A,0x30             (0532)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
040E: 2A 19    OR    A,[0x19]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0410: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_1_Port], A                            ; Write data
0412: 53 19    MOV   [0x19],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0414: 40       NOP                      (0536)     NOP
0415: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
0417: 53 19    MOV   [0x19],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0419: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_1_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
041B: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_1_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_1_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
041C: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
041D: 26 19 80 AND   [0x19],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
0420: 51 19    MOV   A,[0x19]           (0574)     mov   A,[Port_2_Data_SHADE]
0422: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                        (0576) 
0424: 26 1A F0 AND   [0x1A],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
0427: 51 1A    MOV   A,[0x1A]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0429: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
042B: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
042D: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
042F: 2E 19 40 OR    [0x19],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
0432: 51 19    MOV   A,[0x19]           (0584)     mov   A,[Port_2_Data_SHADE]
0434: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_1_Port],A
0436: 40       NOP                      (0586)     NOP
                                        (0587) 
0437: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0438: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
043A: 2E 19 50 OR    [0x19],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
043D: 51 19    MOV   A,[0x19]           (0593)     mov   A,[Port_2_Data_SHADE]
043F: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_1_Port],A
                                        (0595) 
0441: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0442: 40       NOP                      (0597)     nop
0443: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_1_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0445: 08       PUSH  A                  (0610)     push  A
0446: 26 19 C0 AND   [0x19],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
0449: 51 19    MOV   A,[0x19]           (0612)     mov   A,[Port_2_Data_SHADE]
044B: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_1_Port],A
                                        (0614) 
044D: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
044E: 40       NOP                      (0616)     nop                                    ; fastest PSoC
044F: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0450: 2E 19 50 OR    [0x19],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
0453: 51 19    MOV   A,[0x19]           (0620)     mov   A,[Port_2_Data_SHADE]
0455: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_1_Port],A
                                        (0622) 
0457: 40       NOP                      (0623)     nop
0458: 40       NOP                      (0624)     nop
                                        (0625) 
0459: 26 19 C0 AND   [0x19],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
045C: 51 19    MOV   A,[0x19]           (0627)     mov   A,[Port_2_Data_SHADE]
045E: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_1_Port],A
                                        (0629) 
0460: 18       POP   A                  (0630)     pop   A
0461: 21 08    AND   A,0x8              (0631)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                        (0632) 
0463: A0 04    JZ    0x0468             (0633)     jz    .UNLOCK
0465: 79       DEC   X                  (0634)     dec   X
0466: BF D3    JNZ   0x043A             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0468: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0469: 2E 1A 7F OR    [0x1A],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
046C: 51 1A    MOV   A,[0x1A]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
046E: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0470: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
0472: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0474: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0475: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_1_Start
                                        (0652) ;  FUNCTION NAME: LCD_1_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_1_Start:
                                        (0679) _LCD_1_Start:
                                        (0680)  LCD_1_Init:
                                        (0681) _LCD_1_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0476: 26 1A 80 AND   [0x1A],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
0479: 2E 1A 7F OR    [0x1A],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
047C: 26 1B 80 AND   [0x1B],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
047F: 51 1A    MOV   A,[0x1A]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0481: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0483: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
0485: 51 1B    MOV   A,[0x1B]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0487: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_1_PortMode1],A
0489: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
048B: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
048D: 90 63    CALL  _LCD_1_Delay50uTimes(0697)     call  LCD_1_Delay50uTimes
048F: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0491: 90 5F    CALL  _LCD_1_Delay50uTimes(0699)     call  LCD_1_Delay50uTimes
                                        (0700) 
0493: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0495: 9F 4C    CALL  0x03E3             (0702)     call  LCD_1_WCNTL_Nibble
                                        (0703) 
0497: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0499: 90 57    CALL  _LCD_1_Delay50uTimes(0705)     call  LCD_1_Delay50uTimes
                                        (0706) 
049B: 50 03    MOV   A,0x3              (0707)     mov   A,03h
049D: 9F 44    CALL  0x03E3             (0708)     call  LCD_1_WCNTL_Nibble
                                        (0709) 
049F: 90 5F    CALL  _LCD_1_Delay50u    (0710)     call  LCD_1_Delay50u
04A1: 90 5D    CALL  _LCD_1_Delay50u    (0711)     call  LCD_1_Delay50u
04A3: 90 5B    CALL  _LCD_1_Delay50u    (0712)     call  LCD_1_Delay50u
                                        (0713) 
04A5: 50 03    MOV   A,0x3              (0714)     mov   A,03h
04A7: 9F 3A    CALL  0x03E3             (0715)     call  LCD_1_WCNTL_Nibble
                                        (0716) 
04A9: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04AB: 90 45    CALL  _LCD_1_Delay50uTimes(0718)     call  LCD_1_Delay50uTimes
                                        (0719) 
04AD: 50 02    MOV   A,0x2              (0720)     mov   A,02h
04AF: 9F 32    CALL  0x03E3             (0721)     call  LCD_1_WCNTL_Nibble
                                        (0722) 
04B1: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04B3: 90 3D    CALL  _LCD_1_Delay50uTimes(0724)     call  LCD_1_Delay50uTimes
                                        (0725) 
04B5: 50 08    MOV   A,0x8              (0726)     mov   A,08h
04B7: 9F 16    CALL  _LCD_1_Control     (0727)     call  LCD_1_Control
04B9: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04BB: 90 35    CALL  _LCD_1_Delay50uTimes(0729)     call  LCD_1_Delay50uTimes
                                        (0730) 
04BD: 50 01    MOV   A,0x1              (0731)     mov   A,01h
04BF: 9F 0E    CALL  _LCD_1_Control     (0732)     call  LCD_1_Control
04C1: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04C3: 90 2D    CALL  _LCD_1_Delay50uTimes(0734)     call  LCD_1_Delay50uTimes
                                        (0735) 
04C5: 50 06    MOV   A,0x6              (0736)     mov   A,06h
04C7: 9F 06    CALL  _LCD_1_Control     (0737)     call  LCD_1_Control
                                        (0738) 
04C9: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
04CB: 9F 02    CALL  _LCD_1_Control     (0740)     call  LCD_1_Control
                                        (0741) 
04CD: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
04CF: 9E FE    CALL  _LCD_1_Control     (0743)     call  LCD_1_Control
                                        (0744) 
04D1: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_1_DISP_OFF
04D3: 9E FA    CALL  _LCD_1_Control     (0746)     call  LCD_1_Control
                                        (0747) 
04D5: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_1_DISP_ON
04D7: 9E F6    CALL  _LCD_1_Control     (0749)     call  LCD_1_Control
                                        (0750) 
04D9: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_1_DISP_INC
04DB: 9E F2    CALL  _LCD_1_Control     (0752)     call  LCD_1_Control
                                        (0753) 
04DD: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04DF: 90 11    CALL  _LCD_1_Delay50uTimes(0755)     call  LCD_1_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
04E1: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_1_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_1_ROW_OFFSET::
                                        (0783)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_1_Position:
                                        (0788) _LCD_1_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
04E6: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
04E8: 10       PUSH  X                  (0791)     push  X                            ; Store COL
04E9: FF F7    INDEX LCD_1_ROW_OFFSET   (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
04EB: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
04EC: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
04EE: 20       POP   X                  (0795)     pop   X
                                        (0796) 
04EF: 9E DE    CALL  _LCD_1_Control     (0797)     call  LCD_1_Control                ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
04F1: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_1_Delay50uTimes:
                                        (0825) _LCD_1_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
04F2: 90 0C    CALL  _LCD_1_Delay50u    (0827)     call  LCD_1_Delay50u
04F4: 78       DEC   A                  (0828)     dec   A
04F5: BF FC    JNZ   _LCD_1_Delay50uTimes(0829)     jnz   LCD_1_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
04F7: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_1_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_1_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_1_Delay50u:
                                        (0869)  _LCD_1_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0500: 08       PUSH  A                  (0871)     push  A
0501: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0503: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0505: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0507: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0509: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
050B: D0 06    JNC   0x0512             (0877)     jnc   .Delay50u_End
050D: FF E9    INDEX LCD_1_Delay50u_Table(0878)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
050F: 78       DEC   A                  (0880)     dec   A                              ; [4]
0510: BF FE    JNZ   0x050F             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0512: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0513: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_1_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_1_DrawBG:
0514: 10       PUSH  X                  (0943)     push  X
0515: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
0517: 9F CD    CALL  _LCD_1_Position    (0945)     call  LCD_1_Position               ; Set cursor position
0519: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
051A: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
051D: B0 05    JNZ   0x0523             (0950)     jnz   .LCD_CHECK1X
051F: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
0521: 80 11    JMP   0x0533             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0523: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0526: D0 07    JNC   0x052E             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
0528: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
052A: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
052C: 80 06    JMP   0x0533             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
052E: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
0530: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0533: 9E 86    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data|_LCD_1_WriteData(0966)     call  LCD_1_WriteData              ; Display BG character
                                        (0967) 
0535: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
0537: BF E2    JNZ   0x051A             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
0539: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_1_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_1_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
053A: 4F       MOV   X,SP               (1015)     mov   X, SP
053B: 10       PUSH  X                  (1016)     push  X
053C: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
053E: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0540: 9F A4    CALL  _LCD_1_Position    (1020)     call  LCD_1_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0542: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0543: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0546: B0 05    JNZ   0x054C             (1026)     jnz   .LCD_CHECK1
0548: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
054A: 80 11    JMP   0x055C             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
054C: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
054F: D0 07    JNC   0x0557             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0551: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0553: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0555: 80 06    JMP   0x055C             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0557: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0559: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
055C: 9E 5D    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data|_LCD_1_WriteData(1042)     call  LCD_1_WriteData              ; Display BG character
                                        (1043) 
055E: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0560: BF E2    JNZ   0x0543             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0562: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_1_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_1_DrawVBG:
                                        (1095) 
0563: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
0565: 08       PUSH  A                  (1098)     push  A
0566: FF 7A    INDEX LCD_1_ROW_OFFSET   (1099)     index LCD_1_ROW_OFFSET  ; Get row offset
0568: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
056A: 9E 63    CALL  _LCD_1_Control     (1101)     call  LCD_1_Control                ; Position Cursor
056C: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
056F: B0 05    JNZ   0x0575             (1103)     jnz   .VBG_NZ_SEGX
0571: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
0573: 80 13    JMP   0x0587             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
0575: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
0578: D0 09    JNC   0x0582             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
057A: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
057C: 78       DEC   A                  (1111)     dec   A
057D: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
0580: 80 06    JMP   0x0587             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
0582: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
0585: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
0587: 9E 32    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data|_LCD_1_WriteData(1120)     call  LCD_1_WriteData              ; Write value
0589: 18       POP   A                  (1121)     pop   A
058A: 78       DEC   A                  (1122)     dec   A
058B: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
058D: BF D7    JNZ   0x0565             (1124)     jnz   .VBG_LOOPX
058F: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_1_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_1_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
0590: 4F       MOV   X,SP               (1168)     mov   X, SP
0591: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0593: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0595: 08       PUSH  A                  (1172)     push  A
0596: FF 4A    INDEX LCD_1_ROW_OFFSET   (1173)     index LCD_1_ROW_OFFSET  ; Get row offset
0598: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
059A: 9E 33    CALL  _LCD_1_Control     (1175)     call  LCD_1_Control                ; Position Cursor
059C: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
059F: B0 05    JNZ   0x05A5             (1177)     jnz   .VBG_NZ_SEG
05A1: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
05A3: 80 13    JMP   0x05B7             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
05A5: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
05A8: D0 09    JNC   0x05B2             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
05AA: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
05AC: 78       DEC   A                  (1185)     dec   A
05AD: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
05B0: 80 06    JMP   0x05B7             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
05B2: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
05B5: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
05B7: 9E 02    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data|_LCD_1_WriteData(1194)     call  LCD_1_WriteData              ; Write value
05B9: 18       POP   A                  (1195)     pop   A
05BA: 78       DEC   A                  (1196)     dec   A
05BB: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
05BD: BF D7    JNZ   0x0595             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
05BF: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_1_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_1_InitVBG:
                                        (1236) _LCD_1_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
05C0: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
05C1: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
05C2: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
05C3: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
05C5: 9E 08    CALL  _LCD_1_Control     (1243)     call  LCD_1_Control                ; Position the CG pointer
05C7: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
05CA: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
05CD: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
05CF: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
05D1: D0 05    JNC   0x05D7             (1251)     jnc   .VBG_SOLID
05D3: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
05D5: 80 03    JMP   0x05D9             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
05D7: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
05D9: 9D E0    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data|_LCD_1_WriteData(1257)     call  LCD_1_WriteData              ; character data
05DB: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
05DD: BF EF    JNZ   0x05CD             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
05DF: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
05E1: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
05E4: BF E5    JNZ   0x05CA             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
05E6: 18       POP   A                  (1264)     pop  A
05E7: 18       POP   A                  (1265)     pop  A
05E8: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_1_DISP_ON                    ; Turn on display, don't really
05EA: 9D E3    CALL  _LCD_1_Control     (1267)     call LCD_1_Control                 ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
05EC: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_1_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_1_InitBG:
                                        (1317) _LCD_1_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
05FB: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
05FC: 38 03    ADD   SP,0x3             (1320)     add   SP,3
05FE: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0600: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
0602: 9D CB    CALL  _LCD_1_Control     (1324)     call  LCD_1_Control                ; Position the CG pointer
0604: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0607: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
060A: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
060C: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
060F: B0 05    JNZ   0x0615             (1332)     jnz   .BG_OTHER
0611: FF DA    INDEX LCD_1_BG_TYPE1     (1333)     index LCD_1_BG_TYPE1
0613: 80 03    JMP   0x0617             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0615: FF DD    INDEX LCD_1_BG_TYPE2     (1336)     index LCD_1_BG_TYPE2
                                        (1337)  .BG_Load:
0617: 9D A2    CALL  LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data|_LCD_1_WriteData(1338)     call  LCD_1_WriteData
0619: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
061B: BF EE    JNZ   0x060A             (1340)     jnz   .BG_Loop2
061D: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
061F: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0622: BF E4    JNZ   0x0607             (1343)     jnz   .BG_Loop1
                                        (1344) 
0624: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0626: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_1_DISP_ON
0628: 9D A5    CALL  _LCD_1_Control     (1347)     call  LCD_1_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
062A: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_1.asm
FILE: lib\fanpwmint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: FanPWMINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "FanPWM.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _FanPWM_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _FanPWM_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _FanPWM_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070) RDIxLT0: equ 0xb3			;LUT Register Address
062B: 7A 0D    DEC   [wControlState+1]  (0071) 	dec [_wControlState + 1]	;decrement wControlState
062D: 1E 0C 00 SBB   [wControlState],0x0(0072) 	sbb [_wControlState],0`
0630: B0 3F    JNZ   0x0670             (0073) 	jnz MoreThan255
0632: 3C 0D 14 CMP   [wControlState+1],0x14(0074) 	cmp [_wControlState + 1],20
0635: A0 12    JZ    0x0648             (0075) 	jz State20
0637: 3C 0D 13 CMP   [wControlState+1],0x13(0076) 	cmp [_wControlState + 1],19
063A: A0 14    JZ    0x064F             (0077) 	jz State19
063C: 3C 0D 01 CMP   [wControlState+1],0x1(0078) 	cmp [_wControlState + 1],1
063F: A0 19    JZ    0x0659             (0079) 	jz State1
0641: 3C 0D 00 CMP   [wControlState+1],0x0(0080) 	cmp [_wControlState + 1],0
0644: A0 1E    JZ    0x0663             (0081) 	jz State0
0646: 80 29    JMP   0x0670             (0082) 	jmp Others
                                        (0083) State20:					;Start of FanOverride
0648: 62 04 40 MOV   REG[0x4],0x40      (0084) 	mov reg[PRT1DR], 0x40	;Set FanOverrideout high
064B: 43 B3 0F OR    REG[0xB3],0xF      (0085) 	or reg[RDIxLT0], 0x0f;	;Forece LUT open high
064E: 7E       RETI                     (0086) 	reti
                                        (0087) State19:
064F: 55 0E FF MOV   [cNumCycles],0xFF  (0088) 	mov [_cNumCycles], -1
0652: 62 E2 00 MOV   REG[0xE2],0x0      (0089) 	mov reg[INT_VC], 0x00  ; TODO: Clear any pending interrupts for TachTimer
0655: 7C 03 19 LCALL _TachTimer_EnableInt(0090) 	lcall TachTimer_EnableInt
0658: 7E       RETI                     (0091) 	reti
                                        (0092) State1:
0659: 62 E2 00 MOV   REG[0xE2],0x0      (0093) 	mov reg[INT_VC], 0x00 ; TODO: Clear any pending interrupts for TachTimer
065C: 7C 03 1D LCALL _TachTimer_DisableInt(0094) 	lcall TachTimer_DisableInt
065F: 55 0F 01 MOV   [bDataAvailable],0x1(0095) 	mov [_bDataAvailable], 1
0662: 7E       RETI                     (0096) 	reti
                                        (0097) State0:						; End of FanOverride
0663: 62 04 00 MOV   REG[0x4],0x0       (0098) 	mov reg[PRT1DR], 0x00		;Set FanOverrideOut low
0666: 41 B3 F3 AND   REG[0xB3],0xF3     (0099) 	and reg[RDIxLT0], 0xf3;		;Forece LUT back to normal
0669: 55 0C 03 MOV   [wControlState],0x3(0100) 	mov [_wControlState], 3		;_wControlState = 1000
066C: 55 0D E8 MOV   [wControlState+1],0xE8(0101) 	mov [_wControlState + 1], 232
066F: 7E       RETI                     (0102) 	reti
                                        (0103) MoreThan255:
                                        (0104) Others:
                                        (0105)    ;---------------------------------------------------
                                        (0106)    ; Insert your custom assembly code above this banner
                                        (0107)    ;---------------------------------------------------
                                        (0108)    
                                        (0109)    ;---------------------------------------------------
                                        (0110)    ; Insert a lcall to a C function below this banner
                                        (0111)    ; and un-comment the lines between these banners
                                        (0112)    ;---------------------------------------------------
                                        (0113)    
                                        (0114)    ;PRESERVE_CPU_CONTEXT
                                        (0115)    ;lcall _My_C_Function
                                        (0116)    ;RESTORE_CPU_CONTEXT
                                        (0117)    
                                        (0118)    ;---------------------------------------------------
                                        (0119)    ; Insert a lcall to a C function above this banner
                                        (0120)    ; and un-comment the lines between these banners
                                        (0121)    ;---------------------------------------------------
                                        (0122)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0123) 
0670: 7E       RETI                     (0124)    reti
                                        (0125) 
                                        (0126) 
                                        (0127) ; end of file FanPWMINT.asm
FILE: lib\fanpwm.asm                    (0001) ;;*****************************************************************************
0671: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: FanPWM.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "FanPWM.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  FanPWM_EnableInt
                                        (0030) export _FanPWM_EnableInt
                                        (0031) export  FanPWM_DisableInt
                                        (0032) export _FanPWM_DisableInt
                                        (0033) export  FanPWM_Start
                                        (0034) export _FanPWM_Start
                                        (0035) export  FanPWM_Stop
                                        (0036) export _FanPWM_Stop
                                        (0037) export  FanPWM_WritePeriod
                                        (0038) export _FanPWM_WritePeriod
                                        (0039) export  FanPWM_WritePulseWidth
                                        (0040) export _FanPWM_WritePulseWidth
                                        (0041) export  FanPWM_bReadPulseWidth
                                        (0042) export _FanPWM_bReadPulseWidth
                                        (0043) export  FanPWM_bReadCounter
                                        (0044) export _FanPWM_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bFanPWM_ReadPulseWidth    ; deprecated
                                        (0049) export _bFanPWM_ReadPulseWidth    ; deprecated
                                        (0050) export  bFanPWM_ReadCounter       ; deprecated
                                        (0051) export _bFanPWM_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA lab4d_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: FanPWM_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  FanPWM_EnableInt:
                                        (0091) _FanPWM_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    FanPWM_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0674: 7F       RET                      (0095)    ret
0675: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: FanPWM_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  FanPWM_DisableInt:
                                        (0119) _FanPWM_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    FanPWM_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0678: 7F       RET                      (0123)    ret
0679: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: FanPWM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  FanPWM_Start:
                                        (0148) _FanPWM_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    FanPWM_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
067C: 7F       RET                      (0152)    ret
067D: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: FanPWM_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  FanPWM_Stop:
                                        (0176) _FanPWM_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    FanPWM_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0680: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: FanPWM_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  FanPWM_WritePeriod:
                                        (0206) _FanPWM_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0681: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[FanPWM_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0683: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: FanPWM_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  FanPWM_WritePulseWidth:
                                        (0233) _FanPWM_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0684: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[FanPWM_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0686: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: FanPWM_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  FanPWM_bReadPulseWidth:
                                        (0260) _FanPWM_bReadPulseWidth:
                                        (0261)  bFanPWM_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bFanPWM_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0687: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[FanPWM_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0689: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: FanPWM_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  FanPWM_bReadCounter:
                                        (0293) _FanPWM_bReadCounter:
                                        (0294)  bFanPWM_ReadCounter:                            ; this name deprecated
                                        (0295) _bFanPWM_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
068A: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
068B: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[FanPWM_COMPARE_REG]              ; Save the Compare register on the stack
068D: 08       PUSH  A                  (0305)    push  A                                       ;
068E: 41 23 FE AND   REG[0x23],0xFE     
0691: 71 10    OR    F,0x10             
                                        (0306)    FanPWM_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0693: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[FanPWM_INPUT_REG]                ; save the clock input setting
0695: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0696: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[FanPWM_INPUT_REG], INPUT_REG_NULL
0699: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
069B: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[FanPWM_COUNTER_REG]              ; DR2 <- DR0
069D: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[FanPWM_COMPARE_REG]              ; Stash the Count on the stack
069F: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
06A0: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
06A2: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[FanPWM_COMPARE_REG], A
06A4: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
06A6: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
06A8: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[FanPWM_INPUT_REG], A                ;
06AA: 70 EF    AND   F,0xEF             
06AC: 43 23 01 OR    REG[0x23],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    FanPWM_Start_M                                ;   then re-enable the PWM.
06AF: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
06B0: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
06B2: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File FanPWM.asm
FILE: C:\Dropbox\DOCUME~1\School\SENIOR~3\ESE366~1\lab_git\Lab4\Lab4D\Lab4D\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include <string.h>
(0008) #include <stddef.h>
(0009) 
(0010) // CONST keyword will let the string stored in Flash.
(0011) // So it does not take SRAM.
(0012) CONST char line1_head[] = "RPM: ";	
(0013) CONST char line2_head[] = "PWM: ";
(0014) 
(0015) void itoa(unsigned short input, char *str, int base);
(0016) void LCD_line_print(char *str, unsigned char line);
(0017) 
(0018) void itoa(unsigned short input, char *str, int base)
(0019) {
__UserModules_end|_itoa|__text_start|_itoa:
  digit                --> X+4
  n                    --> X+2
  d                    --> X+0
  base                 --> X-9
  str                  --> X-7
  input                --> X-5
    06B3: 10       PUSH  X
    06B4: 4F       MOV   X,SP
    06B5: 38 08    ADD   SP,0x8
(0020) 	int n = 0;
    06B7: 56 03 00 MOV   [X+3],0x0
    06BA: 56 02 00 MOV   [X+2],0x0
(0021) 	unsigned int d = 1;
    06BD: 56 01 01 MOV   [X+1],0x1
    06C0: 56 00 00 MOV   [X+0],0x0
    06C3: 80 1A    JMP   0x06DE
(0022) 	while ((input / d) >= base)
(0023) 	{
(0024) 		d *= base;
    06C5: 52 F7    MOV   A,[X-9]
    06C7: 08       PUSH  A
    06C8: 52 F8    MOV   A,[X-8]
    06CA: 08       PUSH  A
    06CB: 52 00    MOV   A,[X+0]
    06CD: 08       PUSH  A
    06CE: 52 01    MOV   A,[X+1]
    06D0: 08       PUSH  A
    06D1: 7C 0A C3 LCALL 0x0AC3
    06D4: 38 FC    ADD   SP,0xFC
    06D6: 51 14    MOV   A,[__rX]
    06D8: 54 01    MOV   [X+1],A
    06DA: 51 13    MOV   A,[__rY]
    06DC: 54 00    MOV   [X+0],A
(0025) 	}
    06DE: 52 00    MOV   A,[X+0]
    06E0: 08       PUSH  A
    06E1: 52 01    MOV   A,[X+1]
    06E3: 08       PUSH  A
    06E4: 52 FB    MOV   A,[X-5]
    06E6: 08       PUSH  A
    06E7: 52 FC    MOV   A,[X-4]
    06E9: 08       PUSH  A
    06EA: 7C 09 FD LCALL 0x09FD
    06ED: 18       POP   A
    06EE: 53 17    MOV   [__r1],A
    06F0: 18       POP   A
    06F1: 53 18    MOV   [__r0],A
    06F3: 38 FE    ADD   SP,0xFE
    06F5: 51 17    MOV   A,[__r1]
    06F7: 13 F8    SUB   A,[X-8]
    06F9: 51 18    MOV   A,[__r0]
    06FB: 1B F7    SBB   A,[X-9]
    06FD: DF C7    JNC   0x06C5
    06FF: 80 AB    JMP   0x07AB
(0026) 	while (d != 0)
(0027) 	{
(0028) 		int digit = input / d;
    0701: 52 00    MOV   A,[X+0]
    0703: 08       PUSH  A
    0704: 52 01    MOV   A,[X+1]
    0706: 08       PUSH  A
    0707: 52 FB    MOV   A,[X-5]
    0709: 08       PUSH  A
    070A: 52 FC    MOV   A,[X-4]
    070C: 08       PUSH  A
    070D: 7C 09 FD LCALL 0x09FD
    0710: 18       POP   A
    0711: 53 17    MOV   [__r1],A
    0713: 18       POP   A
    0714: 53 18    MOV   [__r0],A
    0716: 38 FE    ADD   SP,0xFE
    0718: 51 17    MOV   A,[__r1]
    071A: 54 05    MOV   [X+5],A
    071C: 51 18    MOV   A,[__r0]
    071E: 54 04    MOV   [X+4],A
(0029) 		input %= d;
    0720: 52 00    MOV   A,[X+0]
    0722: 08       PUSH  A
    0723: 52 01    MOV   A,[X+1]
    0725: 08       PUSH  A
    0726: 52 FB    MOV   A,[X-5]
    0728: 08       PUSH  A
    0729: 52 FC    MOV   A,[X-4]
    072B: 08       PUSH  A
    072C: 7C 09 FD LCALL 0x09FD
    072F: 38 FE    ADD   SP,0xFE
    0731: 18       POP   A
    0732: 54 FC    MOV   [X-4],A
    0734: 18       POP   A
    0735: 54 FB    MOV   [X-5],A
(0030) 		d /= base;
    0737: 52 F7    MOV   A,[X-9]
    0739: 08       PUSH  A
    073A: 52 F8    MOV   A,[X-8]
    073C: 08       PUSH  A
    073D: 52 00    MOV   A,[X+0]
    073F: 08       PUSH  A
    0740: 52 01    MOV   A,[X+1]
    0742: 08       PUSH  A
    0743: 7C 09 FD LCALL 0x09FD
    0746: 18       POP   A
    0747: 54 01    MOV   [X+1],A
    0749: 18       POP   A
    074A: 54 00    MOV   [X+0],A
    074C: 38 FE    ADD   SP,0xFE
(0031) 		if (n || digit > 0 || d == 0)
    074E: 3D 02 00 CMP   [X+2],0x0
    0751: B0 20    JNZ   0x0772
    0753: 3D 03 00 CMP   [X+3],0x0
    0756: B0 1B    JNZ   0x0772
    0758: 50 00    MOV   A,0x0
    075A: 13 05    SUB   A,[X+5]
    075C: 52 04    MOV   A,[X+4]
    075E: 31 80    XOR   A,0x80
    0760: 53 14    MOV   [__rX],A
    0762: 50 80    MOV   A,0x80
    0764: 1A 14    SBB   A,[__rX]
    0766: C0 0B    JC    0x0772
    0768: 3D 00 00 CMP   [X+0],0x0
    076B: B0 3F    JNZ   0x07AB
    076D: 3D 01 00 CMP   [X+1],0x0
    0770: B0 3A    JNZ   0x07AB
(0032) 		{
(0033) 			*str++ = digit + ((digit < 10)? '0': 'a' - 10);
    0772: 52 FA    MOV   A,[X-6]
    0774: 53 17    MOV   [__r1],A
    0776: 52 F9    MOV   A,[X-7]
    0778: 53 18    MOV   [__r0],A
    077A: 51 17    MOV   A,[__r1]
    077C: 01 01    ADD   A,0x1
    077E: 54 FA    MOV   [X-6],A
    0780: 51 18    MOV   A,[__r0]
    0782: 09 00    ADC   A,0x0
    0784: 54 F9    MOV   [X-7],A
    0786: 52 05    MOV   A,[X+5]
    0788: 11 0A    SUB   A,0xA
    078A: 52 04    MOV   A,[X+4]
    078C: 31 80    XOR   A,0x80
    078E: 19 80    SBB   A,0x80
    0790: D0 09    JNC   0x079A
    0792: 56 07 30 MOV   [X+7],0x30
    0795: 56 06 00 MOV   [X+6],0x0
    0798: 80 07    JMP   0x07A0
    079A: 56 07 57 MOV   [X+7],0x57
    079D: 56 06 00 MOV   [X+6],0x0
    07A0: 52 05    MOV   A,[X+5]
    07A2: 03 07    ADD   A,[X+7]
    07A4: 3F 17    MVI   [__r1],A
(0034) 			n++;
    07A6: 77 03    INC   [X+3]
    07A8: 0F 02 00 ADC   [X+2],0x0
(0035) 		}
(0036) 	}
    07AB: 3D 00 00 CMP   [X+0],0x0
    07AE: BF 52    JNZ   0x0701
    07B0: 3D 01 00 CMP   [X+1],0x0
    07B3: BF 4D    JNZ   0x0701
(0037) 	*str = '\0';
    07B5: 52 FA    MOV   A,[X-6]
    07B7: 53 17    MOV   [__r1],A
    07B9: 50 00    MOV   A,0x0
    07BB: 3F 17    MVI   [__r1],A
    07BD: 38 F8    ADD   SP,0xF8
    07BF: 20       POP   X
    07C0: 7F       RET   
(0038) }
(0039) 
(0040) void LCD_line_print(char *str, unsigned char line)
(0041) {
_LCD_line_print:
  line                 --> X-6
  str                  --> X-5
    07C1: 10       PUSH  X
    07C2: 4F       MOV   X,SP
(0042) 	static char buffer[17];
(0043) 	memset(buffer, ' ', 16);
    07C3: 50 00    MOV   A,0x0
    07C5: 08       PUSH  A
    07C6: 50 10    MOV   A,0x10
    07C8: 08       PUSH  A
    07C9: 50 00    MOV   A,0x0
    07CB: 08       PUSH  A
    07CC: 50 20    MOV   A,0x20
    07CE: 08       PUSH  A
    07CF: 50 00    MOV   A,0x0
    07D1: 08       PUSH  A
    07D2: 50 1C    MOV   A,0x1C
    07D4: 08       PUSH  A
    07D5: 7C 0B A6 LCALL _memset
    07D8: 38 FA    ADD   SP,0xFA
(0044) 	memcpy(buffer, str, strlen(str));
    07DA: 52 FB    MOV   A,[X-5]
    07DC: 08       PUSH  A
    07DD: 52 FC    MOV   A,[X-4]
    07DF: 08       PUSH  A
    07E0: 7C 0B FD LCALL _strlen
    07E3: 51 18    MOV   A,[__r0]
    07E5: 08       PUSH  A
    07E6: 51 17    MOV   A,[__r1]
    07E8: 08       PUSH  A
    07E9: 52 FB    MOV   A,[X-5]
    07EB: 08       PUSH  A
    07EC: 52 FC    MOV   A,[X-4]
    07EE: 08       PUSH  A
    07EF: 50 00    MOV   A,0x0
    07F1: 08       PUSH  A
    07F2: 50 1C    MOV   A,0x1C
    07F4: 08       PUSH  A
    07F5: 7C 0B 7C LCALL _memcpy
    07F8: 38 F8    ADD   SP,0xF8
(0045) 	buffer[17] = '\0';
    07FA: 55 2D 00 MOV   [0x2D],0x0
(0046) 	LCD_1_Position(line, 0);
    07FD: 10       PUSH  X
    07FE: 50 00    MOV   A,0x0
    0800: 08       PUSH  A
    0801: 52 FA    MOV   A,[X-6]
    0803: 20       POP   X
    0804: 7C 04 E6 LCALL _LCD_1_Position
(0047) 	LCD_1_PrString(buffer);
    0807: 50 00    MOV   A,0x0
    0809: 08       PUSH  A
    080A: 50 1C    MOV   A,0x1C
    080C: 5C       MOV   X,A
    080D: 18       POP   A
    080E: 7C 03 B1 LCALL _LCD_1_PrString
    0811: 20       POP   X
    0812: 20       POP   X
    0813: 7F       RET   
(0048) }
(0049) 
(0050) // global variables
(0051) unsigned short wControlState = 1000;
(0052) unsigned short wFirstValue;
(0053) unsigned short wLastValue;
(0054) char cNumCycles = (char )-1;
(0055) unsigned char bDataAvailable = 0;
(0056) unsigned short wSpeedRPM = 0;
(0057) 
(0058) void main(void)
(0059) {
_main:
  tmp                  --> X+2
  pw                   --> X+1
  bSwitchState         --> X+0
    0814: 10       PUSH  X
    0815: 4F       MOV   X,SP
    0816: 38 06    ADD   SP,0x6
(0060) 	// variable declaration
(0061) 	static char str_buf[17];
(0062) 	unsigned char pw;
(0063) 	char bSwitchState;
(0064) 	long int tmp;
(0065) 	
(0066) 	// initialize interrupt
(0067) 	//INT_MSK0 |= 0x40;
(0068) 	M8C_EnableGInt;
    0818: 71 01    OR    F,0x1
(0069) 	FanPWM_EnableInt();
    081A: 10       PUSH  X
    081B: 7C 06 71 LCALL _FanPWM_EnableInt
(0070) 
(0071) 	//SleepTimer_EnableInt();
(0072) 	
(0073) 	// initialize PWM module
(0074) 	FanPWM_Start();
    081E: 7C 06 79 LCALL _FanPWM_Start
(0075) 	
(0076) 	// init 16 bit timer
(0077) 	TachTimer_Start();
    0821: 7C 03 21 LCALL _TachTimer_Start
(0078) 	
(0079) 	// init LCD module
(0080) 	LCD_1_Start();
    0824: 7C 04 76 LCALL _LCD_1_Init|_LCD_1_Start|LCD_1_Init|LCD_1_Start
(0081) 	
(0082) 	// start PWM and LCD
(0083) 	pw = FanPWM_bReadPulseWidth();
    0827: 7C 06 87 LCALL _bFanPWM_ReadPulseWidth|FanPWM_bReadPulseWidth|_FanPWM_bReadPulseWidth
    082A: 20       POP   X
    082B: 54 01    MOV   [X+1],A
(0084) 	pw = 255;
    082D: 56 01 FF MOV   [X+1],0xFF
(0085) 	FanPWM_WritePulseWidth(pw);
    0830: 10       PUSH  X
    0831: 52 01    MOV   A,[X+1]
    0833: 7C 06 84 LCALL _FanPWM_WritePulseWidth
    0836: 20       POP   X
(0086) 	strcpy(str_buf, line2_head);
    0837: 50 00    MOV   A,0x0
    0839: 08       PUSH  A
    083A: 50 06    MOV   A,0x6
    083C: 08       PUSH  A
    083D: 50 00    MOV   A,0x0
    083F: 08       PUSH  A
    0840: 50 2D    MOV   A,0x2D
    0842: 08       PUSH  A
    0843: 7C 0B D8 LCALL _strcpy
    0846: 38 FC    ADD   SP,0xFC
(0087) 	itoa(pw, str_buf + 5, 10);
    0848: 50 00    MOV   A,0x0
    084A: 08       PUSH  A
    084B: 50 0A    MOV   A,0xA
    084D: 08       PUSH  A
    084E: 50 00    MOV   A,0x0
    0850: 08       PUSH  A
    0851: 50 32    MOV   A,0x32
    0853: 08       PUSH  A
    0854: 52 01    MOV   A,[X+1]
    0856: 53 17    MOV   [__r1],A
    0858: 50 00    MOV   A,0x0
    085A: 08       PUSH  A
    085B: 51 17    MOV   A,[__r1]
    085D: 08       PUSH  A
    085E: 9E 53    CALL  __UserModules_end|_itoa|__text_start|_itoa
(0088) 	LCD_line_print(str_buf, 1);
    0860: 50 01    MOV   A,0x1
    0862: 08       PUSH  A
    0863: 50 00    MOV   A,0x0
    0865: 08       PUSH  A
    0866: 50 2D    MOV   A,0x2D
    0868: 08       PUSH  A
    0869: 9F 56    CALL  _LCD_line_print
    086B: 38 F7    ADD   SP,0xF7
(0089) 	
(0090) 	
(0091) 	// infinite loop with debouncing.
(0092) 	bSwitchState = 0;
    086D: 56 00 00 MOV   [X+0],0x0
    0870: 81 4C    JMP   0x09BD
(0093) 	while (1)
(0094) 	{
(0095) 		
(0096) 		// print out
(0097) 		//tmp = TachTimer_wReadTimerSaveCV();
(0098) 		//strcpy(str_buf, line1_head);
(0099) 		//itoa((unsigned short)tmp, str_buf + strlen(line1_head), 10);
(0100) 		//LCD_line_print(str_buf, 0);
(0101) 		// FIXME: The sleep has a problem with the overall freq
(0102) 		//M8C_Sleep;
(0103) 		//INT_CLR0 = INT_CLR0 & ~0x40;
(0104) 		
(0105) 		// debouncing
(0106) 		bSwitchState <<= 1;
    0872: 66 00    ASL   [X+0]
(0107) 		bSwitchState &= 0x0f;
    0874: 27 00 0F AND   [X+0],0xF
(0108) 		bSwitchState |= (PRT1DR & 0x01);
    0877: 5D 04    MOV   A,REG[0x4]
    0879: 21 01    AND   A,0x1
    087B: 2D 00    OR    [X+0],A
(0109) 		if(bSwitchState == 0x07)
    087D: 3D 00 07 CMP   [X+0],0x7
    0880: B0 5F    JNZ   0x08E0
(0110) 		{			
(0111) 			// increase the pulse width
(0112) 			pw = FanPWM_bReadPulseWidth() - 1;
    0882: 10       PUSH  X
    0883: 7C 06 87 LCALL _bFanPWM_ReadPulseWidth|FanPWM_bReadPulseWidth|_FanPWM_bReadPulseWidth
    0886: 20       POP   X
    0887: 11 01    SUB   A,0x1
    0889: 54 01    MOV   [X+1],A
(0113) 			if (pw <= 0)
    088B: 50 00    MOV   A,0x0
    088D: 3B 01    CMP   A,[X+1]
    088F: C0 04    JC    0x0894
(0114) 			{
(0115) 				pw = 255;
    0891: 56 01 FF MOV   [X+1],0xFF
(0116) 			}
(0117) 			FanPWM_WritePulseWidth(pw);
    0894: 10       PUSH  X
    0895: 52 01    MOV   A,[X+1]
    0897: 7C 06 84 LCALL _FanPWM_WritePulseWidth
    089A: 20       POP   X
(0118) 			
(0119) 			// print out
(0120) 			strcpy(str_buf, line2_head);
    089B: 50 00    MOV   A,0x0
    089D: 08       PUSH  A
    089E: 50 06    MOV   A,0x6
    08A0: 08       PUSH  A
    08A1: 50 00    MOV   A,0x0
    08A3: 08       PUSH  A
    08A4: 50 2D    MOV   A,0x2D
    08A6: 08       PUSH  A
    08A7: 7C 0B D8 LCALL _strcpy
(0121) 			itoa(pw, str_buf + strlen(line2_head), 10);
    08AA: 50 00    MOV   A,0x0
    08AC: 08       PUSH  A
    08AD: 50 06    MOV   A,0x6
    08AF: 08       PUSH  A
    08B0: 7C 0B FD LCALL _strlen
    08B3: 38 FA    ADD   SP,0xFA
    08B5: 50 00    MOV   A,0x0
    08B7: 08       PUSH  A
    08B8: 50 0A    MOV   A,0xA
    08BA: 08       PUSH  A
    08BB: 06 17 2D ADD   [__r1],0x2D
    08BE: 0E 18 00 ADC   [__r0],0x0
    08C1: 51 18    MOV   A,[__r0]
    08C3: 08       PUSH  A
    08C4: 51 17    MOV   A,[__r1]
    08C6: 08       PUSH  A
    08C7: 52 01    MOV   A,[X+1]
    08C9: 53 17    MOV   [__r1],A
    08CB: 50 00    MOV   A,0x0
    08CD: 08       PUSH  A
    08CE: 51 17    MOV   A,[__r1]
    08D0: 08       PUSH  A
    08D1: 9D E0    CALL  __UserModules_end|_itoa|__text_start|_itoa
(0122) 			LCD_line_print(str_buf, 1);
    08D3: 50 01    MOV   A,0x1
    08D5: 08       PUSH  A
    08D6: 50 00    MOV   A,0x0
    08D8: 08       PUSH  A
    08D9: 50 2D    MOV   A,0x2D
    08DB: 08       PUSH  A
    08DC: 9E E3    CALL  _LCD_line_print
    08DE: 38 F7    ADD   SP,0xF7
(0123) 		}
(0124) 		
(0125) 		// Main control loop
(0126) 		if (bDataAvailable == 1)
    08E0: 3C 0F 01 CMP   [bDataAvailable],0x1
    08E3: B0 D9    JNZ   0x09BD
(0127) 		{
(0128) 			// clear it
(0129) 			bDataAvailable = 0;
    08E5: 55 0F 00 MOV   [bDataAvailable],0x0
(0130) 			// calculate the fan speed
(0131) 			
(0132) 			// and post it along with the value of cNumCyles, to the LCD
(0133) 			tmp = 0;
    08E8: 56 02 00 MOV   [X+2],0x0
    08EB: 56 03 00 MOV   [X+3],0x0
    08EE: 56 04 00 MOV   [X+4],0x0
    08F1: 56 05 00 MOV   [X+5],0x0
(0134) 			tmp = 45*100000*cNumCycles;
    08F4: 5F 15 0E MOV   [__r3],[cNumCycles]
    08F7: 50 00    MOV   A,0x0
    08F9: 08       PUSH  A
    08FA: 08       PUSH  A
    08FB: 08       PUSH  A
    08FC: 51 15    MOV   A,[__r3]
    08FE: 08       PUSH  A
    08FF: 50 00    MOV   A,0x0
    0901: 08       PUSH  A
    0902: 50 44    MOV   A,0x44
    0904: 08       PUSH  A
    0905: 50 AA    MOV   A,0xAA
    0907: 08       PUSH  A
    0908: 50 20    MOV   A,0x20
    090A: 08       PUSH  A
    090B: 7C 0A F4 LCALL 0x0AF4
    090E: 38 FC    ADD   SP,0xFC
    0910: 18       POP   A
    0911: 54 05    MOV   [X+5],A
    0913: 18       POP   A
    0914: 54 04    MOV   [X+4],A
    0916: 18       POP   A
    0917: 54 03    MOV   [X+3],A
    0919: 18       POP   A
    091A: 54 02    MOV   [X+2],A
(0135) 			tmp += (wFirstValue - wLastValue)/2;
    091C: 51 41    MOV   A,[wFirstValue+1]
    091E: 12 3F    SUB   A,[wLastValue+1]
    0920: 53 17    MOV   [__r1],A
    0922: 51 40    MOV   A,[wFirstValue]
    0924: 1A 3E    SBB   A,[wLastValue]
    0926: 53 18    MOV   [__r0],A
    0928: 70 FB    AND   F,0xFB
    092A: 6E 18    RRC   [__r0]
    092C: 6E 17    RRC   [__r1]
    092E: 51 17    MOV   A,[__r1]
    0930: 05 05    ADD   [X+5],A
    0932: 51 18    MOV   A,[__r0]
    0934: 0D 04    ADC   [X+4],A
    0936: 50 00    MOV   A,0x0
    0938: 0F 03 00 ADC   [X+3],0x0
    093B: 0F 02 00 ADC   [X+2],0x0
(0136) 			tmp /= (wFirstValue - wLastValue);
    093E: 51 41    MOV   A,[wFirstValue+1]
    0940: 12 3F    SUB   A,[wLastValue+1]
    0942: 53 17    MOV   [__r1],A
    0944: 51 40    MOV   A,[wFirstValue]
    0946: 1A 3E    SBB   A,[wLastValue]
    0948: 53 16    MOV   [__r2],A
    094A: 50 00    MOV   A,0x0
    094C: 08       PUSH  A
    094D: 08       PUSH  A
    094E: 51 16    MOV   A,[__r2]
    0950: 08       PUSH  A
    0951: 51 17    MOV   A,[__r1]
    0953: 08       PUSH  A
    0954: 52 02    MOV   A,[X+2]
    0956: 08       PUSH  A
    0957: 52 03    MOV   A,[X+3]
    0959: 08       PUSH  A
    095A: 52 04    MOV   A,[X+4]
    095C: 08       PUSH  A
    095D: 52 05    MOV   A,[X+5]
    095F: 08       PUSH  A
    0960: 7C 09 C4 LCALL 0x09C4
    0963: 18       POP   A
    0964: 54 05    MOV   [X+5],A
    0966: 18       POP   A
    0967: 54 04    MOV   [X+4],A
    0969: 18       POP   A
    096A: 54 03    MOV   [X+3],A
    096C: 18       POP   A
    096D: 54 02    MOV   [X+2],A
    096F: 38 FC    ADD   SP,0xFC
(0137) 			wSpeedRPM = (unsigned short)tmp;
    0971: 52 05    MOV   A,[X+5]
    0973: 53 17    MOV   [__r1],A
    0975: 52 04    MOV   A,[X+4]
    0977: 5F 11 17 MOV   [str_buf],[__r1]
    097A: 53 10    MOV   [wSpeedRPM],A
(0138) 			
(0139) 			// print out
(0140) 			strcpy(str_buf, line1_head);
    097C: 50 00    MOV   A,0x0
    097E: 08       PUSH  A
    097F: 50 00    MOV   A,0x0
    0981: 08       PUSH  A
    0982: 50 00    MOV   A,0x0
    0984: 08       PUSH  A
    0985: 50 2D    MOV   A,0x2D
    0987: 08       PUSH  A
    0988: 7C 0B D8 LCALL _strcpy
(0141) 			itoa(wSpeedRPM, str_buf + strlen(line1_head), 10);
    098B: 50 00    MOV   A,0x0
    098D: 08       PUSH  A
    098E: 50 00    MOV   A,0x0
    0990: 08       PUSH  A
    0991: 7C 0B FD LCALL _strlen
    0994: 38 FA    ADD   SP,0xFA
    0996: 50 00    MOV   A,0x0
    0998: 08       PUSH  A
    0999: 50 0A    MOV   A,0xA
    099B: 08       PUSH  A
    099C: 06 17 2D ADD   [__r1],0x2D
    099F: 0E 18 00 ADC   [__r0],0x0
    09A2: 51 18    MOV   A,[__r0]
    09A4: 08       PUSH  A
    09A5: 51 17    MOV   A,[__r1]
    09A7: 08       PUSH  A
    09A8: 51 10    MOV   A,[wSpeedRPM]
    09AA: 08       PUSH  A
    09AB: 51 11    MOV   A,[str_buf]
    09AD: 08       PUSH  A
    09AE: 9D 03    CALL  __UserModules_end|_itoa|__text_start|_itoa
(0142) 			LCD_line_print(str_buf, 0);
    09B0: 50 00    MOV   A,0x0
    09B2: 08       PUSH  A
    09B3: 50 00    MOV   A,0x0
    09B5: 08       PUSH  A
    09B6: 50 2D    MOV   A,0x2D
    09B8: 08       PUSH  A
    09B9: 9E 06    CALL  _LCD_line_print
    09BB: 38 F7    ADD   SP,0xF7
(0143) 		}
(0144) 	}
    09BD: 8E B4    JMP   0x0872
(0145) }
    09BF: 38 FA    ADD   SP,0xFA
    09C1: 20       POP   X
    09C2: 8F FF    JMP   0x09C2
_memcpyLMM:
    0B6D: 62 D0 00 MOV   REG[0xD0],0x0
    0B70: 10       PUSH  X
    0B71: 4F       MOV   X,SP
    0B72: 52 FB    MOV   A,[X-5]
    0B74: 60 D5    MOV   REG[0xD5],A
    0B76: 52 F9    MOV   A,[X-7]
    0B78: 60 D4    MOV   REG[0xD4],A
    0B7A: 80 03    JMP   0x0B7E
_memcpy:
    0B7C: 10       PUSH  X
    0B7D: 4F       MOV   X,SP
    0B7E: 52 FC    MOV   A,[X-4]
    0B80: 53 17    MOV   [__r1],A
    0B82: 53 16    MOV   [__r2],A
    0B84: 52 FB    MOV   A,[X-5]
    0B86: 53 18    MOV   [__r0],A
    0B88: 52 FA    MOV   A,[X-6]
    0B8A: 53 15    MOV   [__r3],A
    0B8C: 3D F8 00 CMP   [X-8],0x0
    0B8F: A0 09    JZ    0x0B99
    0B91: 7B F8    DEC   [X-8]
    0B93: 3E 15    MVI   A,[__r3]
    0B95: 3F 16    MVI   [__r2],A
    0B97: 8F F4    JMP   0x0B8C
    0B99: 20       POP   X
    0B9A: 7F       RET   
_memsetLMM:
    0B9B: 62 D0 00 MOV   REG[0xD0],0x0
    0B9E: 10       PUSH  X
    0B9F: 4F       MOV   X,SP
    0BA0: 52 FB    MOV   A,[X-5]
    0BA2: 60 D5    MOV   REG[0xD5],A
    0BA4: 80 03    JMP   0x0BA8
_memset:
    0BA6: 10       PUSH  X
    0BA7: 4F       MOV   X,SP
    0BA8: 52 FC    MOV   A,[X-4]
    0BAA: 53 17    MOV   [__r1],A
    0BAC: 53 16    MOV   [__r2],A
    0BAE: 52 FB    MOV   A,[X-5]
    0BB0: 53 18    MOV   [__r0],A
    0BB2: 52 FA    MOV   A,[X-6]
    0BB4: 80 08    JMP   0x0BBD
    0BB6: 3F 16    MVI   [__r2],A
    0BB8: 7B F8    DEC   [X-8]
    0BBA: 1F F7 00 SBB   [X-9],0x0
    0BBD: 3D F8 00 CMP   [X-8],0x0
    0BC0: BF F5    JNZ   0x0BB6
    0BC2: 3D F7 00 CMP   [X-9],0x0
    0BC5: BF F0    JNZ   0x0BB6
    0BC7: 20       POP   X
    0BC8: 7F       RET   
_strcpyLMM:
    0BC9: 62 D0 00 MOV   REG[0xD0],0x0
    0BCC: 10       PUSH  X
    0BCD: 4F       MOV   X,SP
    0BCE: 52 FB    MOV   A,[X-5]
    0BD0: 60 D5    MOV   REG[0xD5],A
    0BD2: 52 F9    MOV   A,[X-7]
    0BD4: 60 D4    MOV   REG[0xD4],A
    0BD6: 80 03    JMP   0x0BDA
_strcpy:
    0BD8: 10       PUSH  X
    0BD9: 4F       MOV   X,SP
    0BDA: 52 FC    MOV   A,[X-4]
    0BDC: 53 17    MOV   [__r1],A
    0BDE: 53 16    MOV   [__r2],A
    0BE0: 52 FB    MOV   A,[X-5]
    0BE2: 53 18    MOV   [__r0],A
    0BE4: 52 FA    MOV   A,[X-6]
    0BE6: 53 15    MOV   [__r3],A
    0BE8: 3E 15    MVI   A,[__r3]
    0BEA: 3F 16    MVI   [__r2],A
    0BEC: 39 00    CMP   A,0x0
    0BEE: BF F9    JNZ   0x0BE8
    0BF0: 20       POP   X
    0BF1: 7F       RET   
_strlenLMM:
    0BF2: 62 D0 00 MOV   REG[0xD0],0x0
    0BF5: 10       PUSH  X
    0BF6: 4F       MOV   X,SP
    0BF7: 52 FB    MOV   A,[X-5]
    0BF9: 60 D4    MOV   REG[0xD4],A
    0BFB: 80 03    JMP   0x0BFF
_strlen:
    0BFD: 10       PUSH  X
    0BFE: 4F       MOV   X,SP
    0BFF: 55 17 00 MOV   [__r1],0x0
    0C02: 55 18 00 MOV   [__r0],0x0
    0C05: 52 FC    MOV   A,[X-4]
    0C07: 53 16    MOV   [__r2],A
    0C09: 3E 16    MVI   A,[__r2]
    0C0B: 39 00    CMP   A,0x0
    0C0D: A0 08    JZ    0x0C16
    0C0F: 76 17    INC   [__r1]
    0C11: 0E 18 00 ADC   [__r0],0x0
    0C14: 8F F4    JMP   0x0C09
    0C16: 20       POP   X
    0C17: 7F       RET   
