//*****************************************************************************
//*****************************************************************************
//  FILENAME: TachOverridePWM.h
//   Version: 2.5, Updated on 2015/3/4 at 22:26:51
//  Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION: PWM16 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef TachOverridePWM_INCLUDE
#define TachOverridePWM_INCLUDE

#include <m8c.h>

#pragma fastcall16 TachOverridePWM_EnableInt
#pragma fastcall16 TachOverridePWM_DisableInt
#pragma fastcall16 TachOverridePWM_Start
#pragma fastcall16 TachOverridePWM_Stop
#pragma fastcall16 TachOverridePWM_wReadCounter              // Read  DR0
#pragma fastcall16 TachOverridePWM_WritePeriod               // Write DR1
#pragma fastcall16 TachOverridePWM_wReadPulseWidth           // Read  DR2
#pragma fastcall16 TachOverridePWM_WritePulseWidth           // Write DR2

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 wTachOverridePWM_ReadCounter              // Read  DR0 (Deprecated)
#pragma fastcall16 wTachOverridePWM_ReadPulseWidth           // Read  DR2 (Deprecated)


//-------------------------------------------------
// Prototypes of the TachOverridePWM API.
//-------------------------------------------------

extern void TachOverridePWM_EnableInt(void);                  // Proxy Class 1
extern void TachOverridePWM_DisableInt(void);                 // Proxy Class 1
extern void TachOverridePWM_Start(void);                      // Proxy Class 1
extern void TachOverridePWM_Stop(void);                       // Proxy Class 1
extern WORD TachOverridePWM_wReadCounter(void);               // Proxy Class 2
extern void TachOverridePWM_WritePeriod(WORD wPeriod);        // Proxy Class 1
extern WORD TachOverridePWM_wReadPulseWidth(void);            // Proxy Class 1
extern void TachOverridePWM_WritePulseWidth(WORD wPulseWidth);// Proxy Class 1

// The following functions are deprecated.
// They may be omitted in future releases
//
extern WORD wTachOverridePWM_ReadCounter(void);            // Deprecated
extern WORD wTachOverridePWM_ReadPulseWidth(void);         // Deprecated


//-------------------------------------------------
// Constants for TachOverridePWM API's.
//-------------------------------------------------

#define TachOverridePWM_CONTROL_REG_START_BIT  ( 0x01 )
#define TachOverridePWM_INT_REG_ADDR           ( 0x0e1 )
#define TachOverridePWM_INT_MASK               ( 0x04 )


//--------------------------------------------------
// Constants for TachOverridePWM user defined values
//--------------------------------------------------

#define TachOverridePWM_PERIOD                 ( 0x3e8 )
#define TachOverridePWM_PULSE_WIDTH            ( 0x14 )


//-------------------------------------------------
// Register Addresses for TachOverridePWM
//-------------------------------------------------

#pragma ioport  TachOverridePWM_COUNTER_LSB_REG:    0x024  //DR0 Count register LSB
BYTE            TachOverridePWM_COUNTER_LSB_REG;
#pragma ioport  TachOverridePWM_COUNTER_MSB_REG:    0x028  //DR0 Count register MSB
BYTE            TachOverridePWM_COUNTER_MSB_REG;
#pragma ioport  TachOverridePWM_PERIOD_LSB_REG: 0x025      //DR1 Period register LSB
BYTE            TachOverridePWM_PERIOD_LSB_REG;
#pragma ioport  TachOverridePWM_PERIOD_MSB_REG: 0x029      //DR1 Period register MSB
BYTE            TachOverridePWM_PERIOD_MSB_REG;
#pragma ioport  TachOverridePWM_COMPARE_LSB_REG:    0x026  //DR2 Compare register LSB
BYTE            TachOverridePWM_COMPARE_LSB_REG;
#pragma ioport  TachOverridePWM_COMPARE_MSB_REG:    0x02a  //DR2 Compare register MSB
BYTE            TachOverridePWM_COMPARE_MSB_REG;
#pragma ioport  TachOverridePWM_CONTROL_LSB_REG:    0x027  //Control register LSB
BYTE            TachOverridePWM_CONTROL_LSB_REG;
#pragma ioport  TachOverridePWM_CONTROL_MSB_REG:    0x02b  //Control register MSB
BYTE            TachOverridePWM_CONTROL_MSB_REG;
#pragma ioport  TachOverridePWM_FUNC_LSB_REG:   0x124      //Function register LSB
BYTE            TachOverridePWM_FUNC_LSB_REG;
#pragma ioport  TachOverridePWM_FUNC_MSB_REG:   0x128      //Function register MSB
BYTE            TachOverridePWM_FUNC_MSB_REG;
#pragma ioport  TachOverridePWM_INPUT_LSB_REG:  0x125      //Input register LSB
BYTE            TachOverridePWM_INPUT_LSB_REG;
#pragma ioport  TachOverridePWM_INPUT_MSB_REG:  0x129      //Input register MSB
BYTE            TachOverridePWM_INPUT_MSB_REG;
#pragma ioport  TachOverridePWM_OUTPUT_LSB_REG: 0x126      //Output register LSB
BYTE            TachOverridePWM_OUTPUT_LSB_REG;
#pragma ioport  TachOverridePWM_OUTPUT_MSB_REG: 0x12a      //Output register MSB
BYTE            TachOverridePWM_OUTPUT_MSB_REG;
#pragma ioport  TachOverridePWM_INT_REG:       0x0e1       //Interrupt Mask Register
BYTE            TachOverridePWM_INT_REG;


//-------------------------------------------------
// TachOverridePWM Macro 'Functions'
//-------------------------------------------------

#define TachOverridePWM_Start_M \
   ( TachOverridePWM_CONTROL_LSB_REG |=  TachOverridePWM_CONTROL_REG_START_BIT )

#define TachOverridePWM_Stop_M  \
   ( TachOverridePWM_CONTROL_LSB_REG &= ~TachOverridePWM_CONTROL_REG_START_BIT )

#define TachOverridePWM_EnableInt_M   \
   M8C_EnableIntMask(  TachOverridePWM_INT_REG, TachOverridePWM_INT_MASK )

#define TachOverridePWM_DisableInt_M  \
   M8C_DisableIntMask( TachOverridePWM_INT_REG, TachOverridePWM_INT_MASK )

#endif
// end of file TachOverridePWM.h
